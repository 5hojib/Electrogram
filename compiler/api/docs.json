{
  "constructor": {
    "AccountDaysTTL": {
      "desc": "Time to live in days of the current account",
      "params": {
        "days": "This account will self-destruct in the specified number of days"
      }
    },
    "AppWebViewResultUrl": {
      "desc": "Contains the link that must be used to open a direct link Mini App.",
      "params": {
        "url": "The URL to open"
      }
    },
    "AttachMenuBot": {
      "desc": "Represents a bot mini app that can be launched from the attachment/side menu \u00bb",
      "params": {
        "bot_id": "Bot ID",
        "flags": "Flags, see TL conditional fields",
        "has_settings": "Deprecated flag, can be ignored.",
        "icons": "List of platform-specific static icons and animations to use for the attachment menu button",
        "inactive": "If set, before launching the mini app the client should ask the user to add the mini app to the attachment/side menu, and only if the user accepts, after invoking messages.toggleBotInAttachMenu the app should be opened.",
        "peer_types": "List of dialog types where this attachment menu entry should be shown",
        "request_write_access": "Whether the bot would like to send messages to the user.",
        "short_name": "Attachment menu item name",
        "show_in_attach_menu": "Whether, when installed, an attachment menu entry should be shown for the Mini App.",
        "show_in_side_menu": "Whether, when installed, an entry in the main view side menu should be shown for the Mini App.",
        "side_menu_disclaimer_needed": "If inactive if set and the user hasn't previously accepted the third-party mini apps Terms of Service for this bot, when showing the mini app installation prompt, an additional mandatory checkbox to accept the mini apps TOS and a disclaimer indicating that this Mini App is not affiliated to Telegram should be shown."
      }
    },
    "AttachMenuBotIcon": {
      "desc": "Represents an attachment menu icon for bot mini apps \u00bb",
      "params": {
        "colors": "Attachment menu icon colors.",
        "flags": "Flags, see TL conditional fields",
        "icon": "The actual icon file.",
        "name": "One of the following values: note that animated icons must be played when the user clicks on the button, activating the bot mini app. default_static - Default attachment menu icon in SVG format placeholder_static - Default placeholder for opened Web Apps in SVG format ios_static - Attachment menu icon in SVG format for the official iOS app ios_animated - Animated attachment menu icon in TGS format for the official iOS app android_animated - Animated attachment menu icon in TGS format for the official Android app macos_animated - Animated attachment menu icon in TGS format for the official native Mac OS app ios_side_menu_static - Side menu icon in PNG format for the official iOS app android_side_menu_static - Side menu icon in SVG format for the official android app macos_side_menu_static - Side menu icon in PNG format for the official native Mac OS app"
      }
    },
    "AttachMenuBotIconColor": {
      "desc": "Represents an attachment menu icon color for bot mini apps \u00bb",
      "params": {
        "color": "Color in RGB24 format",
        "name": "One of the following values: light_icon - Color of the attachment menu icon (light mode) light_text - Color of the attachment menu label, once selected (light mode) dark_icon - Color of the attachment menu icon (dark mode) dark_text - Color of the attachment menu label, once selected (dark mode)"
      }
    },
    "AttachMenuBots": {
      "desc": "Represents a list of bot mini apps that can be launched from the attachment menu \u00bb",
      "params": {
        "bots": "List of bot mini apps that can be launched from the attachment menu \u00bb",
        "hash": "Hash for pagination, for more info click here",
        "users": "Info about related users/bots"
      }
    },
    "AttachMenuBotsBot": {
      "desc": "Represents a bot mini app that can be launched from the attachment menu \u00bb",
      "params": {
        "bot": "Represents a bot mini app that can be launched from the attachment menu \u00bb",
        "users": "Info about related users and bots"
      }
    },
    "AttachMenuBotsNotModified": {
      "desc": "The list of bot mini apps hasn't changed",
      "params": {}
    },
    "AttachMenuPeerTypeBotPM": {
      "desc": "The bot attachment menu entry is available in private chats with other bots (excluding the bot that offers the current attachment menu)",
      "params": {}
    },
    "AttachMenuPeerTypeBroadcast": {
      "desc": "The bot attachment menu entry is available in channels",
      "params": {}
    },
    "AttachMenuPeerTypeChat": {
      "desc": "The bot attachment menu entry is available in groups and supergroups",
      "params": {}
    },
    "AttachMenuPeerTypePM": {
      "desc": "The bot attachment menu entry is available in private chats with other users (not bots)",
      "params": {}
    },
    "AttachMenuPeerTypeSameBotPM": {
      "desc": "The bot attachment menu entry is available in the chat with the bot that offers it",
      "params": {}
    },
    "Authorization": {
      "desc": "Logged-in session",
      "params": {
        "api_id": "API ID",
        "app_name": "App name",
        "app_version": "App version",
        "call_requests_disabled": "Whether this session will accept phone calls",
        "country": "Country determined from IP",
        "current": "Whether this is the current session",
        "date_active": "When was the session last active",
        "date_created": "When was the session created",
        "device_model": "Device model",
        "encrypted_requests_disabled": "Whether this session will accept encrypted chats",
        "flags": "Flags, see TL conditional fields",
        "hash": "Identifier",
        "ip": "Last known IP",
        "official_app": "Whether the session is from an official app",
        "password_pending": "Whether the session is still waiting for a 2FA password",
        "platform": "Platform",
        "region": "Region determined from IP",
        "system_version": "System version",
        "unconfirmed": "Whether the session is unconfirmed, see here \u00bb for more info."
      }
    },
    "AutoDownloadSettings": {
      "desc": "Autodownload settings",
      "params": {
        "audio_preload_next": "Whether to preload the next audio track when you're listening to music",
        "disabled": "Disable automatic media downloads?",
        "file_size_max": "Maximum size of other files to preload",
        "flags": "Flags, see TL conditional fields",
        "large_queue_active_operations_max": "A limit, specifying the maximum number of files that should be downloaded in parallel from the same DC, for files bigger than 20MB.",
        "phonecalls_less_data": "Whether to enable data saving mode in phone calls",
        "photo_size_max": "Maximum size of photos to preload",
        "small_queue_active_operations_max": "A limit, specifying the maximum number of files that should be downloaded in parallel from the same DC, for files smaller than 20MB.",
        "stories_preload": "Whether to preload stories; in particular, the first documentAttributeVideo.preload_prefix_size bytes of story videos should be preloaded.",
        "video_preload_large": "Whether to preload the first seconds of videos larger than the specified limit",
        "video_size_max": "Maximum size of videos to preload",
        "video_upload_maxbitrate": "Maximum suggested bitrate for uploading videos"
      }
    },
    "AutoSaveException": {
      "desc": "Peer-specific media autosave settings",
      "params": {
        "peer": "The peer",
        "settings": "Media autosave settings"
      }
    },
    "AutoSaveSettings": {
      "desc": "Media autosave settings",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "photos": "Whether photos should be autosaved to the gallery.",
        "video_max_size": "If set, specifies a size limit for autosavable videos",
        "videos": "Whether videos should be autosaved to the gallery."
      }
    },
    "AvailableEffect": {
      "desc": "{schema}",
      "params": {
        "effect_animation_id": "",
        "effect_sticker_id": "",
        "emoticon": "",
        "flags": "Flags, see TL conditional fields",
        "id": "",
        "premium_required": "",
        "static_icon_id": ""
      }
    },
    "AvailableReaction": {
      "desc": "Animations associated with a message reaction",
      "params": {
        "activate_animation": "The animated sticker to show when the reaction is chosen and activated",
        "appear_animation": "The animated sticker to show when the user opens the reaction dropdown",
        "around_animation": "The animation that plays around the button when you press an existing reaction (played together with center_icon).",
        "center_icon": "The animation of the emoji inside the button when you press an existing reaction (played together with around_animation).",
        "effect_animation": "The background effect (still an animated sticker) to play under the activate_animation, when the reaction is chosen and activated",
        "flags": "Flags, see TL conditional fields",
        "inactive": "If not set, the reaction can be added to new messages and enabled in chats.",
        "premium": "Whether this reaction can only be used by Telegram Premium users",
        "reaction": "Reaction emoji",
        "select_animation": "The animated sticker to show when the user hovers over the reaction",
        "static_icon": "Static icon for the reaction",
        "title": "Reaction description"
      }
    },
    "BankCardOpenUrl": {
      "desc": "Credit card info URL provided by the bank",
      "params": {
        "name": "Bank name",
        "url": "Info URL"
      }
    },
    "BaseThemeArctic": {
      "desc": "Arctic theme",
      "params": {}
    },
    "BaseThemeClassic": {
      "desc": "Classic theme",
      "params": {}
    },
    "BaseThemeDay": {
      "desc": "Day theme",
      "params": {}
    },
    "BaseThemeNight": {
      "desc": "Night theme",
      "params": {}
    },
    "BaseThemeTinted": {
      "desc": "Tinted theme",
      "params": {}
    },
    "Birthday": {
      "desc": "{schema}",
      "params": {
        "day": "",
        "flags": "Flags, see TL conditional fields",
        "month": "",
        "year": ""
      }
    },
    "Boost": {
      "desc": "Info about one or more boosts applied by a specific user.",
      "params": {
        "date": "When was the boost applied",
        "expires": "When does the boost expire",
        "flags": "Flags, see TL conditional fields",
        "gift": "Whether this boost was applied because the channel directly gifted a subscription to the user.",
        "giveaway": "Whether this boost was applied because the user was chosen in a giveaway started by the channel.",
        "giveaway_msg_id": "The message ID of the giveaway",
        "id": "Unique ID for this set of boosts.",
        "multiplier": "If set, this boost counts as multiplier boosts, otherwise it counts as a single boost.",
        "unclaimed": "If set, the user hasn't yet invoked payments.applyGiftCode to claim a subscription gifted directly or in a giveaway by the channel.",
        "used_gift_slug": "The created Telegram Premium gift code, only set if either gift or giveaway are set AND it is either a gift code for the currently logged in user or if it was already claimed.",
        "user_id": "ID of the user that applied the boost."
      }
    },
    "BotApp": {
      "desc": "Contains information about a direct link Mini App.",
      "params": {
        "access_hash": "bot mini app access hash",
        "description": "bot mini app description.",
        "document": "bot mini app animation.",
        "flags": "Flags, see TL conditional fields",
        "hash": "Hash to pass to messages.getBotApp, to avoid refetching bot app info if it hasn't changed.",
        "id": "bot mini app ID",
        "photo": "bot mini app photo.",
        "short_name": "bot mini app short name, used to generate Direct Mini App deep links.",
        "title": "bot mini app title."
      }
    },
    "BotAppNotModified": {
      "desc": "Bot app info hasn't changed.",
      "params": {}
    },
    "BotBusinessConnection": {
      "desc": "{schema}",
      "params": {
        "can_reply": "",
        "connection_id": "",
        "date": "",
        "dc_id": "",
        "disabled": "",
        "flags": "Flags, see TL conditional fields",
        "user_id": ""
      }
    },
    "BotCommand": {
      "desc": "Describes a bot command that can be used in a chat",
      "params": {
        "command": "/command name",
        "description": "Description of the command"
      }
    },
    "BotCommandScopeChatAdmins": {
      "desc": "The specified bot commands will be valid only for chat administrators, in all groups and supergroups.",
      "params": {}
    },
    "BotCommandScopeChats": {
      "desc": "The specified bot commands will be valid in all groups and supergroups.",
      "params": {}
    },
    "BotCommandScopeDefault": {
      "desc": "The commands will be valid in all dialogs",
      "params": {}
    },
    "BotCommandScopePeer": {
      "desc": "The specified bot commands will be valid only in a specific dialog.",
      "params": {
        "peer": "The dialog"
      }
    },
    "BotCommandScopePeerAdmins": {
      "desc": "The specified bot commands will be valid for all admins of the specified group or supergroup.",
      "params": {
        "peer": "The chat"
      }
    },
    "BotCommandScopePeerUser": {
      "desc": "The specified bot commands will be valid only for a specific user in the specified group or supergroup.",
      "params": {
        "peer": "The chat",
        "user_id": "The user"
      }
    },
    "BotCommandScopeUsers": {
      "desc": "The specified bot commands will only be valid in all private chats with users.",
      "params": {}
    },
    "BotInfo": {
      "desc": "Info about bots (available bot commands, etc)",
      "params": {
        "commands": "Bot commands that can be used in the chat",
        "description": "Description of the bot",
        "description_document": "Description animation in MPEG4 format",
        "description_photo": "Description photo",
        "flags": "Flags, see TL conditional fields",
        "menu_button": "Indicates the action to execute when pressing the in-UI menu button for bots",
        "user_id": "ID of the bot"
      }
    },
    "BotInlineMediaResult": {
      "desc": "Media result",
      "params": {
        "description": "Description",
        "document": "If type is document, the document to send",
        "flags": "Flags, see TL conditional fields",
        "id": "Result ID",
        "photo": "If type is photo, the photo to send",
        "send_message": "Depending on the type and on the constructor, contains the caption of the media or the content of the message to be sent instead of the media",
        "title": "Result title",
        "type": "Result type (see bot API docs)"
      }
    },
    "BotInlineMessageMediaAuto": {
      "desc": "Send whatever media is attached to the botInlineMediaResult",
      "params": {
        "entities": "Message entities for styled text",
        "flags": "Flags, see TL conditional fields",
        "invert_media": "If set, any eventual webpage preview will be shown on top of the message instead of at the bottom.",
        "message": "Caption",
        "reply_markup": "Inline keyboard"
      }
    },
    "BotInlineMessageMediaContact": {
      "desc": "Send a contact",
      "params": {
        "first_name": "First name",
        "flags": "Flags, see TL conditional fields",
        "last_name": "Last name",
        "phone_number": "Phone number",
        "reply_markup": "Inline keyboard",
        "vcard": "VCard info"
      }
    },
    "BotInlineMessageMediaGeo": {
      "desc": "Send a geolocation",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "geo": "Geolocation",
        "heading": "For live locations, a direction in which the location moves, in degrees; 1-360.",
        "period": "Validity period",
        "proximity_notification_radius": "For live locations, a maximum distance to another chat member for proximity alerts, in meters (0-100000).",
        "reply_markup": "Inline keyboard"
      }
    },
    "BotInlineMessageMediaInvoice": {
      "desc": "Send an invoice",
      "params": {
        "currency": "Three-letter ISO 4217 currency code",
        "description": "Product description, 1-255 characters",
        "flags": "Flags, see TL conditional fields",
        "photo": "Product photo",
        "reply_markup": "Inline keyboard",
        "shipping_address_requested": "Set this flag if you require the user's shipping address to complete the order",
        "test": "Test invoice",
        "title": "Product name, 1-32 characters",
        "total_amount": "Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)."
      }
    },
    "BotInlineMessageMediaVenue": {
      "desc": "Send a venue",
      "params": {
        "address": "Address",
        "flags": "Flags, see TL conditional fields",
        "geo": "Geolocation of venue",
        "provider": "Venue provider: currently only \"foursquare\" and \"gplaces\" (Google Places) need to be supported",
        "reply_markup": "Inline keyboard",
        "title": "Venue name",
        "venue_id": "Venue ID in the provider's database",
        "venue_type": "Venue type in the provider's database"
      }
    },
    "BotInlineMessageMediaWebPage": {
      "desc": "Specifies options that must be used to generate the link preview for the message, or even a standalone link preview without an attached message.",
      "params": {
        "entities": "Message entities for styled text",
        "flags": "Flags, see TL conditional fields",
        "force_large_media": "If set, specifies that a large media preview should be used.",
        "force_small_media": "If set, specifies that a small media preview should be used.",
        "invert_media": "If set, any eventual webpage preview will be shown on top of the message instead of at the bottom.",
        "manual": "If set, indicates that the URL used for the webpage preview was specified manually using inputMediaWebPage, and may not be related to any of the URLs specified in the message.",
        "message": "The message, can be empty.",
        "reply_markup": "Reply markup for sending bot buttons",
        "safe": "If set, the link can be opened directly without user confirmation.",
        "url": "The URL to use for the link preview."
      }
    },
    "BotInlineMessageText": {
      "desc": "Send a simple text message",
      "params": {
        "entities": "Message entities for styled text",
        "flags": "Flags, see TL conditional fields",
        "invert_media": "If set, any eventual webpage preview will be shown on top of the message instead of at the bottom.",
        "message": "The message",
        "no_webpage": "Disable webpage preview",
        "reply_markup": "Inline keyboard"
      }
    },
    "BotInlineResult": {
      "desc": "Generic result",
      "params": {
        "content": "Content of the result",
        "description": "Result description",
        "flags": "Flags, see TL conditional fields",
        "id": "Result ID",
        "send_message": "Message to send",
        "thumb": "Thumbnail for the result",
        "title": "Result title",
        "type": "Result type (see bot API docs)",
        "url": "URL of article or webpage"
      }
    },
    "BotMenuButton": {
      "desc": "Bot menu button that opens a web app when clicked.",
      "params": {
        "text": "Title to be displayed on the menu button instead of 'Menu'",
        "url": "URL of a web app to open when the user clicks on the button"
      }
    },
    "BotMenuButtonCommands": {
      "desc": "Bot menu button that opens the bot command list when clicked.",
      "params": {}
    },
    "BotMenuButtonDefault": {
      "desc": "Placeholder bot menu button never returned to users: see the docs for more info.",
      "params": {}
    },
    "BroadcastRevenueBalances": {
      "desc": "{schema}",
      "params": {
        "available_balance": "",
        "current_balance": "",
        "overall_revenue": ""
      }
    },
    "BroadcastRevenueTransactionProceeds": {
      "desc": "{schema}",
      "params": {
        "amount": "",
        "from_date": "",
        "to_date": ""
      }
    },
    "BroadcastRevenueTransactionRefund": {
      "desc": "{schema}",
      "params": {
        "amount": "",
        "date": "",
        "provider": ""
      }
    },
    "BroadcastRevenueTransactionWithdrawal": {
      "desc": "{schema}",
      "params": {
        "amount": "",
        "date": "",
        "failed": "",
        "flags": "Flags, see TL conditional fields",
        "pending": "",
        "provider": "",
        "transaction_date": "",
        "transaction_url": ""
      }
    },
    "BusinessAwayMessage": {
      "desc": "{schema}",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "offline_only": "",
        "recipients": "",
        "schedule": "",
        "shortcut_id": ""
      }
    },
    "BusinessAwayMessageScheduleAlways": {
      "desc": "{schema}",
      "params": {}
    },
    "BusinessAwayMessageScheduleCustom": {
      "desc": "{schema}",
      "params": {
        "end_date": "",
        "start_date": ""
      }
    },
    "BusinessAwayMessageScheduleOutsideWorkHours": {
      "desc": "{schema}",
      "params": {}
    },
    "BusinessBotRecipients": {
      "desc": "{schema}",
      "params": {
        "contacts": "",
        "exclude_selected": "",
        "exclude_users": "",
        "existing_chats": "",
        "flags": "Flags, see TL conditional fields",
        "new_chats": "",
        "non_contacts": "",
        "users": ""
      }
    },
    "BusinessChatLink": {
      "desc": "{schema}",
      "params": {
        "entities": "Message entities for styled text",
        "flags": "Flags, see TL conditional fields",
        "link": "",
        "message": "",
        "title": "",
        "views": ""
      }
    },
    "BusinessGreetingMessage": {
      "desc": "{schema}",
      "params": {
        "no_activity_days": "",
        "recipients": "",
        "shortcut_id": ""
      }
    },
    "BusinessIntro": {
      "desc": "{schema}",
      "params": {
        "description": "",
        "flags": "Flags, see TL conditional fields",
        "sticker": "",
        "title": ""
      }
    },
    "BusinessLocation": {
      "desc": "{schema}",
      "params": {
        "address": "",
        "flags": "Flags, see TL conditional fields",
        "geo_point": ""
      }
    },
    "BusinessRecipients": {
      "desc": "{schema}",
      "params": {
        "contacts": "",
        "exclude_selected": "",
        "existing_chats": "",
        "flags": "Flags, see TL conditional fields",
        "new_chats": "",
        "non_contacts": "",
        "users": ""
      }
    },
    "BusinessWeeklyOpen": {
      "desc": "{schema}",
      "params": {
        "end_minute": "",
        "start_minute": ""
      }
    },
    "BusinessWorkHours": {
      "desc": "{schema}",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "open_now": "",
        "timezone_id": "",
        "weekly_open": ""
      }
    },
    "CdnConfig": {
      "desc": "Configuration for CDN file downloads.",
      "params": {
        "public_keys": "Vector of public keys to use only during handshakes to CDN DCs."
      }
    },
    "CdnPublicKey": {
      "desc": "Public key to use only during handshakes to CDN DCs.",
      "params": {
        "dc_id": "CDN DC ID",
        "public_key": "RSA public key"
      }
    },
    "Channel": {
      "desc": "Channel/supergroup info",
      "params": {
        "access_hash": "Access hash",
        "admin_rights": "Admin rights of the user in this channel (see rights)",
        "banned_rights": "Banned rights of the user in this channel (see rights)",
        "broadcast": "Is this a channel?",
        "call_active": "Whether a group call or livestream is currently active",
        "call_not_empty": "Whether there's anyone in the group call or livestream",
        "color": "The channel's accent color.",
        "creator": "Whether the current user is the creator of this channel",
        "date": "Date when the user joined the supergroup/channel, or if the user isn't a member, its creation date",
        "default_banned_rights": "Default chat rights (see rights)",
        "emoji_status": "Emoji status",
        "fake": "If set, this supergroup/channel was reported by many users as a fake or scam: be careful when interacting with it.",
        "flags": "Flags, see TL conditional fields",
        "flags2": "Flags, see TL conditional fields",
        "forum": "Whether this supergroup is a forum",
        "gigagroup": "Whether this supergroup is a gigagroup",
        "has_geo": "Whether this chanel has a geoposition",
        "has_link": "Whether this channel has a private join link",
        "id": "ID of the channel",
        "join_request": "Whether a user's join request will have to be approved by administrators, toggle using channels.toggleJoinToSend",
        "join_to_send": "Whether a user needs to join the supergroup before they can send messages: can be false only for discussion groups \u00bb, toggle using channels.toggleJoinToSend",
        "left": "Whether the current user has left or is not a member of this channel",
        "level": "Boost level",
        "megagroup": "Is this a supergroup?",
        "min": "See min",
        "noforwards": "Whether this channel or group is protected, thus does not allow forwarding messages from it",
        "participants_count": "Participant count",
        "photo": "Profile photo",
        "profile_color": "The channel's profile color.",
        "restricted": "Whether viewing/writing in this channel for a reason (see restriction_reason",
        "restriction_reason": "Contains the reason why access to this channel must be restricted.",
        "scam": "This channel/supergroup is probably a scam",
        "signatures": "Whether signatures are enabled (channels)",
        "slowmode_enabled": "Whether slow mode is enabled for groups to prevent flood in chat",
        "stories_hidden": "Whether we have hidden all stories posted by this channel \u00bb.",
        "stories_hidden_min": "If set, indicates that the stories_hidden flag was not populated, and its value must cannot be relied on; use the previously cached value, or re-fetch the constructor using channels.getChannels to obtain the latest value of the stories_hidden flag.",
        "stories_max_id": "ID of the maximum read story.",
        "stories_unavailable": "No stories from the channel are visible.",
        "title": "Title",
        "username": "Username",
        "usernames": "Additional usernames",
        "verified": "Is this channel verified by telegram?"
      }
    },
    "ChannelAdminLogEvent": {
      "desc": "Admin log event",
      "params": {
        "action": "Action",
        "date": "Date",
        "id": "Event ID",
        "user_id": "User ID"
      }
    },
    "ChannelAdminLogEventActionChangeAbout": {
      "desc": "The description was changed",
      "params": {
        "new_value": "New description",
        "prev_value": "Previous description"
      }
    },
    "ChannelAdminLogEventActionChangeAvailableReactions": {
      "desc": "The set of allowed message reactions \u00bb for this channel has changed",
      "params": {
        "new_value": "New allowed reaction emojis",
        "prev_value": "Previously allowed reaction emojis"
      }
    },
    "ChannelAdminLogEventActionChangeEmojiStatus": {
      "desc": "The emoji status was changed",
      "params": {
        "new_value": "New emoji status",
        "prev_value": "Previous emoji status"
      }
    },
    "ChannelAdminLogEventActionChangeEmojiStickerSet": {
      "desc": "{schema}",
      "params": {
        "new_stickerset": "",
        "prev_stickerset": ""
      }
    },
    "ChannelAdminLogEventActionChangeHistoryTTL": {
      "desc": "The Time-To-Live of messages in this chat was changed",
      "params": {
        "new_value": "New value",
        "prev_value": "Previous value"
      }
    },
    "ChannelAdminLogEventActionChangeLinkedChat": {
      "desc": "The linked chat was changed",
      "params": {
        "new_value": "New linked chat",
        "prev_value": "Previous linked chat"
      }
    },
    "ChannelAdminLogEventActionChangeLocation": {
      "desc": "The geogroup location was changed",
      "params": {
        "new_value": "New location",
        "prev_value": "Previous location"
      }
    },
    "ChannelAdminLogEventActionChangePeerColor": {
      "desc": "The message accent color was changed",
      "params": {
        "new_value": "New accent palette",
        "prev_value": "Previous accent palette"
      }
    },
    "ChannelAdminLogEventActionChangePhoto": {
      "desc": "The channel/supergroup's picture was changed",
      "params": {
        "new_photo": "New picture",
        "prev_photo": "Previous picture"
      }
    },
    "ChannelAdminLogEventActionChangeProfilePeerColor": {
      "desc": "The profile accent color was changed",
      "params": {
        "new_value": "New accent palette",
        "prev_value": "Previous accent palette"
      }
    },
    "ChannelAdminLogEventActionChangeStickerSet": {
      "desc": "The supergroup's stickerset was changed",
      "params": {
        "new_stickerset": "New stickerset",
        "prev_stickerset": "Previous stickerset"
      }
    },
    "ChannelAdminLogEventActionChangeTitle": {
      "desc": "Channel/supergroup title was changed",
      "params": {
        "new_value": "New title",
        "prev_value": "Previous title"
      }
    },
    "ChannelAdminLogEventActionChangeUsername": {
      "desc": "Channel/supergroup username was changed",
      "params": {
        "new_value": "New username",
        "prev_value": "Old username"
      }
    },
    "ChannelAdminLogEventActionChangeUsernames": {
      "desc": "The list of usernames associated with the channel was changed",
      "params": {
        "new_value": "New set of usernames",
        "prev_value": "Previous set of usernames"
      }
    },
    "ChannelAdminLogEventActionChangeWallpaper": {
      "desc": "The wallpaper was changed",
      "params": {
        "new_value": "New wallpaper",
        "prev_value": "Previous wallpaper"
      }
    },
    "ChannelAdminLogEventActionCreateTopic": {
      "desc": "A forum topic was created",
      "params": {
        "topic": "The forum topic that was created"
      }
    },
    "ChannelAdminLogEventActionDefaultBannedRights": {
      "desc": "The default banned rights were modified",
      "params": {
        "new_banned_rights": "New global banned rights.",
        "prev_banned_rights": "Previous global banned rights"
      }
    },
    "ChannelAdminLogEventActionDeleteMessage": {
      "desc": "A message was deleted",
      "params": {
        "message": "The message that was deleted"
      }
    },
    "ChannelAdminLogEventActionDeleteTopic": {
      "desc": "A forum topic was deleted",
      "params": {
        "topic": "The forum topic that was deleted"
      }
    },
    "ChannelAdminLogEventActionDiscardGroupCall": {
      "desc": "A group call was terminated",
      "params": {
        "call": "The group call that was terminated"
      }
    },
    "ChannelAdminLogEventActionEditMessage": {
      "desc": "A message was edited",
      "params": {
        "new_message": "New message",
        "prev_message": "Old message"
      }
    },
    "ChannelAdminLogEventActionEditTopic": {
      "desc": "A forum topic was edited",
      "params": {
        "new_topic": "New topic information",
        "prev_topic": "Previous topic information"
      }
    },
    "ChannelAdminLogEventActionExportedInviteDelete": {
      "desc": "A chat invite was deleted",
      "params": {
        "invite": "The deleted chat invite"
      }
    },
    "ChannelAdminLogEventActionExportedInviteEdit": {
      "desc": "A chat invite was edited",
      "params": {
        "new_invite": "New chat invite information",
        "prev_invite": "Previous chat invite information"
      }
    },
    "ChannelAdminLogEventActionExportedInviteRevoke": {
      "desc": "A specific invite link was revoked",
      "params": {
        "invite": "The invite link that was revoked"
      }
    },
    "ChannelAdminLogEventActionParticipantInvite": {
      "desc": "A user was invited to the group",
      "params": {
        "participant": "The user that was invited"
      }
    },
    "ChannelAdminLogEventActionParticipantJoin": {
      "desc": "A user has joined the group (in the case of big groups, info of the user that has joined isn't shown)",
      "params": {}
    },
    "ChannelAdminLogEventActionParticipantJoinByInvite": {
      "desc": "A user joined the supergroup/channel using a specific invite link",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "invite": "The invite link used to join the supergroup/channel",
        "via_chatlist": "The participant joined by importing a chat folder deep link \u00bb."
      }
    },
    "ChannelAdminLogEventActionParticipantJoinByRequest": {
      "desc": "A new member was accepted to the chat by an admin",
      "params": {
        "approved_by": "ID of the admin that approved the invite",
        "invite": "The invite link that was used to join the chat"
      }
    },
    "ChannelAdminLogEventActionParticipantLeave": {
      "desc": "A user left the channel/supergroup (in the case of big groups, info of the user that has joined isn't shown)",
      "params": {}
    },
    "ChannelAdminLogEventActionParticipantMute": {
      "desc": "A group call participant was muted",
      "params": {
        "participant": "The participant that was muted"
      }
    },
    "ChannelAdminLogEventActionParticipantToggleAdmin": {
      "desc": "The admin rights of a user were changed",
      "params": {
        "new_participant": "New admin rights",
        "prev_participant": "Previous admin rights"
      }
    },
    "ChannelAdminLogEventActionParticipantToggleBan": {
      "desc": "The banned rights of a user were changed",
      "params": {
        "new_participant": "New banned rights of user",
        "prev_participant": "Old banned rights of user"
      }
    },
    "ChannelAdminLogEventActionParticipantUnmute": {
      "desc": "A group call participant was unmuted",
      "params": {
        "participant": "The participant that was unmuted"
      }
    },
    "ChannelAdminLogEventActionParticipantVolume": {
      "desc": "channelAdminLogEvent.user_id has set the volume of participant.peer to participant.volume",
      "params": {
        "participant": "The participant whose volume was changed"
      }
    },
    "ChannelAdminLogEventActionPinTopic": {
      "desc": "A forum topic was pinned or unpinned",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "new_topic": "New topic information",
        "prev_topic": "Previous topic information"
      }
    },
    "ChannelAdminLogEventActionSendMessage": {
      "desc": "A message was posted in a channel",
      "params": {
        "message": "The message that was sent"
      }
    },
    "ChannelAdminLogEventActionStartGroupCall": {
      "desc": "A group call was started",
      "params": {
        "call": "Group call"
      }
    },
    "ChannelAdminLogEventActionStopPoll": {
      "desc": "A poll was stopped",
      "params": {
        "message": "The poll that was stopped"
      }
    },
    "ChannelAdminLogEventActionToggleAntiSpam": {
      "desc": "Native antispam functionality was enabled or disabled.",
      "params": {
        "new_value": "Whether antispam functionality was enabled or disabled."
      }
    },
    "ChannelAdminLogEventActionToggleForum": {
      "desc": "Forum functionality was enabled or disabled.",
      "params": {
        "new_value": "Whether forum functionality was enabled or disabled."
      }
    },
    "ChannelAdminLogEventActionToggleGroupCallSetting": {
      "desc": "Group call settings were changed",
      "params": {
        "join_muted": "Whether all users are muted by default upon joining"
      }
    },
    "ChannelAdminLogEventActionToggleInvites": {
      "desc": "Invites were enabled/disabled",
      "params": {
        "new_value": "New value"
      }
    },
    "ChannelAdminLogEventActionToggleNoForwards": {
      "desc": "Forwards were enabled or disabled",
      "params": {
        "new_value": "Old value"
      }
    },
    "ChannelAdminLogEventActionTogglePreHistoryHidden": {
      "desc": "The hidden prehistory setting was changed",
      "params": {
        "new_value": "New value"
      }
    },
    "ChannelAdminLogEventActionToggleSignatures": {
      "desc": "Channel signatures were enabled/disabled",
      "params": {
        "new_value": "New value"
      }
    },
    "ChannelAdminLogEventActionToggleSlowMode": {
      "desc": "Slow mode setting for supergroups was changed",
      "params": {
        "new_value": "New slow mode value",
        "prev_value": "Previous slow mode value"
      }
    },
    "ChannelAdminLogEventActionUpdatePinned": {
      "desc": "A message was pinned",
      "params": {
        "message": "The message that was pinned"
      }
    },
    "ChannelAdminLogEventsFilter": {
      "desc": "Filter only certain admin log events",
      "params": {
        "ban": "Ban events",
        "delete": "Message deletion events",
        "demote": "Admin demotion events",
        "edit": "Message edit events",
        "flags": "Flags, see TL conditional fields",
        "forums": "Forum-related events",
        "group_call": "Group call events",
        "info": "Info change events (when about, linked chat, location, photo, stickerset, title or username, slowmode, history TTL settings of a channel gets modified)",
        "invite": "Invite events",
        "invites": "Invite events",
        "join": "Join events, including joins using invite links and join requests.",
        "kick": "Kick events",
        "leave": "Leave events",
        "pinned": "Message pin events",
        "promote": "Admin promotion events",
        "send": "A message was posted in a channel",
        "settings": "Settings change events (invites, hidden prehistory, signatures, default banned rights, forum toggle events)",
        "unban": "Unban events",
        "unkick": "Unkick events"
      }
    },
    "ChannelForbidden": {
      "desc": "Indicates a channel/supergroup we can't access because we were banned, or for some other reason.",
      "params": {
        "access_hash": "Access hash",
        "broadcast": "Is this a channel",
        "flags": "Flags, see TL conditional fields",
        "id": "Channel ID",
        "megagroup": "Is this a supergroup",
        "title": "Title",
        "until_date": "The ban is valid until the specified date"
      }
    },
    "ChannelFull": {
      "desc": "Full info about a channel, supergroup or gigagroup.",
      "params": {
        "about": "Info about the channel",
        "admins_count": "Number of channel admins",
        "antispam": "Whether native antispam functionality is enabled in this supergroup.",
        "available_min_id": "Identifier of a maximum unavailable message in a channel due to hidden history.",
        "available_reactions": "Allowed message reactions \u00bb",
        "banned_count": "Number of users banned from the channel",
        "blocked": "Whether any anonymous admin of this supergroup was blocked: if set, you won't receive messages from anonymous group admins in discussion replies via @replies",
        "boosts_applied": "",
        "boosts_unrestrict": "",
        "bot_info": "Info about bots in the channel/supergroup",
        "call": "Livestream or group call information",
        "can_delete_channel": "Can we delete this channel?",
        "can_set_location": "Can we set the geolocation of this group (for geogroups)",
        "can_set_stickers": "Can we associate a stickerpack to the supergroup?",
        "can_set_username": "Can we set the channel's username?",
        "can_view_participants": "Can we view the participant list?",
        "can_view_revenue": "",
        "can_view_stats": "Can the user view channel/supergroup statistics",
        "chat_photo": "Channel picture",
        "default_send_as": "Default peer used for sending messages to this channel",
        "emojiset": "",
        "exported_invite": "Invite link",
        "flags": "Flags, see TL conditional fields",
        "flags2": "Flags, see TL conditional fields",
        "folder_id": "Peer folder ID, for more info click here",
        "groupcall_default_join_as": "When using phone.getGroupCallJoinAs to get a list of peers that can be used to join a group call, this field indicates the peer that should be selected by default.",
        "has_scheduled": "Whether scheduled messages are available",
        "hidden_prehistory": "Is the history before we joined hidden to us?",
        "id": "ID of the channel",
        "kicked_count": "Number of users kicked from the channel",
        "linked_chat_id": "ID of the linked discussion chat for channels",
        "location": "Location of the geogroup",
        "migrated_from_chat_id": "The chat ID from which this group was migrated",
        "migrated_from_max_id": "The message ID in the original chat at which this group was migrated",
        "notify_settings": "Notification settings",
        "online_count": "Number of users currently online",
        "participants_count": "Number of participants of the channel",
        "participants_hidden": "Whether the participant list is hidden.",
        "pending_suggestions": "A list of suggested actions for the supergroup admin, see here for more info \u00bb.",
        "pinned_msg_id": "Message ID of the last pinned message",
        "pts": "Latest PTS for this channel",
        "reactions_limit": "",
        "read_inbox_max_id": "Position up to which all incoming messages are read.",
        "read_outbox_max_id": "Position up to which all outgoing messages are read.",
        "recent_requesters": "IDs of users who requested to join recently",
        "requests_pending": "Pending join requests \u00bb",
        "restricted_sponsored": "",
        "slowmode_next_send_date": "Indicates when the user will be allowed to send another message in the supergroup (unixtime)",
        "slowmode_seconds": "If specified, users in supergroups will only be able to send one message every slowmode_seconds seconds",
        "stats_dc": "If set, specifies the DC to use for fetching channel statistics",
        "stickerset": "Associated stickerset",
        "stories": "Channel stories",
        "stories_pinned_available": "Whether this user has some pinned stories.",
        "theme_emoticon": "Emoji representing a specific chat theme",
        "translations_disabled": "Whether the real-time chat translation popup should be hidden.",
        "ttl_period": "Time-To-Live of messages in this channel or supergroup",
        "unread_count": "Count of unread messages",
        "view_forum_as_messages": "Users may also choose to display messages from all topics of a forum as if they were sent to a normal group, using a \"View as messages\" setting in the local client.  This setting only affects the current account, and is synced to other logged in sessions using the channels.toggleViewForumAsMessages method; invoking this method will update the value of this flag.",
        "wallpaper": "Wallpaper"
      }
    },
    "ChannelLocation": {
      "desc": "Geographical location of supergroup (geogroups)",
      "params": {
        "address": "Textual description of the address",
        "geo_point": "Geographical location of supergroup"
      }
    },
    "ChannelLocationEmpty": {
      "desc": "No location (normal supergroup)",
      "params": {}
    },
    "ChannelMessagesFilter": {
      "desc": "Filter for getting only certain types of channel messages",
      "params": {
        "exclude_new_messages": "Whether to exclude new messages from the search",
        "flags": "Flags, see TL conditional fields",
        "ranges": "A range of messages to fetch"
      }
    },
    "ChannelMessagesFilterEmpty": {
      "desc": "No filter",
      "params": {}
    },
    "ChannelParticipant": {
      "desc": "Channel/supergroup participant",
      "params": {
        "date": "Date joined",
        "user_id": "Participant user ID"
      }
    },
    "ChannelParticipantAdmin": {
      "desc": "Admin",
      "params": {
        "admin_rights": "Admin rights",
        "can_edit": "Can this admin promote other admins with the same permissions?",
        "date": "When did the user join",
        "flags": "Flags, see TL conditional fields",
        "inviter_id": "User that invited the admin to the channel/group",
        "promoted_by": "User that promoted the user to admin",
        "rank": "The role (rank) of the admin in the group: just an arbitrary string, admin by default",
        "self": "Is this the current user",
        "user_id": "Admin user ID"
      }
    },
    "ChannelParticipantBanned": {
      "desc": "Banned/kicked user",
      "params": {
        "banned_rights": "Banned rights",
        "date": "When did the user join the group",
        "flags": "Flags, see TL conditional fields",
        "kicked_by": "User was kicked by the specified admin",
        "left": "Whether the user has left the group",
        "peer": "The banned peer"
      }
    },
    "ChannelParticipantCreator": {
      "desc": "Channel/supergroup creator",
      "params": {
        "admin_rights": "Creator admin rights",
        "flags": "Flags, see TL conditional fields",
        "rank": "The role (rank) of the group creator in the group: just an arbitrary string, admin by default",
        "user_id": "User ID"
      }
    },
    "ChannelParticipantLeft": {
      "desc": "A participant that left the channel/supergroup",
      "params": {
        "peer": "The peer that left"
      }
    },
    "ChannelParticipantSelf": {
      "desc": "Myself",
      "params": {
        "date": "When did I join the channel/supergroup",
        "flags": "Flags, see TL conditional fields",
        "inviter_id": "User that invited me to the channel/supergroup",
        "user_id": "User ID",
        "via_request": "Whether I joined upon specific approval of an admin"
      }
    },
    "ChannelParticipantsAdmins": {
      "desc": "Fetch only admin participants",
      "params": {}
    },
    "ChannelParticipantsBanned": {
      "desc": "Fetch only banned participants",
      "params": {
        "q": "Optional filter for searching banned participants by name (otherwise empty)"
      }
    },
    "ChannelParticipantsBots": {
      "desc": "Fetch only bot participants",
      "params": {}
    },
    "ChannelParticipantsContacts": {
      "desc": "Fetch only participants that are also contacts",
      "params": {
        "q": "Optional search query for searching contact participants by name"
      }
    },
    "ChannelParticipantsKicked": {
      "desc": "Fetch only kicked participants",
      "params": {
        "q": "Optional filter for searching kicked participants by name (otherwise empty)"
      }
    },
    "ChannelParticipantsMentions": {
      "desc": "This filter is used when looking for supergroup members to mention.\nThis filter will automatically remove anonymous admins, and return even non-participant users that replied to a specific thread through the comment section of a channel.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "q": "Filter by user name or username",
        "top_msg_id": "Look only for users that posted in this thread"
      }
    },
    "ChannelParticipantsRecent": {
      "desc": "Fetch only recent participants",
      "params": {}
    },
    "ChannelParticipantsSearch": {
      "desc": "Query participants by name",
      "params": {
        "q": "Search query"
      }
    },
    "Chat": {
      "desc": "Info about a group",
      "params": {
        "admin_rights": "Admin rights of the user in the group",
        "call_active": "Whether a group call is currently active",
        "call_not_empty": "Whether there's anyone in the group call",
        "creator": "Whether the current user is the creator of the group",
        "date": "Date of creation of the group",
        "deactivated": "Whether the group was migrated",
        "default_banned_rights": "Default banned rights of all users in the group",
        "flags": "Flags, see TL conditional fields",
        "id": "ID of the group",
        "left": "Whether the current user has left the group",
        "migrated_to": "Means this chat was upgraded to a supergroup",
        "noforwards": "Whether this group is protected, thus does not allow forwarding messages from it",
        "participants_count": "Participant count",
        "photo": "Chat photo",
        "title": "Title",
        "version": "Used in basic groups to reorder updates and make sure that all of them were received."
      }
    },
    "ChatAdminRights": {
      "desc": "Represents the rights of an admin in a channel/supergroup.",
      "params": {
        "add_admins": "If set, allows the admin to add other admins with the same (or more limited) permissions in the channel/supergroup",
        "anonymous": "Whether this admin is anonymous",
        "ban_users": "If set, allows the admin to ban users from the channel/supergroup",
        "change_info": "If set, allows the admin to modify the description of the channel/supergroup",
        "delete_messages": "If set, allows the admin to also delete messages from other admins in the channel",
        "delete_stories": "If set, allows the admin to delete stories posted by the other admins of the channel.",
        "edit_messages": "If set, allows the admin to also edit messages from other admins in the channel",
        "edit_stories": "If set, allows the admin to edit stories posted by the other admins of the channel.",
        "flags": "Flags, see TL conditional fields",
        "invite_users": "If set, allows the admin to invite users in the channel/supergroup",
        "manage_call": "If set, allows the admin to change group call/livestream settings",
        "manage_topics": "If set, allows the admin to create, delete or modify forum topics \u00bb.",
        "other": "Set this flag if none of the other flags are set, but you still want the user to be an admin: if this or any of the other flags are set, the admin can get the chat admin log, get chat statistics, get message statistics in channels, get channel members, see anonymous administrators in supergroups and ignore slow mode.",
        "pin_messages": "If set, allows the admin to pin messages in the channel/supergroup",
        "post_messages": "If set, allows the admin to post messages in the channel",
        "post_stories": "If set, allows the admin to post stories as the channel."
      }
    },
    "ChatAdminWithInvites": {
      "desc": "Info about chat invites generated by admins.",
      "params": {
        "admin_id": "The admin",
        "invites_count": "Number of invites generated by the admin",
        "revoked_invites_count": "Number of revoked invites"
      }
    },
    "ChatBannedRights": {
      "desc": "Represents the rights of a normal user in a supergroup/channel/chat. In this case, the flags are inverted: if set, a flag does not allow a user to do X.",
      "params": {
        "change_info": "If set, does not allow any user to change the description of a supergroup/chat",
        "embed_links": "If set, does not allow a user to embed links in the messages of a supergroup/chat",
        "flags": "Flags, see TL conditional fields",
        "invite_users": "If set, does not allow any user to invite users in a supergroup/chat",
        "manage_topics": "If set, does not allow any user to create, delete or modify forum topics \u00bb.",
        "pin_messages": "If set, does not allow any user to pin messages in a supergroup/chat",
        "send_audios": "If set, does not allow a user to send audio files in a supergroup/chat.",
        "send_docs": "If set, does not allow a user to send documents in a supergroup/chat.",
        "send_games": "If set, does not allow a user to send games in a supergroup/chat",
        "send_gifs": "If set, does not allow a user to send gifs in a supergroup/chat",
        "send_inline": "If set, does not allow a user to use inline bots in a supergroup/chat.",
        "send_media": "If set, does not allow a user to send any media in a supergroup/chat",
        "send_messages": "If set, does not allow a user to send messages in a supergroup/chat",
        "send_photos": "If set, does not allow a user to send photos in a supergroup/chat.",
        "send_plain": "If set, does not allow a user to send text messages in a supergroup/chat.",
        "send_polls": "If set, does not allow a user to send polls in a supergroup/chat",
        "send_roundvideos": "If set, does not allow a user to send round videos in a supergroup/chat.",
        "send_stickers": "If set, does not allow a user to send stickers in a supergroup/chat",
        "send_videos": "If set, does not allow a user to send videos in a supergroup/chat.",
        "send_voices": "If set, does not allow a user to send voice messages in a supergroup/chat.",
        "until_date": "Validity of said permissions (it is considered forever any value less then 30 seconds or more then 366 days).",
        "view_messages": "If set, does not allow a user to view messages in a supergroup/channel/chat"
      }
    },
    "ChatEmpty": {
      "desc": "Empty constructor, group doesn't exist",
      "params": {
        "id": "Group identifier"
      }
    },
    "ChatForbidden": {
      "desc": "A group to which the user has no access. E.g., because the user was kicked from the group.",
      "params": {
        "id": "User identifier",
        "title": "Group name"
      }
    },
    "ChatFull": {
      "desc": "Full info about a basic group.",
      "params": {
        "about": "About string for this chat",
        "available_reactions": "Allowed message reactions \u00bb",
        "bot_info": "Info about bots that are in this chat",
        "call": "Group call information",
        "can_set_username": "Can we change the username of this chat",
        "chat_photo": "Chat photo",
        "exported_invite": "Chat invite",
        "flags": "Flags, see TL conditional fields",
        "folder_id": "Peer folder ID, for more info click here",
        "groupcall_default_join_as": "When using phone.getGroupCallJoinAs to get a list of peers that can be used to join a group call, this field indicates the peer that should be selected by default.",
        "has_scheduled": "Whether scheduled messages are available",
        "id": "ID of the chat",
        "notify_settings": "Notification settings",
        "participants": "Participant list",
        "pinned_msg_id": "Message ID of the last pinned message",
        "reactions_limit": "",
        "recent_requesters": "IDs of users who requested to join recently",
        "requests_pending": "Pending join requests \u00bb",
        "theme_emoticon": "Emoji representing a specific chat theme",
        "translations_disabled": "Whether the real-time chat translation popup should be hidden.",
        "ttl_period": "Time-To-Live of messages sent by the current user to this chat"
      }
    },
    "ChatInvite": {
      "desc": "Chat invite info",
      "params": {
        "about": "Description of the group of channel",
        "broadcast": "Whether this is a channel",
        "channel": "Whether this is a channel/supergroup or a normal group",
        "color": "Profile color palette ID",
        "fake": "If set, this chat was reported by many users as a fake or scam: be careful when interacting with it.",
        "flags": "Flags, see TL conditional fields",
        "megagroup": "Whether this is a supergroup",
        "participants": "A few of the participants that are in the group",
        "participants_count": "Participant count",
        "photo": "Chat/supergroup/channel photo",
        "public": "Whether this is a public channel/supergroup",
        "request_needed": "Whether the join request \u00bb must be first approved by an administrator",
        "scam": "This chat is probably a scam",
        "title": "Chat/supergroup/channel title",
        "verified": "Is this chat or channel verified by Telegram?"
      }
    },
    "ChatInviteAlready": {
      "desc": "The user has already joined this chat",
      "params": {
        "chat": "The chat connected to the invite"
      }
    },
    "ChatInviteExported": {
      "desc": "Exported chat invite",
      "params": {
        "admin_id": "ID of the admin that created this chat invite",
        "date": "When was this chat invite created",
        "expire_date": "When does this chat invite expire",
        "flags": "Flags, see TL conditional fields",
        "link": "Chat invitation link",
        "permanent": "Whether this chat invite has no expiration",
        "request_needed": "Whether users importing this invite link will have to be approved to join the channel or group",
        "requested": "Number of users that have already used this link to join",
        "revoked": "Whether this chat invite was revoked",
        "start_date": "When was this chat invite last modified",
        "title": "Custom description for the invite link, visible only to admins",
        "usage": "How many users joined using this link",
        "usage_limit": "Maximum number of users that can join using this link"
      }
    },
    "ChatInviteImporter": {
      "desc": "When and which user joined the chat using a chat invite",
      "params": {
        "about": "For users with pending requests, contains bio of the user that requested to join",
        "approved_by": "The administrator that approved the join request \u00bb of the user",
        "date": "When did the user join",
        "flags": "Flags, see TL conditional fields",
        "requested": "Whether this user currently has a pending join request \u00bb",
        "user_id": "The user",
        "via_chatlist": "The participant joined by importing a chat folder deep link \u00bb."
      }
    },
    "ChatInvitePeek": {
      "desc": "A chat invitation that also allows peeking into the group to read messages without joining it.",
      "params": {
        "chat": "Chat information",
        "expires": "Read-only anonymous access to this group will be revoked at this date"
      }
    },
    "ChatInvitePublicJoinRequests": {
      "desc": "Used in updates and in the channel log to indicate when a user is requesting to join or has joined a discussion group",
      "params": {}
    },
    "ChatOnlines": {
      "desc": "Number of online users in a chat",
      "params": {
        "onlines": "Number of online users"
      }
    },
    "ChatParticipant": {
      "desc": "Group member.",
      "params": {
        "date": "Date added to the group",
        "inviter_id": "ID of the user that added the member to the group",
        "user_id": "Member user ID"
      }
    },
    "ChatParticipantAdmin": {
      "desc": "Chat admin",
      "params": {
        "date": "Date when the user was added",
        "inviter_id": "ID of the user that added the member to the group",
        "user_id": "ID of a group member that is admin"
      }
    },
    "ChatParticipantCreator": {
      "desc": "Represents the creator of the group",
      "params": {
        "user_id": "ID of the user that created the group"
      }
    },
    "ChatParticipants": {
      "desc": "Group members.",
      "params": {
        "chat_id": "Group identifier",
        "participants": "List of group members",
        "version": "Group version number"
      }
    },
    "ChatParticipantsForbidden": {
      "desc": "Info on members is unavailable",
      "params": {
        "chat_id": "Group ID",
        "flags": "Flags, see TL conditional fields",
        "self_participant": "Info about the group membership of the current user"
      }
    },
    "ChatPhoto": {
      "desc": "Group profile photo.",
      "params": {
        "dc_id": "DC where this photo is stored",
        "flags": "Flags, see TL conditional fields",
        "has_video": "Whether the user has an animated profile picture",
        "photo_id": "Photo ID",
        "stripped_thumb": "Stripped thumbnail"
      }
    },
    "ChatPhotoEmpty": {
      "desc": "Group photo is not set.",
      "params": {}
    },
    "ChatReactionsAll": {
      "desc": "All reactions or all non-custom reactions are allowed",
      "params": {
        "allow_custom": "Whether to allow custom reactions",
        "flags": "Flags, see TL conditional fields"
      }
    },
    "ChatReactionsNone": {
      "desc": "No reactions are allowed",
      "params": {}
    },
    "ChatReactionsSome": {
      "desc": "Some reactions are allowed",
      "params": {
        "reactions": "Allowed set of reactions: the reactions_in_chat_max configuration field indicates the maximum number of reactions that can be specified in this field."
      }
    },
    "CodeSettings": {
      "desc": "Settings used by telegram servers for sending the confirm code.",
      "params": {
        "allow_app_hash": "If a token that will be included in eventually sent SMSs is required: required in newer versions of android, to use the android SMS receiver APIs",
        "allow_firebase": "Whether Firebase auth is supported",
        "allow_flashcall": "Whether to allow phone verification via phone calls.",
        "allow_missed_call": "Whether this device supports receiving the code using the auth.codeTypeMissedCall method",
        "app_sandbox": "Used only by official iOS apps for firebase auth: whether a sandbox-certificate will be used during transmission of the push notification.",
        "current_number": "Pass true if the phone number is used on the current device. Ignored if allow_flashcall is not set.",
        "flags": "Flags, see TL conditional fields",
        "logout_tokens": "Previously stored future auth tokens, see the documentation for more info \u00bb",
        "token": "Used only by official iOS apps for Firebase auth: device token for apple push.",
        "unknown_number": ""
      }
    },
    "Config": {
      "desc": "Current configuration",
      "params": {
        "autologin_token": "Autologin token, click here for more info on URL authorization \u00bb.",
        "autoupdate_url_prefix": "URL to use to auto-update the current app",
        "base_lang_pack_version": "Basic language pack version",
        "blocked_mode": "Indicates that telegram is probably censored by governments/ISPs in the current region",
        "call_connect_timeout_ms": "VoIP connection timeout: if the instance of libtgvoip on the other side of the call doesn't connect to our instance of libtgvoip within the specified time (in milliseconds), the call must be aborted",
        "call_packet_timeout_ms": "If during a VoIP call a packet isn't received for the specified period of time, the call must be aborted",
        "call_receive_timeout_ms": "Maximum allowed outgoing ring time in VoIP calls: if the user we're calling doesn't reply within the specified time (in milliseconds), we should hang up the call",
        "call_ring_timeout_ms": "Maximum allowed incoming ring time in VoIP calls: if the current user doesn't reply within the specified time (in milliseconds), the call will be automatically refused",
        "caption_length_max": "Maximum length of caption (length in utf8 codepoints)",
        "channels_read_media_period": "Indicates that round videos (video notes) and voice messages sent in channels and older than the specified period must be marked as read",
        "chat_size_max": "Maximum member count for normal groups",
        "date": "Current date at the server",
        "dc_options": "DC IP list",
        "dc_txt_domain_name": "Domain name for fetching encrypted DC list from DNS TXT record",
        "default_p2p_contacts": "Whether the client should use P2P by default for phone calls with contacts",
        "edit_time_limit": "Only messages with age smaller than the one specified can be edited",
        "expires": "Expiration date of this config: when it expires it'll have to be refetched using help.getConfig",
        "flags": "Flags, see TL conditional fields",
        "force_try_ipv6": "Whether to forcefully connect using IPv6 dcOptions, even if the client knows that IPv4 is available.",
        "forwarded_count_max": "Maximum number of messages that can be forwarded at once using messages.forwardMessages.",
        "gif_search_username": "Username of the bot to use to search for GIFs",
        "img_search_username": "Username of the bot to use for image search",
        "lang_pack_version": "Language pack version",
        "me_url_prefix": "The domain to use to parse deep links \u00bb.",
        "megagroup_size_max": "Maximum member count for supergroups",
        "message_length_max": "Maximum length of messages (length in utf8 codepoints)",
        "notify_cloud_delay_ms": "If we are offline, but online from some other client then delay sending the offline notification for notify_cloud_delay_ms milliseconds.",
        "notify_default_delay_ms": "If some other client is online, then delay notification for notification_default_delay_ms milliseconds",
        "offline_blur_timeout_ms": "Delay before offline status needs to be sent to the server",
        "offline_idle_timeout_ms": "Time without any user activity after which it should be treated offline",
        "online_cloud_timeout_ms": "If we are offline, but were online from some other client in last online_cloud_timeout_ms milliseconds after we had gone offline, then delay offline notification for notify_cloud_delay_ms milliseconds.",
        "online_update_period_ms": "The client should update its online status every N milliseconds",
        "preload_featured_stickers": "Whether the client should preload featured stickers",
        "push_chat_limit": "Not for client use",
        "push_chat_period_ms": "Not for client use",
        "rating_e_decay": "Exponential decay rate for computing top peer rating",
        "reactions_default": "Default message reaction",
        "revoke_pm_inbox": "Whether incoming private messages can be deleted for both participants",
        "revoke_pm_time_limit": "Only private messages with age smaller than the specified can be deleted",
        "revoke_time_limit": "Only channel/supergroup messages with age smaller than the specified can be deleted",
        "static_maps_provider": "ID of the map provider to use for venues",
        "stickers_recent_limit": "Maximum number of recent stickers",
        "suggested_lang_code": "Suggested language code",
        "test_mode": "Whether we're connected to the test DCs",
        "this_dc": "ID of the DC that returned the reply",
        "tmp_sessions": "Temporary passport sessions",
        "venue_search_username": "Username of the bot to use to search for venues",
        "webfile_dc_id": "DC ID to use to download webfiles"
      }
    },
    "ConnectedBot": {
      "desc": "{schema}",
      "params": {
        "bot_id": "",
        "can_reply": "",
        "flags": "Flags, see TL conditional fields",
        "recipients": ""
      }
    },
    "Contact": {
      "desc": "A contact of the current user that is registered in the system.",
      "params": {
        "mutual": "Current user is in the user's contact list",
        "user_id": "User identifier"
      }
    },
    "ContactBirthday": {
      "desc": "{schema}",
      "params": {
        "birthday": "",
        "contact_id": ""
      }
    },
    "ContactStatus": {
      "desc": "Contact status: online / offline.",
      "params": {
        "status": "Online status",
        "user_id": "User identifier"
      }
    },
    "DataJSON": {
      "desc": "Represents a json-encoded object",
      "params": {
        "data": "JSON-encoded object"
      }
    },
    "DcOption": {
      "desc": "Data center",
      "params": {
        "cdn": "Whether this is a CDN DC.",
        "flags": "Flags, see TL conditional fields",
        "id": "DC ID",
        "ip_address": "IP address of DC",
        "ipv6": "Whether the specified IP is an IPv6 address",
        "media_only": "Whether this DC should only be used to download or upload files",
        "port": "Port",
        "secret": "If the tcpo_only flag is set, specifies the secret to use when connecting using transport obfuscation",
        "static": "If set, this IP should be used when connecting through a proxy",
        "tcpo_only": "Whether this DC only supports connection with transport obfuscation",
        "this_port_only": "If set, clients must connect using only the specified port, without trying any other port."
      }
    },
    "DefaultHistoryTTL": {
      "desc": "Contains info about the default value of the Time-To-Live setting, applied to all new chats.",
      "params": {
        "period": "Time-To-Live setting applied to all new chats."
      }
    },
    "Dialog": {
      "desc": "Chat",
      "params": {
        "draft": "Message draft",
        "flags": "Flags, see TL conditional fields",
        "folder_id": "Peer folder ID, for more info click here",
        "notify_settings": "Notification settings",
        "peer": "The chat",
        "pinned": "Is the dialog pinned",
        "pts": "PTS",
        "read_inbox_max_id": "Position up to which all incoming messages are read.",
        "read_outbox_max_id": "Position up to which all outgoing messages are read.",
        "top_message": "The latest message ID",
        "ttl_period": "Time-to-live of all messages sent in this dialog",
        "unread_count": "Number of unread messages",
        "unread_mark": "Whether the chat was manually marked as unread",
        "unread_mentions_count": "Number of unread mentions",
        "unread_reactions_count": "Number of unread reactions to messages you sent",
        "view_forum_as_messages": "Users may also choose to display messages from all topics of a forum as if they were sent to a normal group, using a \"View as messages\" setting in the local client.  This setting only affects the current account, and is synced to other logged in sessions using the channels.toggleViewForumAsMessages method; invoking this method will update the value of this flag."
      }
    },
    "DialogFilter": {
      "desc": "Dialog filter AKA folder",
      "params": {
        "bots": "Whether to include all bots in this folder",
        "broadcasts": "Whether to include all channels in this folder",
        "color": "",
        "contacts": "Whether to include all contacts in this folder",
        "emoticon": "Emoji to use as icon for the folder.",
        "exclude_archived": "Whether to exclude archived chats from this folder",
        "exclude_muted": "Whether to exclude muted chats from this folder",
        "exclude_peers": "Exclude the following chats from this folder",
        "exclude_read": "Whether to exclude read chats from this folder",
        "flags": "Flags, see TL conditional fields",
        "groups": "Whether to include all groups in this folder",
        "id": "Folder ID",
        "include_peers": "Include the following chats in this folder",
        "non_contacts": "Whether to include all non-contacts in this folder",
        "pinned_peers": "Pinned chats, folders can have unlimited pinned chats",
        "title": "Folder name (max 12 UTF-8 chars)"
      }
    },
    "DialogFilterChatlist": {
      "desc": "A folder imported using a chat folder deep link \u00bb.",
      "params": {
        "color": "",
        "emoticon": "Emoji to use as icon for the folder.",
        "flags": "Flags, see TL conditional fields",
        "has_my_invites": "Whether the current user has created some chat folder deep links \u00bb to share the folder as well.",
        "id": "ID of the folder",
        "include_peers": "Chats to include in the folder",
        "pinned_peers": "Pinned chats, folders can have unlimited pinned chats",
        "title": "Name of the folder (max 12 UTF-8 chars)"
      }
    },
    "DialogFilterDefault": {
      "desc": "Used only when reordering folders to indicate the default (all chats) folder.",
      "params": {}
    },
    "DialogFilterSuggested": {
      "desc": "Suggested folders",
      "params": {
        "description": "Folder description",
        "filter": "Folder info"
      }
    },
    "DialogFolder": {
      "desc": "Dialog in folder",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "folder": "The folder",
        "peer": "Peer in folder",
        "pinned": "Is this folder pinned",
        "top_message": "Latest message ID of dialog",
        "unread_muted_messages_count": "Number of unread messages from muted peers in folder",
        "unread_muted_peers_count": "Number of unread muted peers in folder",
        "unread_unmuted_messages_count": "Number of unread messages from unmuted peers in folder",
        "unread_unmuted_peers_count": "Number of unread unmuted peers in folder"
      }
    },
    "DialogPeer": {
      "desc": "Peer",
      "params": {
        "peer": "Peer"
      }
    },
    "DialogPeerFolder": {
      "desc": "Peer folder",
      "params": {
        "folder_id": "Peer folder ID, for more info click here"
      }
    },
    "Document": {
      "desc": "Document",
      "params": {
        "access_hash": "Check sum, dependent on document ID",
        "attributes": "Attributes",
        "date": "Creation date",
        "dc_id": "DC ID",
        "file_reference": "File reference",
        "flags": "Flags, see TL conditional fields",
        "id": "Document ID",
        "mime_type": "MIME type",
        "size": "Size",
        "thumbs": "Thumbnails",
        "video_thumbs": "Video thumbnails"
      }
    },
    "DocumentAttributeAnimated": {
      "desc": "Defines an animated GIF",
      "params": {}
    },
    "DocumentAttributeAudio": {
      "desc": "Represents an audio file",
      "params": {
        "duration": "Duration in seconds",
        "flags": "Flags, see TL conditional fields",
        "performer": "Performer",
        "title": "Name of song",
        "voice": "Whether this is a voice message",
        "waveform": "Waveform: consists in a series of bitpacked 5-bit values. Example implementation: android."
      }
    },
    "DocumentAttributeCustomEmoji": {
      "desc": "Info about a custom emoji",
      "params": {
        "alt": "The actual emoji",
        "flags": "Flags, see TL conditional fields",
        "free": "Whether this custom emoji can be sent by non-Premium users",
        "stickerset": "The emoji stickerset to which this emoji belongs.",
        "text_color": "Whether the color of this TGS custom emoji should be changed to the text color when used in messages, the accent color if used as emoji status, white on chat photos, or another appropriate color based on context."
      }
    },
    "DocumentAttributeFilename": {
      "desc": "A simple document with a file name",
      "params": {
        "file_name": "The file name"
      }
    },
    "DocumentAttributeHasStickers": {
      "desc": "Whether the current document has stickers attached",
      "params": {}
    },
    "DocumentAttributeImageSize": {
      "desc": "Defines the width and height of an image uploaded as document",
      "params": {
        "h": "Height of image",
        "w": "Width of image"
      }
    },
    "DocumentAttributeSticker": {
      "desc": "Defines a sticker",
      "params": {
        "alt": "Alternative emoji representation of sticker",
        "flags": "Flags, see TL conditional fields",
        "mask": "Whether this is a mask sticker",
        "mask_coords": "Mask coordinates (if this is a mask sticker, attached to a photo)",
        "stickerset": "Associated stickerset"
      }
    },
    "DocumentAttributeVideo": {
      "desc": "Defines a video",
      "params": {
        "duration": "Duration in seconds",
        "flags": "Flags, see TL conditional fields",
        "h": "Video height",
        "nosound": "Whether the specified document is a video file with no audio tracks (a GIF animation (even as MPEG4), for example)",
        "preload_prefix_size": "Number of bytes to preload when preloading videos (particularly video stories).",
        "round_message": "Whether this is a round video",
        "supports_streaming": "Whether the video supports streaming",
        "w": "Video width"
      }
    },
    "DocumentEmpty": {
      "desc": "Empty constructor, document doesn't exist.",
      "params": {
        "id": "Document ID or 0"
      }
    },
    "DraftMessage": {
      "desc": "Represents a message draft.",
      "params": {
        "date": "Date of last update of the draft.",
        "entities": "Message entities for styled text.",
        "flags": "Flags, see TL conditional fields",
        "invert_media": "If set, any eventual webpage preview will be shown on top of the message instead of at the bottom.",
        "media": "Media.",
        "message": "The draft",
        "no_webpage": "Whether no webpage preview will be generated",
        "reply_to": "If set, indicates that the message should be sent in reply to the specified message or story."
      }
    },
    "DraftMessageEmpty": {
      "desc": "Empty draft",
      "params": {
        "date": "When was the draft last updated",
        "flags": "Flags, see TL conditional fields"
      }
    },
    "EmailVerificationApple": {
      "desc": "Apple ID email verification token",
      "params": {
        "token": "Token"
      }
    },
    "EmailVerificationCode": {
      "desc": "Email verification code",
      "params": {
        "code": "Received verification code"
      }
    },
    "EmailVerificationGoogle": {
      "desc": "Google ID email verification token",
      "params": {
        "token": "Token"
      }
    },
    "EmailVerifyPurposeLoginChange": {
      "desc": "Email verification purpose: change login email",
      "params": {}
    },
    "EmailVerifyPurposeLoginSetup": {
      "desc": "Email verification purpose: setup login email",
      "params": {
        "phone_code_hash": "Phone code hash as specified by the documentation",
        "phone_number": "Phone number"
      }
    },
    "EmailVerifyPurposePassport": {
      "desc": "Verify an email for use in telegram passport",
      "params": {}
    },
    "EmojiGroup": {
      "desc": "Represents an emoji category.",
      "params": {
        "emoticons": "A list of UTF-8 emojis, matching the category.",
        "icon_emoji_id": "A single custom emoji used as preview for the category.",
        "title": "Category name, i.e. \"Animals\", \"Flags\", \"Faces\" and so on..."
      }
    },
    "EmojiGroupGreeting": {
      "desc": "{schema}",
      "params": {
        "emoticons": "",
        "icon_emoji_id": "",
        "title": ""
      }
    },
    "EmojiGroupPremium": {
      "desc": "{schema}",
      "params": {
        "icon_emoji_id": "",
        "title": ""
      }
    },
    "EmojiKeyword": {
      "desc": "Emoji keyword",
      "params": {
        "emoticons": "Emojis associated to keyword",
        "keyword": "Keyword"
      }
    },
    "EmojiKeywordDeleted": {
      "desc": "Deleted emoji keyword",
      "params": {
        "emoticons": "Emojis that were associated to keyword",
        "keyword": "Keyword"
      }
    },
    "EmojiKeywordsDifference": {
      "desc": "Changes to emoji keywords",
      "params": {
        "from_version": "Previous emoji keyword list version",
        "keywords": "Emojis associated to keywords",
        "lang_code": "Language code for keywords",
        "version": "Current version of emoji keyword list"
      }
    },
    "EmojiLanguage": {
      "desc": "Emoji language",
      "params": {
        "lang_code": "Language code"
      }
    },
    "EmojiList": {
      "desc": "Represents a list of custom emojis.",
      "params": {
        "document_id": "Custom emoji IDs",
        "hash": "Hash for pagination, for more info click here"
      }
    },
    "EmojiListNotModified": {
      "desc": "The list of custom emojis hasn't changed.",
      "params": {}
    },
    "EmojiStatus": {
      "desc": "An emoji status",
      "params": {
        "document_id": "Custom emoji document ID"
      }
    },
    "EmojiStatusEmpty": {
      "desc": "No emoji status is set",
      "params": {}
    },
    "EmojiStatusUntil": {
      "desc": "An emoji status valid until the specified date",
      "params": {
        "document_id": "Custom emoji document ID",
        "until": "This status is valid until this date"
      }
    },
    "EmojiURL": {
      "desc": "An HTTP URL which can be used to automatically log in into translation platform and suggest new emoji replacements. The URL will be valid for 30 seconds after generation",
      "params": {
        "url": "An HTTP URL which can be used to automatically log in into translation platform and suggest new emoji replacements. The URL will be valid for 30 seconds after generation"
      }
    },
    "EncryptedChat": {
      "desc": "Encrypted chat",
      "params": {
        "access_hash": "Check sum dependent on the user ID",
        "admin_id": "Chat creator ID",
        "date": "Date chat was created",
        "g_a_or_b": "B = g ^ b mod p, if the currently authorized user is the chat's creator,or A = g ^ a mod p otherwiseSee Wikipedia for more info",
        "id": "Chat ID",
        "key_fingerprint": "64-bit fingerprint of received key",
        "participant_id": "ID of the second chat participant"
      }
    },
    "EncryptedChatDiscarded": {
      "desc": "Discarded or deleted chat.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "history_deleted": "Whether both users of this secret chat should also remove all of its messages",
        "id": "Chat ID"
      }
    },
    "EncryptedChatEmpty": {
      "desc": "Empty constructor.",
      "params": {
        "id": "Chat ID"
      }
    },
    "EncryptedChatRequested": {
      "desc": "Request to create an encrypted chat.",
      "params": {
        "access_hash": "Check sum depending on user ID",
        "admin_id": "Chat creator ID",
        "date": "Chat creation date",
        "flags": "Flags, see TL conditional fields",
        "folder_id": "Peer folder ID, for more info click here",
        "g_a": "A = g ^ a mod p, see Wikipedia",
        "id": "Chat ID",
        "participant_id": "ID of second chat participant"
      }
    },
    "EncryptedChatWaiting": {
      "desc": "Chat waiting for approval of second participant.",
      "params": {
        "access_hash": "Checking sum depending on user ID",
        "admin_id": "Chat creator ID",
        "date": "Date of chat creation",
        "id": "Chat ID",
        "participant_id": "ID of second chat participant"
      }
    },
    "EncryptedFile": {
      "desc": "Encrypted file.",
      "params": {
        "access_hash": "Checking sum depending on user ID",
        "dc_id": "Number of data center",
        "id": "File ID",
        "key_fingerprint": "32-bit fingerprint of key used for file encryption",
        "size": "File size in bytes"
      }
    },
    "EncryptedFileEmpty": {
      "desc": "Empty constructor, non-existing file.",
      "params": {}
    },
    "EncryptedMessage": {
      "desc": "Encrypted message.",
      "params": {
        "bytes": "TL-serialization of DecryptedMessage type, encrypted with the key created at chat initialization",
        "chat_id": "ID of encrypted chat",
        "date": "Date of sending",
        "file": "Attached encrypted file",
        "random_id": "Random message ID, assigned by the author of message"
      }
    },
    "EncryptedMessageService": {
      "desc": "Encrypted service message",
      "params": {
        "bytes": "TL-serialization of the DecryptedMessage type, encrypted with the key created at chat initialization",
        "chat_id": "ID of encrypted chat",
        "date": "Date of sending",
        "random_id": "Random message ID, assigned by the author of message"
      }
    },
    "ExportedChatlistInvite": {
      "desc": "Exported chat folder deep link \u00bb.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "peers": "Peers to import",
        "title": "Name of the link",
        "url": "The chat folder deep link \u00bb."
      }
    },
    "ExportedContactToken": {
      "desc": "Describes a temporary profile link.",
      "params": {
        "expires": "Its expiration date",
        "url": "The temporary profile link."
      }
    },
    "ExportedMessageLink": {
      "desc": "Link to a message in a supergroup/channel",
      "params": {
        "html": "Embed code",
        "link": "URL"
      }
    },
    "ExportedStoryLink": {
      "desc": "Represents a story deep link.",
      "params": {
        "link": "The story deep link."
      }
    },
    "FactCheck": {
      "desc": "{schema}",
      "params": {
        "country": "",
        "flags": "Flags, see TL conditional fields",
        "hash": "Hash for pagination, for more info click here",
        "need_check": "",
        "text": ""
      }
    },
    "FileHash": {
      "desc": "SHA256 Hash of an uploaded file, to be checked for validity after download",
      "params": {
        "hash": "SHA-256 Hash of file chunk, to be checked for validity after download",
        "limit": "Length",
        "offset": "Offset from where to start computing SHA-256 hash"
      }
    },
    "Folder": {
      "desc": "Folder",
      "params": {
        "autofill_new_broadcasts": "Automatically add new channels to this folder",
        "autofill_new_correspondents": "Automatically add new private chats to this folder",
        "autofill_public_groups": "Automatically add joined new public supergroups to this folder",
        "flags": "Flags, see TL conditional fields",
        "id": "Folder ID",
        "photo": "Folder picture",
        "title": "Folder title"
      }
    },
    "FolderPeer": {
      "desc": "Peer in a folder",
      "params": {
        "folder_id": "Peer folder ID, for more info click here",
        "peer": "Folder peer info"
      }
    },
    "ForumTopic": {
      "desc": "Represents a forum topic.",
      "params": {
        "closed": "Whether the topic is closed (no messages can be sent to it)",
        "date": "Topic creation date",
        "draft": "Message draft",
        "flags": "Flags, see TL conditional fields",
        "from_id": "ID of the peer that created the topic",
        "hidden": "Whether the topic is hidden (only valid for the \"General\" topic, id=1)",
        "icon_color": "If no custom emoji icon is specified, specifies the color of the fallback topic icon (RGB), one of 0x6FB9F0, 0xFFD67E, 0xCB86DB, 0x8EEE98, 0xFF93B2, or 0xFB6F5F.",
        "icon_emoji_id": "ID of the custom emoji used as topic icon.",
        "id": "Topic ID",
        "my": "Whether the topic was created by the current user",
        "notify_settings": "Notification settings",
        "pinned": "Whether the topic is pinned",
        "read_inbox_max_id": "Position up to which all incoming messages are read.",
        "read_outbox_max_id": "Position up to which all outgoing messages are read.",
        "short": "Whether this constructor is a reduced version of the full topic information. If set, only the my, closed, id, date, title, icon_color, icon_emoji_id and from_id parameters will contain valid information. Reduced info is usually only returned in topic-related admin log events \u00bb and in the messages.channelMessages constructor: if needed, full information can be fetched using channels.getForumTopicsByID.",
        "title": "Topic title",
        "top_message": "ID of the last message that was sent to this topic",
        "unread_count": "Number of unread messages",
        "unread_mentions_count": "Number of unread mentions",
        "unread_reactions_count": "Number of unread reactions to messages you sent"
      }
    },
    "ForumTopicDeleted": {
      "desc": "Represents a deleted forum topic.",
      "params": {
        "id": "The ID of the deleted forum topic."
      }
    },
    "Game": {
      "desc": "Indicates an already sent game",
      "params": {
        "access_hash": "Access hash of the game",
        "description": "Game description",
        "document": "Optional attached document",
        "flags": "Flags, see TL conditional fields",
        "id": "ID of the game",
        "photo": "Game preview",
        "short_name": "Short name for the game",
        "title": "Title of the game"
      }
    },
    "GeoPoint": {
      "desc": "GeoPoint.",
      "params": {
        "access_hash": "Access hash",
        "accuracy_radius": "The estimated horizontal accuracy of the location, in meters; as defined by the sender.",
        "flags": "Flags, see TL conditional fields",
        "lat": "Latitude",
        "long": "Longitude"
      }
    },
    "GeoPointEmpty": {
      "desc": "Empty constructor.",
      "params": {}
    },
    "GlobalPrivacySettings": {
      "desc": "Global privacy settings",
      "params": {
        "archive_and_mute_new_noncontact_peers": "Whether to archive and mute new chats from non-contacts",
        "flags": "Flags, see TL conditional fields",
        "hide_read_marks": "",
        "keep_archived_folders": "Whether unmuted chats that are always included or pinned in a folder, will be kept in the Archive chat list when they get a new message. Ignored if keep_archived_unmuted is set.",
        "keep_archived_unmuted": "Whether unmuted chats will be kept in the Archive chat list when they get a new message.",
        "new_noncontact_peers_require_premium": ""
      }
    },
    "GroupCall": {
      "desc": "Info about a group call or livestream",
      "params": {
        "access_hash": "Group call access hash",
        "can_change_join_muted": "Whether the current user can change the value of the join_muted flag using phone.toggleGroupCallSettings",
        "can_start_video": "Whether you can start streaming video into the call",
        "flags": "Flags, see TL conditional fields",
        "id": "Group call ID",
        "join_date_asc": "Specifies the ordering to use when locally sorting by date and displaying in the UI group call participants.",
        "join_muted": "Whether the user should be muted upon joining the call",
        "listeners_hidden": "Whether the listeners list is hidden and cannot be fetched using phone.getGroupParticipants. The phone.groupParticipants.count and groupCall.participants_count counters will still include listeners.",
        "participants_count": "Participant count",
        "record_start_date": "When was the recording started",
        "record_video_active": "Whether the group call is currently being recorded",
        "rtmp_stream": "Whether RTMP streams are allowed",
        "schedule_date": "When is the call scheduled to start",
        "schedule_start_subscribed": "Whether we subscribed to the scheduled call",
        "stream_dc_id": "DC ID to be used for livestream chunks",
        "title": "Group call title",
        "unmuted_video_count": "Number of people currently streaming video into the call",
        "unmuted_video_limit": "Maximum number of people allowed to stream video into the call",
        "version": "Version"
      }
    },
    "GroupCallDiscarded": {
      "desc": "An ended group call",
      "params": {
        "access_hash": "Group call access hash",
        "duration": "Group call duration",
        "id": "Group call ID"
      }
    },
    "GroupCallParticipant": {
      "desc": "Info about a group call participant",
      "params": {
        "about": "Info about this participant",
        "active_date": "When was this participant last active in the group call",
        "can_self_unmute": "Whether the participant can unmute themselves",
        "date": "When did this participant join the group call",
        "flags": "Flags, see TL conditional fields",
        "just_joined": "Whether the participant has just joined",
        "left": "Whether the participant has left",
        "min": "If not set, the volume and muted_by_you fields can be safely used to overwrite locally cached information; otherwise, volume will contain valid information only if volume_by_admin is set both in the cache and in the received constructor.",
        "muted": "Whether the participant is muted",
        "muted_by_you": "Whether this participant was muted by the current user",
        "peer": "Peer information",
        "presentation": "Info about the screen sharing stream the participant is currently broadcasting",
        "raise_hand_rating": "Specifies the UI visualization order of peers with raised hands: peers with a higher rating should be showed first in the list.",
        "self": "Whether this participant is the current user",
        "source": "Source ID",
        "versioned": "If set, and updateGroupCallParticipants.version < locally stored call.version, info about this participant should be ignored. If (...), and updateGroupCallParticipants.version > call.version+1, the participant list should be refetched using phone.getGroupParticipants.",
        "video": "Info about the video stream the participant is currently broadcasting",
        "video_joined": "Whether this participant is currently broadcasting video",
        "volume": "Volume, if not set the volume is set to 100%.",
        "volume_by_admin": "Whether our volume can only changed by an admin"
      }
    },
    "GroupCallParticipantVideo": {
      "desc": "Info about a video stream",
      "params": {
        "audio_source": "Audio source ID",
        "endpoint": "Endpoint",
        "flags": "Flags, see TL conditional fields",
        "paused": "Whether the stream is currently paused",
        "source_groups": "Source groups"
      }
    },
    "GroupCallParticipantVideoSourceGroup": {
      "desc": "Describes a group of video synchronization source identifiers",
      "params": {
        "semantics": "SDP semantics",
        "sources": "Source IDs"
      }
    },
    "GroupCallStreamChannel": {
      "desc": "Info about an RTMP stream in a group call or livestream",
      "params": {
        "channel": "Channel ID",
        "last_timestamp_ms": "Last seen timestamp to easily start fetching livestream chunks using inputGroupCallStream",
        "scale": "Specifies the duration of the video segment to fetch in milliseconds, by bitshifting 1000 to the right scale times: duration_ms := 1000 >> scale."
      }
    },
    "HighScore": {
      "desc": "Game highscore",
      "params": {
        "pos": "Position in highscore list",
        "score": "Score",
        "user_id": "User ID"
      }
    },
    "ImportedContact": {
      "desc": "Successfully imported contact.",
      "params": {
        "client_id": "The contact's client identifier (passed to one of the InputContact constructors)",
        "user_id": "User identifier"
      }
    },
    "InlineBotSwitchPM": {
      "desc": "The bot requested the user to message them in private",
      "params": {
        "start_param": "The parameter for the /start parameter",
        "text": "Text for the button that switches the user to a private chat with the bot and sends the bot a start message with the parameter start_parameter (can be empty)"
      }
    },
    "InlineBotWebView": {
      "desc": "Specifies an inline mode mini app button, shown on top of the inline query results list.",
      "params": {
        "text": "Text of the button",
        "url": "Webapp URL"
      }
    },
    "InlineQueryPeerTypeBotPM": {
      "desc": "Peer type: private chat with a bot.",
      "params": {}
    },
    "InlineQueryPeerTypeBroadcast": {
      "desc": "Peer type: channel",
      "params": {}
    },
    "InlineQueryPeerTypeChat": {
      "desc": "Peer type: chat",
      "params": {}
    },
    "InlineQueryPeerTypeMegagroup": {
      "desc": "Peer type: supergroup",
      "params": {}
    },
    "InlineQueryPeerTypePM": {
      "desc": "Peer type: private chat",
      "params": {}
    },
    "InlineQueryPeerTypeSameBotPM": {
      "desc": "Peer type: private chat with the bot itself",
      "params": {}
    },
    "InputAppEvent": {
      "desc": "Event that occurred in the application.",
      "params": {
        "data": "Details of the event",
        "peer": "Arbitrary numeric value for more convenient selection of certain event types, or events referring to a certain object",
        "time": "Client's exact timestamp for the event",
        "type": "Type of event"
      }
    },
    "InputBotAppID": {
      "desc": "Used to fetch information about a direct link Mini App by its ID",
      "params": {
        "access_hash": "Access hash, obtained from the botApp constructor.",
        "id": "direct link Mini App ID."
      }
    },
    "InputBotAppShortName": {
      "desc": "Used to fetch information about a direct link Mini App by its short name",
      "params": {
        "bot_id": "ID of the bot that owns the bot mini app",
        "short_name": "Short name, obtained from a Direct Mini App deep link"
      }
    },
    "InputBotInlineMessageGame": {
      "desc": "A game",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "reply_markup": "Inline keyboard"
      }
    },
    "InputBotInlineMessageID": {
      "desc": "Represents a sent inline message from the perspective of a bot (legacy constructor)",
      "params": {
        "access_hash": "Access hash of message",
        "dc_id": "DC ID to use when working with this inline message",
        "id": "ID of message, contains both the (32-bit, legacy) owner ID and the message ID, used only for Bot API backwards compatibility with 32-bit user ID."
      }
    },
    "InputBotInlineMessageID64": {
      "desc": "Represents a sent inline message from the perspective of a bot",
      "params": {
        "access_hash": "Access hash of message",
        "dc_id": "DC ID to use when working with this inline message",
        "id": "ID of message",
        "owner_id": "ID of the owner of this message"
      }
    },
    "InputBotInlineMessageMediaAuto": {
      "desc": "A media",
      "params": {
        "entities": "Message entities for styled text",
        "flags": "Flags, see TL conditional fields",
        "invert_media": "If set, any eventual webpage preview will be shown on top of the message instead of at the bottom.",
        "message": "Caption",
        "reply_markup": "Inline keyboard"
      }
    },
    "InputBotInlineMessageMediaContact": {
      "desc": "A contact",
      "params": {
        "first_name": "First name",
        "flags": "Flags, see TL conditional fields",
        "last_name": "Last name",
        "phone_number": "Phone number",
        "reply_markup": "Inline keyboard",
        "vcard": "VCard info"
      }
    },
    "InputBotInlineMessageMediaGeo": {
      "desc": "Geolocation",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "geo_point": "Geolocation",
        "heading": "For live locations, a direction in which the location moves, in degrees; 1-360",
        "period": "Validity period",
        "proximity_notification_radius": "For live locations, a maximum distance to another chat member for proximity alerts, in meters (0-100000)",
        "reply_markup": "Reply markup for bot/inline keyboards"
      }
    },
    "InputBotInlineMessageMediaInvoice": {
      "desc": "An invoice",
      "params": {
        "description": "Product description, 1-255 characters",
        "flags": "Flags, see TL conditional fields",
        "invoice": "The invoice",
        "payload": "Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.",
        "photo": "Invoice photo",
        "provider": "Payments provider token, obtained via Botfather",
        "provider_data": "A JSON-serialized object for data about the invoice, which will be shared with the payment provider. A detailed description of the required fields should be provided by the payment provider.",
        "reply_markup": "Inline keyboard",
        "title": "Product name, 1-32 characters"
      }
    },
    "InputBotInlineMessageMediaVenue": {
      "desc": "Venue",
      "params": {
        "address": "Address",
        "flags": "Flags, see TL conditional fields",
        "geo_point": "Geolocation",
        "provider": "Venue provider: currently only \"foursquare\" and \"gplaces\" (Google Places) need to be supported",
        "reply_markup": "Inline keyboard",
        "title": "Venue name",
        "venue_id": "Venue ID in the provider's database",
        "venue_type": "Venue type in the provider's database"
      }
    },
    "InputBotInlineMessageMediaWebPage": {
      "desc": "Specifies options that will be used to generate the link preview for the message, or even a standalone link preview without an attached message.",
      "params": {
        "entities": "Message entities for styled text",
        "flags": "Flags, see TL conditional fields",
        "force_large_media": "If set, specifies that a large media preview should be used.",
        "force_small_media": "If set, specifies that a small media preview should be used.",
        "invert_media": "If set, any eventual webpage preview will be shown on top of the message instead of at the bottom.",
        "message": "The message, can be empty.",
        "optional": "If not set, a WEBPAGE_NOT_FOUND RPC error will be emitted if a webpage preview cannot be generated for the specified url; otherwise, no error will be emitted (unless the provided message is also empty, in which case a MESSAGE_EMPTY will be emitted, instead).",
        "reply_markup": "Inline keyboard",
        "url": "The URL to use for the link preview."
      }
    },
    "InputBotInlineMessageText": {
      "desc": "Simple text message",
      "params": {
        "entities": "Message entities for styled text",
        "flags": "Flags, see TL conditional fields",
        "invert_media": "If set, any eventual webpage preview will be shown on top of the message instead of at the bottom.",
        "message": "Message",
        "no_webpage": "Disable webpage preview",
        "reply_markup": "Inline keyboard"
      }
    },
    "InputBotInlineResult": {
      "desc": "An inline bot result",
      "params": {
        "content": "Result contents",
        "description": "Result description",
        "flags": "Flags, see TL conditional fields",
        "id": "ID of result",
        "send_message": "Message to send when the result is selected",
        "thumb": "Thumbnail for result",
        "title": "Result title",
        "type": "Result type (see bot API docs)",
        "url": "URL of result"
      }
    },
    "InputBotInlineResultDocument": {
      "desc": "Document (media of any type except for photos)",
      "params": {
        "description": "Result description",
        "document": "Document to send",
        "flags": "Flags, see TL conditional fields",
        "id": "Result ID",
        "send_message": "Message to send when the result is selected",
        "title": "Result title",
        "type": "Result type (see bot API docs)"
      }
    },
    "InputBotInlineResultGame": {
      "desc": "Game",
      "params": {
        "id": "Result ID",
        "send_message": "Message to send when the result is selected",
        "short_name": "Game short name"
      }
    },
    "InputBotInlineResultPhoto": {
      "desc": "Photo",
      "params": {
        "id": "Result ID",
        "photo": "Photo to send",
        "send_message": "Message to send when the result is selected",
        "type": "Result type (see bot API docs)"
      }
    },
    "InputBusinessAwayMessage": {
      "desc": "{schema}",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "offline_only": "",
        "recipients": "",
        "schedule": "",
        "shortcut_id": ""
      }
    },
    "InputBusinessBotRecipients": {
      "desc": "{schema}",
      "params": {
        "contacts": "",
        "exclude_selected": "",
        "exclude_users": "",
        "existing_chats": "",
        "flags": "Flags, see TL conditional fields",
        "new_chats": "",
        "non_contacts": "",
        "users": ""
      }
    },
    "InputBusinessChatLink": {
      "desc": "{schema}",
      "params": {
        "entities": "Message entities for styled text",
        "flags": "Flags, see TL conditional fields",
        "message": "",
        "title": ""
      }
    },
    "InputBusinessGreetingMessage": {
      "desc": "{schema}",
      "params": {
        "no_activity_days": "",
        "recipients": "",
        "shortcut_id": ""
      }
    },
    "InputBusinessIntro": {
      "desc": "{schema}",
      "params": {
        "description": "",
        "flags": "Flags, see TL conditional fields",
        "sticker": "",
        "title": ""
      }
    },
    "InputBusinessRecipients": {
      "desc": "{schema}",
      "params": {
        "contacts": "",
        "exclude_selected": "",
        "existing_chats": "",
        "flags": "Flags, see TL conditional fields",
        "new_chats": "",
        "non_contacts": "",
        "users": ""
      }
    },
    "InputChannel": {
      "desc": "Represents a channel",
      "params": {
        "access_hash": "Access hash taken from the channel constructor",
        "channel_id": "Channel ID"
      }
    },
    "InputChannelEmpty": {
      "desc": "Represents the absence of a channel",
      "params": {}
    },
    "InputChannelFromMessage": {
      "desc": "Defines a min channel that was seen in a certain message of a certain chat.",
      "params": {
        "channel_id": "The channel ID",
        "msg_id": "The message ID in the chat where the channel was seen",
        "peer": "The chat where the channel was seen"
      }
    },
    "InputChatPhoto": {
      "desc": "Existing photo to be set as a chat profile photo.",
      "params": {
        "id": "Existing photo"
      }
    },
    "InputChatPhotoEmpty": {
      "desc": "Empty constructor, remove group photo.",
      "params": {}
    },
    "InputChatUploadedPhoto": {
      "desc": "New photo to be set as group profile photo.",
      "params": {
        "file": "File saved in parts using the method upload.saveFilePart",
        "flags": "Flags, see TL conditional fields",
        "video": "Square video for animated profile picture",
        "video_emoji_markup": "Animated sticker profile picture, must contain either a videoSizeEmojiMarkup or a videoSizeStickerMarkup constructor.",
        "video_start_ts": "Floating point UNIX timestamp in seconds, indicating the frame of the video/sticker that should be used as static preview; can only be used if video or video_emoji_markup is set."
      }
    },
    "InputChatlistDialogFilter": {
      "desc": "Folder ID",
      "params": {
        "filter_id": "Folder ID"
      }
    },
    "InputCheckPasswordEmpty": {
      "desc": "There is no password",
      "params": {}
    },
    "InputCheckPasswordSRP": {
      "desc": "Constructor for checking the validity of a 2FA SRP password (see SRP)",
      "params": {
        "A": "A parameter (see SRP)",
        "M1": "M1 parameter (see SRP)",
        "srp_id": "SRP ID"
      }
    },
    "InputClientProxy": {
      "desc": "Info about an MTProxy used to connect.",
      "params": {
        "address": "Proxy address",
        "port": "Proxy port"
      }
    },
    "InputCollectiblePhone": {
      "desc": "{schema}",
      "params": {
        "phone": ""
      }
    },
    "InputCollectibleUsername": {
      "desc": "{schema}",
      "params": {
        "username": ""
      }
    },
    "InputDialogPeer": {
      "desc": "A peer",
      "params": {
        "peer": "Peer"
      }
    },
    "InputDialogPeerFolder": {
      "desc": "All peers in a peer folder",
      "params": {
        "folder_id": "Peer folder ID, for more info click here"
      }
    },
    "InputDocument": {
      "desc": "Defines a document for subsequent interaction.",
      "params": {
        "access_hash": "access_hash parameter from the document constructor",
        "file_reference": "File reference",
        "id": "Document ID"
      }
    },
    "InputDocumentEmpty": {
      "desc": "Empty constructor.",
      "params": {}
    },
    "InputDocumentFileLocation": {
      "desc": "Document location (video, voice, audio, basically every type except photo)",
      "params": {
        "access_hash": "access_hash parameter from the document constructor",
        "file_reference": "File reference",
        "id": "Document ID",
        "thumb_size": "Thumbnail size to download the thumbnail"
      }
    },
    "InputEncryptedChat": {
      "desc": "Creates an encrypted chat.",
      "params": {
        "access_hash": "Checking sum from constructor encryptedChat, encryptedChatWaiting or encryptedChatRequested",
        "chat_id": "Chat ID"
      }
    },
    "InputEncryptedFile": {
      "desc": "Sets forwarded encrypted file for attachment.",
      "params": {
        "access_hash": "Checking sum, value of access_hash parameter from encryptedFile",
        "id": "File ID, value of id parameter from encryptedFile"
      }
    },
    "InputEncryptedFileBigUploaded": {
      "desc": "Assigns a new big encrypted file (over 10 MB in size), saved in parts using the method upload.saveBigFilePart.",
      "params": {
        "id": "Random file id, created by the client",
        "key_fingerprint": "32-bit imprint of the key used to encrypt the file",
        "parts": "Number of saved parts"
      }
    },
    "InputEncryptedFileEmpty": {
      "desc": "Empty constructor.",
      "params": {}
    },
    "InputEncryptedFileLocation": {
      "desc": "Location of encrypted secret chat file.",
      "params": {
        "access_hash": "Checksum, access_hash parameter value from encryptedFile",
        "id": "File ID, id parameter value from encryptedFile"
      }
    },
    "InputEncryptedFileUploaded": {
      "desc": "Sets new encrypted file saved by parts using upload.saveFilePart method.",
      "params": {
        "id": "Random file ID created by client",
        "key_fingerprint": "32-bit fingerprint of the key used to encrypt a file",
        "md5_checksum": "In case md5-HASH of the (already encrypted) file was transmitted, file content will be checked prior to use",
        "parts": "Number of saved parts"
      }
    },
    "InputFile": {
      "desc": "Defines a file saved in parts using the method upload.saveFilePart.",
      "params": {
        "id": "Random file identifier created by the client",
        "md5_checksum": "In case the file's md5-hash was passed, contents of the file will be checked prior to use",
        "name": "Full name of the file",
        "parts": "Number of parts saved"
      }
    },
    "InputFileBig": {
      "desc": "Assigns a big file (over 10 MB in size), saved in part using the method upload.saveBigFilePart.",
      "params": {
        "id": "Random file id, created by the client",
        "name": "Full file name",
        "parts": "Number of parts saved"
      }
    },
    "InputFileLocation": {
      "desc": "DEPRECATED location of a photo",
      "params": {
        "file_reference": "File reference",
        "local_id": "File identifier",
        "secret": "Check sum to access the file",
        "volume_id": "Server volume"
      }
    },
    "InputFolderPeer": {
      "desc": "Peer in a folder",
      "params": {
        "folder_id": "Peer folder ID, for more info click here",
        "peer": "Peer"
      }
    },
    "InputGameID": {
      "desc": "Indicates an already sent game",
      "params": {
        "access_hash": "access hash from Game constructor",
        "id": "game ID from Game constructor"
      }
    },
    "InputGameShortName": {
      "desc": "Game by short name",
      "params": {
        "bot_id": "The bot that provides the game",
        "short_name": "The game's short name, usually obtained from a game link \u00bb"
      }
    },
    "InputGeoPoint": {
      "desc": "Defines a GeoPoint by its coordinates.",
      "params": {
        "accuracy_radius": "The estimated horizontal accuracy of the location, in meters; as defined by the sender.",
        "flags": "Flags, see TL conditional fields",
        "lat": "Latitude",
        "long": "Longitude"
      }
    },
    "InputGeoPointEmpty": {
      "desc": "Empty GeoPoint constructor.",
      "params": {}
    },
    "InputGroupCall": {
      "desc": "Points to a specific group call",
      "params": {
        "access_hash": "Group call access hash",
        "id": "Group call ID"
      }
    },
    "InputGroupCallStream": {
      "desc": "Chunk of a livestream",
      "params": {
        "call": "Livestream info",
        "flags": "Flags, see TL conditional fields",
        "scale": "Specifies the duration of the video segment to fetch in milliseconds, by bitshifting 1000 to the right scale times: duration_ms := 1000 >> scale",
        "time_ms": "Timestamp in milliseconds",
        "video_channel": "Selected video channel",
        "video_quality": "Selected video quality (0 = lowest, 1 = medium, 2 = best)"
      }
    },
    "InputInvoiceMessage": {
      "desc": "An invoice contained in a messageMediaInvoice message.",
      "params": {
        "msg_id": "Message ID",
        "peer": "Chat where the invoice was sent"
      }
    },
    "InputInvoicePremiumGiftCode": {
      "desc": "Used if the user wishes to start a channel giveaway or send some giftcodes to members of a channel, in exchange for boosts.",
      "params": {
        "option": "Should be populated with one of the giveaway options returned by payments.getPremiumGiftCodeOptions, see the giveaways \u00bb documentation for more info.",
        "purpose": "Should be populated with inputStorePaymentPremiumGiveaway for giveaways and inputStorePaymentPremiumGiftCode for gifts."
      }
    },
    "InputInvoiceSlug": {
      "desc": "An invoice slug taken from an invoice deep link or from the premium_invoice_slug app config parameter \u00bb",
      "params": {
        "slug": "The invoice slug"
      }
    },
    "InputInvoiceStars": {
      "desc": "{schema}",
      "params": {
        "option": ""
      }
    },
    "InputKeyboardButtonRequestPeer": {
      "desc": "{schema}",
      "params": {
        "button_id": "",
        "flags": "Flags, see TL conditional fields",
        "max_quantity": "",
        "name_requested": "",
        "peer_type": "",
        "photo_requested": "",
        "text": "",
        "username_requested": ""
      }
    },
    "InputKeyboardButtonUrlAuth": {
      "desc": "Button to request a user to authorize via URL using Seamless Telegram Login.",
      "params": {
        "bot": "Username of a bot, which will be used for user authorization. See Setting up a bot for more details. If not specified, the current bot's username will be assumed. The url's domain must be the same as the domain linked with the bot. See Linking your domain to the bot for more details.",
        "flags": "Flags, see TL conditional fields",
        "fwd_text": "New text of the button in forwarded messages.",
        "request_write_access": "Set this flag to request the permission for your bot to send messages to the user.",
        "text": "Button text",
        "url": "An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in Receiving authorization data.NOTE: You must always check the hash of the received data to verify the authentication and the integrity of the data as described in Checking authorization."
      }
    },
    "InputKeyboardButtonUserProfile": {
      "desc": "Button that links directly to a user profile",
      "params": {
        "text": "Button text",
        "user_id": "User ID"
      }
    },
    "InputMediaAreaChannelPost": {
      "desc": "Represents a channel post",
      "params": {
        "channel": "The channel that posted the message",
        "coordinates": "The size and location of the media area corresponding to the location sticker on top of the story media.",
        "msg_id": "ID of the channel message"
      }
    },
    "InputMediaAreaVenue": {
      "desc": "Represents a location tag attached to a story, with additional venue information.",
      "params": {
        "coordinates": "The size and location of the media area corresponding to the location sticker on top of the story media.",
        "query_id": "The query_id from messages.botResults, see here \u00bb for more info.",
        "result_id": "The id of the chosen result, see here \u00bb for more info."
      }
    },
    "InputMediaContact": {
      "desc": "Phone book contact",
      "params": {
        "first_name": "Contact's first name",
        "last_name": "Contact's last name",
        "phone_number": "Phone number",
        "vcard": "Contact vcard"
      }
    },
    "InputMediaDice": {
      "desc": "Send a dice-based animated sticker",
      "params": {
        "emoticon": "The emoji, for now ,  and  are supported"
      }
    },
    "InputMediaDocument": {
      "desc": "Forwarded document",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "id": "The document to be forwarded.",
        "query": "Text query or emoji that was used by the user to find this sticker or GIF: used to improve search result relevance.",
        "spoiler": "Whether this media should be hidden behind a spoiler warning",
        "ttl_seconds": "Time to live of self-destructing document"
      }
    },
    "InputMediaDocumentExternal": {
      "desc": "Document that will be downloaded by the telegram servers",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "spoiler": "Whether this media should be hidden behind a spoiler warning",
        "ttl_seconds": "Self-destruct time to live of document",
        "url": "URL of the document"
      }
    },
    "InputMediaEmpty": {
      "desc": "Empty media content of a message.",
      "params": {}
    },
    "InputMediaGame": {
      "desc": "A game",
      "params": {
        "id": "The game to forward"
      }
    },
    "InputMediaGeoLive": {
      "desc": "Live geolocation",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "geo_point": "Current geolocation",
        "heading": "For live locations, a direction in which the location moves, in degrees; 1-360.",
        "period": "Validity period of the current location",
        "proximity_notification_radius": "For live locations, a maximum distance to another chat member for proximity alerts, in meters (0-100000)",
        "stopped": "Whether sending of the geolocation was stopped"
      }
    },
    "InputMediaGeoPoint": {
      "desc": "Map.",
      "params": {
        "geo_point": "GeoPoint"
      }
    },
    "InputMediaInvoice": {
      "desc": "Generated invoice of a bot payment",
      "params": {
        "description": "Product description, 1-255 characters",
        "extended_media": "Extended media",
        "flags": "Flags, see TL conditional fields",
        "invoice": "The actual invoice",
        "payload": "Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.",
        "photo": "URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.",
        "provider": "Payments provider token, obtained via Botfather",
        "provider_data": "JSON-encoded data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.",
        "start_param": "Unique bot deep links start parameter. If present, forwarded copies of the sent message will have a URL button with a deep link to the bot (instead of a Pay button), with the value used as the start parameter. If absent, forwarded copies of the sent message will have a Pay button, allowing multiple users to pay directly from the forwarded message, using the same invoice.",
        "title": "Product name, 1-32 characters"
      }
    },
    "InputMediaPhoto": {
      "desc": "Forwarded photo",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "id": "Photo to be forwarded",
        "spoiler": "Whether this media should be hidden behind a spoiler warning",
        "ttl_seconds": "Time to live in seconds of self-destructing photo"
      }
    },
    "InputMediaPhotoExternal": {
      "desc": "New photo that will be uploaded by the server using the specified URL",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "spoiler": "Whether this media should be hidden behind a spoiler warning",
        "ttl_seconds": "Self-destruct time to live of photo",
        "url": "URL of the photo"
      }
    },
    "InputMediaPoll": {
      "desc": "A poll",
      "params": {
        "correct_answers": "Correct answer IDs (for quiz polls)",
        "flags": "Flags, see TL conditional fields",
        "poll": "The poll to send",
        "solution": "Explanation of quiz solution",
        "solution_entities": "Message entities for styled text"
      }
    },
    "InputMediaStory": {
      "desc": "Forwarded story",
      "params": {
        "id": "Story ID",
        "peer": "Peer where the story was posted"
      }
    },
    "InputMediaUploadedDocument": {
      "desc": "New document",
      "params": {
        "attributes": "Attributes that specify the type of the document (video, audio, voice, sticker, etc.)",
        "file": "The uploaded file",
        "flags": "Flags, see TL conditional fields",
        "force_file": "Force the media file to be uploaded as document",
        "mime_type": "MIME type of document",
        "nosound_video": "Whether the specified document is a video file with no audio tracks (a GIF animation (even as MPEG4), for example)",
        "spoiler": "Whether this media should be hidden behind a spoiler warning",
        "stickers": "Attached stickers",
        "thumb": "Thumbnail of the document, uploaded as for the file",
        "ttl_seconds": "Time to live in seconds of self-destructing document"
      }
    },
    "InputMediaUploadedPhoto": {
      "desc": "Photo",
      "params": {
        "file": "The uploaded file",
        "flags": "Flags, see TL conditional fields",
        "spoiler": "Whether this media should be hidden behind a spoiler warning",
        "stickers": "Attached mask stickers",
        "ttl_seconds": "Time to live in seconds of self-destructing photo"
      }
    },
    "InputMediaVenue": {
      "desc": "Can be used to send a venue geolocation.",
      "params": {
        "address": "Physical address of the venue",
        "geo_point": "Geolocation",
        "provider": "Venue provider: currently only \"foursquare\" and \"gplaces\" (Google Places) need to be supported",
        "title": "Venue name",
        "venue_id": "Venue ID in the provider's database",
        "venue_type": "Venue type in the provider's database"
      }
    },
    "InputMediaWebPage": {
      "desc": "Specifies options that will be used to generate the link preview for the caption, or even a standalone link preview without an attached message.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "force_large_media": "If set, specifies that a large media preview should be used.",
        "force_small_media": "If set, specifies that a small media preview should be used.",
        "optional": "If not set, a WEBPAGE_NOT_FOUND RPC error will be emitted if a webpage preview cannot be generated for the specified url; otherwise, no error will be emitted (unless the provided message is also empty, in which case a MESSAGE_EMPTY will be emitted, instead).",
        "url": "The URL to use for the link preview."
      }
    },
    "InputMessageCallbackQuery": {
      "desc": "Used by bots for fetching information about the message that originated a callback query",
      "params": {
        "id": "Message ID",
        "query_id": "Callback query ID"
      }
    },
    "InputMessageEntityMentionName": {
      "desc": "Message entity that can be used to create a user user mention: received mentions use the messageEntityMentionName constructor, instead.",
      "params": {
        "length": "Length of message entity within message (in UTF-16 code units)",
        "offset": "Offset of message entity within message (in UTF-16 code units)",
        "user_id": "Identifier of the user that was mentioned"
      }
    },
    "InputMessageID": {
      "desc": "Message by ID",
      "params": {
        "id": "Message ID"
      }
    },
    "InputMessagePinned": {
      "desc": "Pinned message",
      "params": {}
    },
    "InputMessageReplyTo": {
      "desc": "Message to which the specified message replies to",
      "params": {
        "id": "ID of the message that replies to the message we need"
      }
    },
    "InputMessagesFilterChatPhotos": {
      "desc": "Return only chat photo changes",
      "params": {}
    },
    "InputMessagesFilterContacts": {
      "desc": "Return only messages containing contacts",
      "params": {}
    },
    "InputMessagesFilterDocument": {
      "desc": "Filter for messages containing documents.",
      "params": {}
    },
    "InputMessagesFilterEmpty": {
      "desc": "Filter is absent.",
      "params": {}
    },
    "InputMessagesFilterGeo": {
      "desc": "Return only messages containing geolocations",
      "params": {}
    },
    "InputMessagesFilterGif": {
      "desc": "Return only messages containing gifs",
      "params": {}
    },
    "InputMessagesFilterMusic": {
      "desc": "Return only messages containing audio files",
      "params": {}
    },
    "InputMessagesFilterMyMentions": {
      "desc": "Return only messages where the current user was mentioned.",
      "params": {}
    },
    "InputMessagesFilterPhoneCalls": {
      "desc": "Return only phone calls",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "missed": "Return only missed phone calls"
      }
    },
    "InputMessagesFilterPhotoVideo": {
      "desc": "Filter for messages containing photos or videos.",
      "params": {}
    },
    "InputMessagesFilterPhotos": {
      "desc": "Filter for messages containing photos.",
      "params": {}
    },
    "InputMessagesFilterPinned": {
      "desc": "Fetch only pinned messages",
      "params": {}
    },
    "InputMessagesFilterRoundVideo": {
      "desc": "Return only round videos",
      "params": {}
    },
    "InputMessagesFilterRoundVoice": {
      "desc": "Return only round videos and voice notes",
      "params": {}
    },
    "InputMessagesFilterUrl": {
      "desc": "Return only messages containing URLs",
      "params": {}
    },
    "InputMessagesFilterVideo": {
      "desc": "Filter for messages containing videos.",
      "params": {}
    },
    "InputMessagesFilterVoice": {
      "desc": "Return only messages containing voice notes",
      "params": {}
    },
    "InputNotifyBroadcasts": {
      "desc": "All channels",
      "params": {}
    },
    "InputNotifyChats": {
      "desc": "Notifications generated by all groups.",
      "params": {}
    },
    "InputNotifyForumTopic": {
      "desc": "Notifications generated by a topic in a forum.",
      "params": {
        "peer": "Forum ID",
        "top_msg_id": "Topic ID"
      }
    },
    "InputNotifyPeer": {
      "desc": "Notifications generated by a certain user or group.",
      "params": {
        "peer": "User or group"
      }
    },
    "InputNotifyUsers": {
      "desc": "Notifications generated by all users.",
      "params": {}
    },
    "InputPaymentCredentials": {
      "desc": "Payment credentials",
      "params": {
        "data": "Payment credentials",
        "flags": "Flags, see TL conditional fields",
        "save": "Save payment credential for future use"
      }
    },
    "InputPaymentCredentialsApplePay": {
      "desc": "Apple pay payment credentials",
      "params": {
        "payment_data": "Payment data"
      }
    },
    "InputPaymentCredentialsGooglePay": {
      "desc": "Google Pay payment credentials",
      "params": {
        "payment_token": "Payment token"
      }
    },
    "InputPaymentCredentialsSaved": {
      "desc": "Saved payment credentials",
      "params": {
        "id": "Credential ID",
        "tmp_password": "Temporary password"
      }
    },
    "InputPeerChannel": {
      "desc": "Defines a channel for further interaction.",
      "params": {
        "access_hash": "access_hash value from the channel constructor",
        "channel_id": "Channel identifier"
      }
    },
    "InputPeerChannelFromMessage": {
      "desc": "Defines a min channel that was seen in a certain message of a certain chat.",
      "params": {
        "channel_id": "The identifier of the channel that was seen",
        "msg_id": "The message ID",
        "peer": "The chat where the channel's message was seen"
      }
    },
    "InputPeerChat": {
      "desc": "Defines a chat for further interaction.",
      "params": {
        "chat_id": "Chat identifier"
      }
    },
    "InputPeerEmpty": {
      "desc": "An empty constructor, no user or chat is defined.",
      "params": {}
    },
    "InputPeerNotifySettings": {
      "desc": "Notification settings.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "mute_until": "Date until which all notifications shall be switched off",
        "show_previews": "If the text of the message shall be displayed in notification",
        "silent": "Peer was muted?",
        "sound": "Identifier of an audio file to play for notifications.",
        "stories_hide_sender": "Whether the sender name should be displayed in story notifications.",
        "stories_muted": "Whether story notifications should be disabled.",
        "stories_sound": "Identifier of an audio file to play for story notifications."
      }
    },
    "InputPeerPhotoFileLocation": {
      "desc": "Location of profile photo of channel/group/supergroup/user",
      "params": {
        "big": "Whether to download the high-quality version of the picture",
        "flags": "Flags, see TL conditional fields",
        "peer": "The peer whose profile picture should be downloaded",
        "photo_id": "Photo ID"
      }
    },
    "InputPeerSelf": {
      "desc": "Defines the current user.",
      "params": {}
    },
    "InputPeerUser": {
      "desc": "Defines a user for further interaction.",
      "params": {
        "access_hash": "access_hash value from the user constructor",
        "user_id": "User identifier"
      }
    },
    "InputPeerUserFromMessage": {
      "desc": "Defines a min user that was seen in a certain message of a certain chat.",
      "params": {
        "msg_id": "The message ID",
        "peer": "The chat where the user was seen",
        "user_id": "The identifier of the user that was seen"
      }
    },
    "InputPhoneCall": {
      "desc": "Phone call",
      "params": {
        "access_hash": "Access hash",
        "id": "Call ID"
      }
    },
    "InputPhoneContact": {
      "desc": "Phone contact.",
      "params": {
        "client_id": "An arbitrary 64-bit integer: it should be set, for example, to an incremental number when using contacts.importContacts, in order to retry importing only the contacts that weren't imported successfully, according to the client_ids returned in contacts.importedContacts.retry_contacts.",
        "first_name": "Contact's first name",
        "last_name": "Contact's last name",
        "phone": "Phone number"
      }
    },
    "InputPhoto": {
      "desc": "Defines a photo for further interaction.",
      "params": {
        "access_hash": "access_hash value from the photo constructor",
        "file_reference": "File reference",
        "id": "Photo identifier"
      }
    },
    "InputPhotoEmpty": {
      "desc": "Empty constructor.",
      "params": {}
    },
    "InputPhotoFileLocation": {
      "desc": "Use this object to download a photo with upload.getFile method",
      "params": {
        "access_hash": "Photo's access hash, obtained from the photo object",
        "file_reference": "File reference",
        "id": "Photo ID, obtained from the photo object",
        "thumb_size": "The PhotoSize to download: must be set to the type field of the desired PhotoSize object of the photo"
      }
    },
    "InputPhotoLegacyFileLocation": {
      "desc": "DEPRECATED legacy photo file location",
      "params": {
        "access_hash": "Access hash",
        "file_reference": "File reference",
        "id": "Photo ID",
        "local_id": "Local ID",
        "secret": "Secret",
        "volume_id": "Volume ID"
      }
    },
    "InputPrivacyKeyAbout": {
      "desc": "Whether people can see your bio",
      "params": {}
    },
    "InputPrivacyKeyAddedByPhone": {
      "desc": "Whether people can add you to their contact list by your phone number",
      "params": {}
    },
    "InputPrivacyKeyBirthday": {
      "desc": "{schema}",
      "params": {}
    },
    "InputPrivacyKeyChatInvite": {
      "desc": "Whether people will be able to invite you to chats",
      "params": {}
    },
    "InputPrivacyKeyForwards": {
      "desc": "Whether messages forwarded from you will be anonymous",
      "params": {}
    },
    "InputPrivacyKeyPhoneCall": {
      "desc": "Whether you will accept phone calls",
      "params": {}
    },
    "InputPrivacyKeyPhoneNumber": {
      "desc": "Whether people will be able to see your phone number",
      "params": {}
    },
    "InputPrivacyKeyPhoneP2P": {
      "desc": "Whether to allow P2P communication during VoIP calls",
      "params": {}
    },
    "InputPrivacyKeyProfilePhoto": {
      "desc": "Whether people will be able to see your profile picture",
      "params": {}
    },
    "InputPrivacyKeyStatusTimestamp": {
      "desc": "Whether people will be able to see your exact last online timestamp",
      "params": {}
    },
    "InputPrivacyKeyVoiceMessages": {
      "desc": "Whether people can send you voice messages",
      "params": {}
    },
    "InputPrivacyValueAllowAll": {
      "desc": "Allow all users",
      "params": {}
    },
    "InputPrivacyValueAllowChatParticipants": {
      "desc": "Allow only participants of certain chats",
      "params": {
        "chats": "Allowed chat IDs"
      }
    },
    "InputPrivacyValueAllowCloseFriends": {
      "desc": "Allow only close friends \u00bb",
      "params": {}
    },
    "InputPrivacyValueAllowContacts": {
      "desc": "Allow only contacts",
      "params": {}
    },
    "InputPrivacyValueAllowPremium": {
      "desc": "{schema}",
      "params": {}
    },
    "InputPrivacyValueAllowUsers": {
      "desc": "Allow only certain users",
      "params": {
        "users": "Allowed users"
      }
    },
    "InputPrivacyValueDisallowAll": {
      "desc": "Disallow all",
      "params": {}
    },
    "InputPrivacyValueDisallowChatParticipants": {
      "desc": "Disallow only participants of certain chats",
      "params": {
        "chats": "Disallowed chat IDs"
      }
    },
    "InputPrivacyValueDisallowContacts": {
      "desc": "Disallow only contacts",
      "params": {}
    },
    "InputPrivacyValueDisallowUsers": {
      "desc": "Disallow only certain users",
      "params": {
        "users": "Users to disallow"
      }
    },
    "InputQuickReplyShortcut": {
      "desc": "{schema}",
      "params": {
        "shortcut": ""
      }
    },
    "InputQuickReplyShortcutId": {
      "desc": "{schema}",
      "params": {
        "shortcut_id": ""
      }
    },
    "InputReplyToMessage": {
      "desc": "Reply to a message.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "quote_entities": "Message entities for styled text from the quote_text field.",
        "quote_offset": "Offset of the message quote_text within the original message (in UTF-16 code units).",
        "quote_text": "Used to quote-reply to only a certain section (specified here) of the original message. The maximum UTF-8 length for quotes is specified in the quote_length_max config key.",
        "reply_to_msg_id": "The message ID to reply to.",
        "reply_to_peer_id": "Used to reply to messages sent to another chat (specified here), can only be used for non-protected chats and messages.",
        "top_msg_id": "This field must contain the topic ID only when replying to messages in forum topics different from the \"General\" topic (i.e. reply_to_msg_id is set and reply_to_msg_id != topicID and topicID != 1).  If the replied-to message is deleted before the method finishes execution, the value in this field will be used to send the message to the correct topic, instead of the \"General\" topic."
      }
    },
    "InputReplyToStory": {
      "desc": "Reply to a story.",
      "params": {
        "peer": "",
        "story_id": "ID of the story to reply to."
      }
    },
    "InputReportReasonChildAbuse": {
      "desc": "Report for child abuse",
      "params": {}
    },
    "InputReportReasonCopyright": {
      "desc": "Report for copyrighted content",
      "params": {}
    },
    "InputReportReasonFake": {
      "desc": "Report for impersonation",
      "params": {}
    },
    "InputReportReasonGeoIrrelevant": {
      "desc": "Report an irrelevant geogroup",
      "params": {}
    },
    "InputReportReasonIllegalDrugs": {
      "desc": "Report for illegal drugs",
      "params": {}
    },
    "InputReportReasonOther": {
      "desc": "Other",
      "params": {}
    },
    "InputReportReasonPersonalDetails": {
      "desc": "Report for divulgation of personal details",
      "params": {}
    },
    "InputReportReasonPornography": {
      "desc": "Report for pornography",
      "params": {}
    },
    "InputReportReasonSpam": {
      "desc": "Report for spam",
      "params": {}
    },
    "InputReportReasonViolence": {
      "desc": "Report for violence",
      "params": {}
    },
    "InputSecureFile": {
      "desc": "Pre-uploaded passport file, for more info see the passport docs \u00bb",
      "params": {
        "access_hash": "Secure file access hash",
        "id": "Secure file ID"
      }
    },
    "InputSecureFileLocation": {
      "desc": "Location of encrypted telegram passport file.",
      "params": {
        "access_hash": "Checksum, access_hash parameter value from secureFile",
        "id": "File ID, id parameter value from secureFile"
      }
    },
    "InputSecureFileUploaded": {
      "desc": "Uploaded secure file, for more info see the passport docs \u00bb",
      "params": {
        "file_hash": "File hash",
        "id": "Secure file ID",
        "md5_checksum": "MD5 hash of encrypted uploaded file, to be checked server-side",
        "parts": "Secure file part count",
        "secret": "Secret"
      }
    },
    "InputSecureValue": {
      "desc": "Secure value, for more info see the passport docs \u00bb",
      "params": {
        "data": "Encrypted Telegram Passport element data",
        "files": "Array of encrypted passport files with photos the of the documents",
        "flags": "Flags, see TL conditional fields",
        "front_side": "Encrypted passport file with the front side of the document",
        "plain_data": "Plaintext verified passport data",
        "reverse_side": "Encrypted passport file with the reverse side of the document",
        "selfie": "Encrypted passport file with a selfie of the user holding the document",
        "translation": "Array of encrypted passport files with translated versions of the provided documents",
        "type": "Secure passport value type"
      }
    },
    "InputSingleMedia": {
      "desc": "A single media in an album or grouped media sent with messages.sendMultiMedia.",
      "params": {
        "entities": "Message entities for styled text",
        "flags": "Flags, see TL conditional fields",
        "media": "The media",
        "message": "A caption for the media",
        "random_id": "Unique client media ID required to prevent message resending"
      }
    },
    "InputStickerSetAnimatedEmoji": {
      "desc": "Animated emojis stickerset",
      "params": {}
    },
    "InputStickerSetAnimatedEmojiAnimations": {
      "desc": "Animated emoji reaction stickerset (contains animations to play when a user clicks on a given animated emoji)",
      "params": {}
    },
    "InputStickerSetDice": {
      "desc": "Used for fetching animated dice stickers",
      "params": {
        "emoticon": "The emoji, for now ,  and  are supported"
      }
    },
    "InputStickerSetEmojiChannelDefaultStatuses": {
      "desc": "Default custom emoji status stickerset for channel statuses",
      "params": {}
    },
    "InputStickerSetEmojiDefaultStatuses": {
      "desc": "Default custom emoji status stickerset",
      "params": {}
    },
    "InputStickerSetEmojiDefaultTopicIcons": {
      "desc": "Default custom emoji stickerset for forum topic icons",
      "params": {}
    },
    "InputStickerSetEmojiGenericAnimations": {
      "desc": "Generic animation stickerset containing animations to play when reacting to messages using a normal emoji without a custom animation",
      "params": {}
    },
    "InputStickerSetEmpty": {
      "desc": "Empty constructor",
      "params": {}
    },
    "InputStickerSetID": {
      "desc": "Stickerset by ID",
      "params": {
        "access_hash": "Access hash",
        "id": "ID"
      }
    },
    "InputStickerSetItem": {
      "desc": "Sticker in a stickerset",
      "params": {
        "document": "The sticker",
        "emoji": "Associated emoji",
        "flags": "Flags, see TL conditional fields",
        "keywords": "Set of keywords, separated by commas (can't be provided for mask stickers)",
        "mask_coords": "Coordinates for mask sticker"
      }
    },
    "InputStickerSetPremiumGifts": {
      "desc": "Stickers to show when receiving a gifted Telegram Premium subscription",
      "params": {}
    },
    "InputStickerSetShortName": {
      "desc": "Stickerset by short name, from a stickerset deep link \u00bb",
      "params": {
        "short_name": "Short name from a stickerset deep link \u00bb"
      }
    },
    "InputStickerSetThumb": {
      "desc": "Location of stickerset thumbnail (see files)",
      "params": {
        "stickerset": "Sticker set",
        "thumb_version": "Thumbnail version"
      }
    },
    "InputStickeredMediaDocument": {
      "desc": "A document with stickers attached",
      "params": {
        "id": "The document"
      }
    },
    "InputStickeredMediaPhoto": {
      "desc": "A photo with stickers attached",
      "params": {
        "id": "The photo"
      }
    },
    "InputStorePaymentGiftPremium": {
      "desc": "Info about a gifted Telegram Premium purchase",
      "params": {
        "amount": "Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).",
        "currency": "Three-letter ISO 4217 currency code",
        "user_id": "The user to which the Telegram Premium subscription was gifted"
      }
    },
    "InputStorePaymentPremiumGiftCode": {
      "desc": "Used to gift Telegram Premium subscriptions only to some specific subscribers of a channel or to some of our contacts, see here \u00bb for more info on giveaways and gifts.",
      "params": {
        "amount": "Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).",
        "boost_peer": "If set, the gifts will be sent on behalf of a channel we are an admin of, which will also assign some boosts to it. Otherwise, the gift will be sent directly from the currently logged in users, and we will gain some extra boost slots. See here \u00bb for more info on giveaways and gifts.",
        "currency": "Three-letter ISO 4217 currency code",
        "flags": "Flags, see TL conditional fields",
        "users": "The users that will receive the Telegram Premium subscriptions."
      }
    },
    "InputStorePaymentPremiumGiveaway": {
      "desc": "Used to pay for a giveaway, see here \u00bb for more info.",
      "params": {
        "additional_peers": "Additional channels that the user must join to participate to the giveaway can be specified here.",
        "amount": "Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).",
        "boost_peer": "The channel starting the giveaway, that the user must join to participate, that will receive the giveaway boosts; see here \u00bb for more info on giveaways.",
        "countries_iso2": "The set of users that can participate to the giveaway can be restricted by passing here an explicit whitelist of up to giveaway_countries_max countries, specified as two-letter ISO 3166-1 alpha-2 country codes.",
        "currency": "Three-letter ISO 4217 currency code",
        "flags": "Flags, see TL conditional fields",
        "only_new_subscribers": "If set, only new subscribers starting from the giveaway creation date will be able to participate to the giveaway.",
        "prize_description": "Can contain a textual description of additional giveaway prizes.",
        "random_id": "Random ID to avoid resending the giveaway",
        "until_date": "The end date of the giveaway, must be at most giveaway_period_max seconds in the future; see here \u00bb for more info on giveaways.",
        "winners_are_visible": "If set, giveaway winners are public and will be listed in a messageMediaGiveawayResults message that will be automatically sent to the channel once the giveaway ends."
      }
    },
    "InputStorePaymentPremiumSubscription": {
      "desc": "Info about a Telegram Premium purchase",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "restore": "Pass true if this is a restore of a Telegram Premium purchase; only for the App Store",
        "upgrade": "Pass true if this is an upgrade from a monthly subscription to a yearly subscription; only for App Store"
      }
    },
    "InputStorePaymentStars": {
      "desc": "{schema}",
      "params": {
        "amount": "",
        "currency": "",
        "flags": "Flags, see TL conditional fields",
        "stars": ""
      }
    },
    "InputTakeoutFileLocation": {
      "desc": "Used to download a JSON file that will contain all personal data related to features that do not have a specialized takeout method yet, see here \u00bb for more info on the takeout API.",
      "params": {}
    },
    "InputTheme": {
      "desc": "Theme",
      "params": {
        "access_hash": "Access hash",
        "id": "ID"
      }
    },
    "InputThemeSettings": {
      "desc": "Theme settings",
      "params": {
        "accent_color": "Accent color, ARGB format",
        "base_theme": "Default theme on which this theme is based",
        "flags": "Flags, see TL conditional fields",
        "message_colors": "The fill to be used as a background for outgoing messages, in RGB24 format. If just one or two equal colors are provided, describes a solid fill of a background. If two different colors are provided, describes the top and bottom colors of a 0-degree gradient.If three or four colors are provided, describes a freeform gradient fill of a background.",
        "message_colors_animated": "If set, the freeform gradient fill needs to be animated on every sent message",
        "outbox_accent_color": "Accent color of outgoing messages in ARGB format",
        "wallpaper": "inputWallPaper or inputWallPaperSlug when passing wallpaper files for image or pattern wallpapers, inputWallPaperNoFile with id=0 otherwise.",
        "wallpaper_settings": "Wallpaper settings."
      }
    },
    "InputThemeSlug": {
      "desc": "Theme by theme ID",
      "params": {
        "slug": "Unique theme ID obtained from a theme deep link \u00bb"
      }
    },
    "InputUser": {
      "desc": "Defines a user for further interaction.",
      "params": {
        "access_hash": "access_hash value from the user constructor",
        "user_id": "User identifier"
      }
    },
    "InputUserEmpty": {
      "desc": "Empty constructor, does not define a user.",
      "params": {}
    },
    "InputUserFromMessage": {
      "desc": "Defines a min user that was seen in a certain message of a certain chat.",
      "params": {
        "msg_id": "The message ID",
        "peer": "The chat where the user was seen",
        "user_id": "The identifier of the user that was seen"
      }
    },
    "InputUserSelf": {
      "desc": "Defines the current user.",
      "params": {}
    },
    "InputWallPaper": {
      "desc": "Wallpaper",
      "params": {
        "access_hash": "Access hash",
        "id": "Wallpaper ID"
      }
    },
    "InputWallPaperNoFile": {
      "desc": "Wallpaper with no file access hash, used for example when deleting (unsave=true) wallpapers using account.saveWallPaper, specifying just the wallpaper ID.",
      "params": {
        "id": "Wallpaper ID"
      }
    },
    "InputWallPaperSlug": {
      "desc": "Wallpaper by slug (a unique ID, obtained from a wallpaper link \u00bb)",
      "params": {
        "slug": "Unique wallpaper ID"
      }
    },
    "InputWebDocument": {
      "desc": "The document",
      "params": {
        "attributes": "Attributes for media types",
        "mime_type": "Mime type",
        "size": "Remote file size",
        "url": "Remote document URL to be downloaded using the appropriate method"
      }
    },
    "InputWebFileAudioAlbumThumbLocation": {
      "desc": "Used to download an album cover for any music file using upload.getWebFile, see the webfile docs for more info \u00bb.",
      "params": {
        "document": "The audio file in question: must NOT be provided in secret chats, provide the title and performer fields instead.",
        "flags": "Flags, see TL conditional fields",
        "performer": "Song performer: should only be used in secret chats, in normal chats provide document instead, as it has more lax rate limits.",
        "small": "Used to return a thumbnail with 100x100 resolution (instead of the default 600x600)",
        "title": "Song title: should only be used in secret chats, in normal chats provide document instead, as it has more lax rate limits."
      }
    },
    "InputWebFileGeoPointLocation": {
      "desc": "Used to download a server-generated image with the map preview from a geoPoint, see the webfile docs for more info \u00bb.",
      "params": {
        "access_hash": "Access hash of the geoPoint",
        "geo_point": "Generated from the lat, long and accuracy_radius parameters of the geoPoint",
        "h": "Map height in pixels before applying scale; 16-1024",
        "scale": "Map scale; 1-3",
        "w": "Map width in pixels before applying scale; 16-1024",
        "zoom": "Map zoom level; 13-20"
      }
    },
    "InputWebFileLocation": {
      "desc": "Location of a remote HTTP(s) file",
      "params": {
        "access_hash": "Access hash",
        "url": "HTTP URL of file"
      }
    },
    "Invoice": {
      "desc": "Invoice",
      "params": {
        "currency": "Three-letter ISO 4217 currency code",
        "email_requested": "Set this flag if you require the user's email address to complete the order",
        "email_to_provider": "Set this flag if user's email address should be sent to provider",
        "flags": "Flags, see TL conditional fields",
        "flexible": "Set this flag if the final price depends on the shipping method",
        "max_tip_amount": "The maximum accepted amount for tips in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).",
        "name_requested": "Set this flag if you require the user's full name to complete the order",
        "phone_requested": "Set this flag if you require the user's phone number to complete the order",
        "phone_to_provider": "Set this flag if user's phone number should be sent to provider",
        "prices": "Price breakdown, a list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)",
        "recurring": "Whether this is a recurring payment",
        "shipping_address_requested": "Set this flag if you require the user's shipping address to complete the order",
        "suggested_tip_amounts": "A vector of suggested amounts of tips in the smallest units of the currency (integer, not float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed max_tip_amount.",
        "terms_url": "Terms of service URL",
        "test": "Test invoice"
      }
    },
    "JsonArray": {
      "desc": "JSON array",
      "params": {
        "value": "JSON values"
      }
    },
    "JsonBool": {
      "desc": "JSON boolean value",
      "params": {
        "value": "Value"
      }
    },
    "JsonNull": {
      "desc": "null JSON value",
      "params": {}
    },
    "JsonNumber": {
      "desc": "JSON numeric value",
      "params": {
        "value": "Value"
      }
    },
    "JsonObject": {
      "desc": "JSON object value",
      "params": {
        "value": "Values"
      }
    },
    "JsonObjectValue": {
      "desc": "JSON key: value pair",
      "params": {
        "key": "Key",
        "value": "Value"
      }
    },
    "JsonString": {
      "desc": "JSON string",
      "params": {
        "value": "Value"
      }
    },
    "KeyboardButton": {
      "desc": "Bot keyboard button",
      "params": {
        "text": "Button text"
      }
    },
    "KeyboardButtonBuy": {
      "desc": "Button to buy a product",
      "params": {
        "text": "Button text"
      }
    },
    "KeyboardButtonCallback": {
      "desc": "Callback button",
      "params": {
        "data": "Callback data",
        "flags": "Flags, see TL conditional fields",
        "requires_password": "Whether the user should verify his identity by entering his 2FA SRP parameters to the messages.getBotCallbackAnswer method. NOTE: telegram and the bot WILL NOT have access to the plaintext password, thanks to SRP. This button is mainly used by the official @botfather bot, for verifying the user's identity before transferring ownership of a bot to another user.",
        "text": "Button text"
      }
    },
    "KeyboardButtonGame": {
      "desc": "Button to start a game",
      "params": {
        "text": "Button text"
      }
    },
    "KeyboardButtonRequestGeoLocation": {
      "desc": "Button to request a user's geolocation",
      "params": {
        "text": "Button text"
      }
    },
    "KeyboardButtonRequestPeer": {
      "desc": "Prompts the user to select and share one or more peers with the bot using messages.sendBotRequestedPeer",
      "params": {
        "button_id": "Button ID, to be passed to messages.sendBotRequestedPeer.",
        "max_quantity": "Maximum number of peers that can be chosne.",
        "peer_type": "Filtering criteria to use for the peer selection list shown to the user. The list should display all existing peers of the specified type, and should also offer an option for the user to create and immediately use one or more (up to max_quantity) peers of the specified type, if needed.",
        "text": "Button text"
      }
    },
    "KeyboardButtonRequestPhone": {
      "desc": "Button to request a user's phone number",
      "params": {
        "text": "Button text"
      }
    },
    "KeyboardButtonRequestPoll": {
      "desc": "A button that allows the user to create and send a poll when pressed; available only in private",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "quiz": "If set, only quiz polls can be sent",
        "text": "Button text"
      }
    },
    "KeyboardButtonRow": {
      "desc": "Inline keyboard row",
      "params": {
        "buttons": "Bot or inline keyboard buttons"
      }
    },
    "KeyboardButtonSimpleWebView": {
      "desc": "Button to open a bot mini app using messages.requestSimpleWebView, without sending user information to the web app.",
      "params": {
        "text": "Button text",
        "url": "Web app URL"
      }
    },
    "KeyboardButtonSwitchInline": {
      "desc": "Button to force a user to switch to inline mode: pressing the button will prompt the user to select one of their chats, open that chat and insert the bot's username and the specified inline query in the input field.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "peer_types": "Filter to use when selecting chats.",
        "query": "The inline query to use",
        "same_peer": "If set, pressing the button will insert the bot's username and the specified inline query in the current chat's input field.",
        "text": "Button label"
      }
    },
    "KeyboardButtonUrl": {
      "desc": "URL button",
      "params": {
        "text": "Button label",
        "url": "URL"
      }
    },
    "KeyboardButtonUrlAuth": {
      "desc": "Button to request a user to authorize via URL using Seamless Telegram Login. When the user clicks on such a button, messages.requestUrlAuth should be called, providing the button_id and the ID of the container message. The returned urlAuthResultRequest object will contain more details about the authorization request (request_write_access if the bot would like to send messages to the user along with the username of the bot which will be used for user authorization). Finally, the user can choose to call messages.acceptUrlAuth to get a urlAuthResultAccepted with the URL to open instead of the url of this constructor, or a urlAuthResultDefault, in which case the url of this constructor must be opened, instead. If the user refuses the authorization request but still wants to open the link, the url of this constructor must be used.",
      "params": {
        "button_id": "ID of the button to pass to messages.requestUrlAuth",
        "flags": "Flags, see TL conditional fields",
        "fwd_text": "New text of the button in forwarded messages.",
        "text": "Button label",
        "url": "An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in Receiving authorization data.NOTE: Services must always check the hash of the received data to verify the authentication and the integrity of the data as described in Checking authorization."
      }
    },
    "KeyboardButtonUserProfile": {
      "desc": "Button that links directly to a user profile",
      "params": {
        "text": "Button text",
        "user_id": "User ID"
      }
    },
    "KeyboardButtonWebView": {
      "desc": "Button to open a bot mini app using messages.requestWebView, sending over user information after user confirmation.",
      "params": {
        "text": "Button text",
        "url": "Web app url"
      }
    },
    "LabeledPrice": {
      "desc": "This object represents a portion of the price for goods or services.",
      "params": {
        "amount": "Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).",
        "label": "Portion label"
      }
    },
    "LangPackDifference": {
      "desc": "Changes to the app's localization pack",
      "params": {
        "from_version": "Previous version number",
        "lang_code": "Language code",
        "strings": "Localized strings",
        "version": "New version number"
      }
    },
    "LangPackLanguage": {
      "desc": "Identifies a localization pack",
      "params": {
        "base_lang_code": "Identifier of a base language pack; may be empty. If a string is missed in the language pack, then it should be fetched from base language pack. Unsupported in custom language packs",
        "beta": "Is this a beta localization pack?",
        "flags": "Flags, see TL conditional fields",
        "lang_code": "Language code (pack identifier)",
        "name": "Language name",
        "native_name": "Language name in the language itself",
        "official": "Whether the language pack is official",
        "plural_code": "A language code to be used to apply plural forms. See https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html for more info",
        "rtl": "Is this a localization pack for an RTL language",
        "strings_count": "Total number of non-deleted strings from the language pack",
        "translated_count": "Total number of translated strings from the language pack",
        "translations_url": "Link to language translation interface; empty for custom local language packs"
      }
    },
    "LangPackString": {
      "desc": "Translated localization string",
      "params": {
        "key": "Language key",
        "value": "Value"
      }
    },
    "LangPackStringDeleted": {
      "desc": "Deleted localization string",
      "params": {
        "key": "Localization key"
      }
    },
    "LangPackStringPluralized": {
      "desc": "A language pack string which has different forms based on the number of some object it mentions. See https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html for more info",
      "params": {
        "few_value": "Value for a few objects",
        "flags": "Flags, see TL conditional fields",
        "key": "Localization key",
        "many_value": "Value for many objects",
        "one_value": "Value for one object",
        "other_value": "Default value",
        "two_value": "Value for two objects",
        "zero_value": "Value for zero objects"
      }
    },
    "MaskCoords": {
      "desc": "Position on a photo where a mask should be placed when attaching stickers to media \u00bb",
      "params": {
        "n": "Part of the face, relative to which the mask should be placed",
        "x": "Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. (For example, -1.0 will place the mask just to the left of the default mask position)",
        "y": "Shift by Y-axis measured in widths of the mask scaled to the face size, from left to right. (For example, -1.0 will place the mask just below the default mask position)",
        "zoom": "Mask scaling coefficient. (For example, 2.0 means a doubled size)"
      }
    },
    "MediaAreaChannelPost": {
      "desc": "Represents a channel post.",
      "params": {
        "channel_id": "The channel that posted the message",
        "coordinates": "The size and location of the media area corresponding to the location sticker on top of the story media.",
        "msg_id": "ID of the channel message"
      }
    },
    "MediaAreaCoordinates": {
      "desc": "Coordinates and size of a clicable rectangular area on top of a story.",
      "params": {
        "h": "The height of the rectangle, as a percentage of the media height (0-100).",
        "rotation": "Clockwise rotation angle of the rectangle, in degrees (0-360).",
        "w": "The width of the rectangle, as a percentage of the media width (0-100).",
        "x": "The abscissa of the rectangle's center, as a percentage of the media width (0-100).",
        "y": "The ordinate of the rectangle's center, as a percentage of the media height (0-100)."
      }
    },
    "MediaAreaGeoPoint": {
      "desc": "Represents a geolocation tag attached to a story.",
      "params": {
        "coordinates": "The size and position of the media area corresponding to the location sticker on top of the story media.",
        "geo": "Coordinates of the geolocation tag."
      }
    },
    "MediaAreaSuggestedReaction": {
      "desc": "Represents a reaction bubble.",
      "params": {
        "coordinates": "The coordinates of the media area corresponding to the reaction button.",
        "dark": "Whether the reaction bubble has a dark background.",
        "flags": "Flags, see TL conditional fields",
        "flipped": "Whether the reaction bubble is mirrored (see here \u00bb for more info).",
        "reaction": "The reaction that should be sent when this area is clicked."
      }
    },
    "MediaAreaVenue": {
      "desc": "Represents a location tag attached to a story, with additional venue information.",
      "params": {
        "address": "Address",
        "coordinates": "The size and location of the media area corresponding to the location sticker on top of the story media.",
        "geo": "Coordinates of the venue",
        "provider": "Venue provider: currently only \"foursquare\" needs to be supported.",
        "title": "Venue name",
        "venue_id": "Venue ID in the provider's database",
        "venue_type": "Venue type in the provider's database"
      }
    },
    "Message": {
      "desc": "A message",
      "params": {
        "date": "Date of the message",
        "edit_date": "Last edit date of this message",
        "edit_hide": "Whether the message should be shown as not modified to the user, even if an edit date is present",
        "effect": "",
        "entities": "Message entities for styled text",
        "factcheck": "",
        "flags": "Flags, see TL conditional fields",
        "flags2": "",
        "forwards": "Forward counter",
        "from_boosts_applied": "",
        "from_id": "ID of the sender of the message",
        "from_scheduled": "Whether this is a scheduled message",
        "fwd_from": "Info about forwarded messages",
        "grouped_id": "Multiple media messages sent using messages.sendMultiMedia with the same grouped ID indicate an album or media group",
        "id": "ID of the message",
        "invert_media": "If set, any eventual webpage preview will be shown on top of the message instead of at the bottom.",
        "legacy": "This is a legacy message: it has to be refetched with the new layer",
        "media": "Media attachment",
        "media_unread": "Whether there are unread media attachments in this message",
        "mentioned": "Whether we were mentioned in this message",
        "message": "The message",
        "noforwards": "Whether this message is protected and thus cannot be forwarded; clients should also prevent users from saving attached media (i.e. videos should only be streamed, photos should be kept in RAM, et cetera).",
        "offline": "",
        "out": "Is this an outgoing message",
        "peer_id": "Peer ID, the chat where this message was sent",
        "pinned": "Whether this message is pinned",
        "post": "Whether this is a channel post",
        "post_author": "Name of the author of this message for channel posts (with signatures enabled)",
        "quick_reply_shortcut_id": "",
        "reactions": "Reactions to this message",
        "replies": "Info about post comments (for channels) or message replies (for groups)",
        "reply_markup": "Reply markup (bot/inline keyboards)",
        "reply_to": "Reply information",
        "restriction_reason": "Contains the reason why access to this message must be restricted.",
        "saved_peer_id": "Messages fetched from a saved messages dialog \u00bb will have peer=inputPeerSelf and the saved_peer_id flag set to the ID of the saved dialog.",
        "silent": "Whether this is a silent message (no notification triggered)",
        "ttl_period": "Time To Live of the message, once message.date+message.ttl_period === time(), the message will be deleted on the server, and must be deleted locally as well.",
        "via_bot_id": "ID of the inline bot that generated the message",
        "via_business_bot_id": "",
        "views": "View count for channel posts"
      }
    },
    "MessageActionBoostApply": {
      "desc": "{schema}",
      "params": {
        "boosts": ""
      }
    },
    "MessageActionBotAllowed": {
      "desc": "We have given the bot permission to send us direct messages.",
      "params": {
        "app": "We have authorized the bot to send us messages by opening the specified bot mini app.",
        "attach_menu": "We have authorized the bot to send us messages by installing the bot's attachment menu.",
        "domain": "We have authorized the bot to send us messages by logging into a website via Telegram Login \u00bb; this field contains the domain name of the website on which the user has logged in.",
        "flags": "Flags, see TL conditional fields",
        "from_request": "We have allowed the bot to send us messages using bots.allowSendMessage \u00bb."
      }
    },
    "MessageActionChannelCreate": {
      "desc": "The channel was created",
      "params": {
        "title": "Original channel/supergroup title"
      }
    },
    "MessageActionChannelMigrateFrom": {
      "desc": "Indicates the channel was migrated from the specified chat",
      "params": {
        "chat_id": "The old chat ID",
        "title": "The old chat title"
      }
    },
    "MessageActionChatAddUser": {
      "desc": "New member in the group",
      "params": {
        "users": "Users that were invited to the chat"
      }
    },
    "MessageActionChatCreate": {
      "desc": "Group created",
      "params": {
        "title": "Group name",
        "users": "List of group members"
      }
    },
    "MessageActionChatDeletePhoto": {
      "desc": "Group profile photo removed.",
      "params": {}
    },
    "MessageActionChatDeleteUser": {
      "desc": "User left the group.",
      "params": {
        "user_id": "Leaving user ID"
      }
    },
    "MessageActionChatEditPhoto": {
      "desc": "Group profile changed",
      "params": {
        "photo": "New group profile photo"
      }
    },
    "MessageActionChatEditTitle": {
      "desc": "Group name changed.",
      "params": {
        "title": "New group name"
      }
    },
    "MessageActionChatJoinedByLink": {
      "desc": "A user joined the chat via an invite link",
      "params": {
        "inviter_id": "ID of the user that created the invite link"
      }
    },
    "MessageActionChatJoinedByRequest": {
      "desc": "A user was accepted into the group by an admin",
      "params": {}
    },
    "MessageActionChatMigrateTo": {
      "desc": "Indicates the chat was migrated to the specified supergroup",
      "params": {
        "channel_id": "The supergroup it was migrated to"
      }
    },
    "MessageActionContactSignUp": {
      "desc": "A contact just signed up to telegram",
      "params": {}
    },
    "MessageActionCustomAction": {
      "desc": "Custom action (most likely not supported by the current layer, an upgrade might be needed)",
      "params": {
        "message": "Action message"
      }
    },
    "MessageActionEmpty": {
      "desc": "Empty constructor.",
      "params": {}
    },
    "MessageActionGameScore": {
      "desc": "Someone scored in a game",
      "params": {
        "game_id": "Game ID",
        "score": "Score"
      }
    },
    "MessageActionGeoProximityReached": {
      "desc": "A user of the chat is now in proximity of another user",
      "params": {
        "distance": "Distance, in meters (0-100000)",
        "from_id": "The user or chat that is now in proximity of to_id",
        "to_id": "The user or chat that subscribed to live geolocation proximity alerts"
      }
    },
    "MessageActionGiftCode": {
      "desc": "Contains a Telegram Premium giftcode link.",
      "params": {
        "amount": "Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).",
        "boost_peer": "Identifier of the channel that created the gift code either directly or through a giveaway: if we import this giftcode link, we will also automatically boost this channel.",
        "crypto_amount": "If crypto_currency is set, contains the paid amount, in the smallest units of the cryptocurrency.",
        "crypto_currency": "If set, the gift was made using the specified cryptocurrency.",
        "currency": "Three-letter ISO 4217 currency code",
        "flags": "Flags, see TL conditional fields",
        "months": "Duration in months of the gifted Telegram Premium subscription.",
        "slug": "Slug of the Telegram Premium giftcode link",
        "unclaimed": "If set, the link was not redeemed yet.",
        "via_giveaway": "If set, this gift code was received from a giveaway \u00bb started by a channel we're subscribed to."
      }
    },
    "MessageActionGiftPremium": {
      "desc": "Info about a gifted Telegram Premium subscription",
      "params": {
        "amount": "Price of the gift in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).",
        "crypto_amount": "If the gift was bought using a cryptocurrency, price of the gift in the smallest units of a cryptocurrency.",
        "crypto_currency": "If the gift was bought using a cryptocurrency, the cryptocurrency name.",
        "currency": "Three-letter ISO 4217 currency code",
        "flags": "Flags, see TL conditional fields",
        "months": "Duration of the gifted Telegram Premium subscription"
      }
    },
    "MessageActionGiveawayLaunch": {
      "desc": "A giveaway was started.",
      "params": {}
    },
    "MessageActionGiveawayResults": {
      "desc": "A giveaway has ended.",
      "params": {
        "unclaimed_count": "Number of undistributed prizes",
        "winners_count": "Number of winners in the giveaway"
      }
    },
    "MessageActionGroupCall": {
      "desc": "The group call has ended",
      "params": {
        "call": "Group call",
        "duration": "Group call duration",
        "flags": "Flags, see TL conditional fields"
      }
    },
    "MessageActionGroupCallScheduled": {
      "desc": "A group call was scheduled",
      "params": {
        "call": "The group call",
        "schedule_date": "When is this group call scheduled to start"
      }
    },
    "MessageActionHistoryClear": {
      "desc": "Chat history was cleared",
      "params": {}
    },
    "MessageActionInviteToGroupCall": {
      "desc": "A set of users was invited to the group call",
      "params": {
        "call": "The group call",
        "users": "The invited users"
      }
    },
    "MessageActionPaymentSent": {
      "desc": "A payment was sent",
      "params": {
        "currency": "Three-letter ISO 4217 currency code",
        "flags": "Flags, see TL conditional fields",
        "invoice_slug": "An invoice slug taken from an invoice deep link or from the premium_invoice_slug app config parameter \u00bb",
        "recurring_init": "Whether this is the first payment of a recurring payment we just subscribed to",
        "recurring_used": "Whether this payment is part of a recurring payment",
        "total_amount": "Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)."
      }
    },
    "MessageActionPaymentSentMe": {
      "desc": "A user just sent a payment to me (a bot)",
      "params": {
        "charge": "Provider payment identifier",
        "currency": "Three-letter ISO 4217 currency code",
        "flags": "Flags, see TL conditional fields",
        "info": "Order info provided by the user",
        "payload": "Bot specified invoice payload",
        "recurring_init": "Whether this is the first payment of a recurring payment we just subscribed to",
        "recurring_used": "Whether this payment is part of a recurring payment",
        "shipping_option_id": "Identifier of the shipping option chosen by the user",
        "total_amount": "Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)."
      }
    },
    "MessageActionPhoneCall": {
      "desc": "A phone call",
      "params": {
        "call_id": "Call ID",
        "duration": "Duration of the call in seconds",
        "flags": "Flags, see TL conditional fields",
        "reason": "If the call has ended, the reason why it ended",
        "video": "Is this a video call?"
      }
    },
    "MessageActionPinMessage": {
      "desc": "A message was pinned",
      "params": {}
    },
    "MessageActionRequestedPeer": {
      "desc": "Contains info about one or more peers that the user shared with the bot after clicking on a keyboardButtonRequestPeer button.",
      "params": {
        "button_id": "button_id contained in the keyboardButtonRequestPeer",
        "peers": "The shared peers"
      }
    },
    "MessageActionRequestedPeerSentMe": {
      "desc": "{schema}",
      "params": {
        "button_id": "",
        "peers": ""
      }
    },
    "MessageActionScreenshotTaken": {
      "desc": "A screenshot of the chat was taken",
      "params": {}
    },
    "MessageActionSecureValuesSent": {
      "desc": "Request for secure telegram passport values was sent",
      "params": {
        "types": "Secure value types"
      }
    },
    "MessageActionSecureValuesSentMe": {
      "desc": "Secure telegram passport values were received",
      "params": {
        "credentials": "Encrypted credentials required to decrypt the data",
        "values": "Vector with information about documents and other Telegram Passport elements that were shared with the bot"
      }
    },
    "MessageActionSetChatTheme": {
      "desc": "The chat theme was changed",
      "params": {
        "emoticon": "The emoji that identifies a chat theme"
      }
    },
    "MessageActionSetChatWallPaper": {
      "desc": "The wallpaper \u00bb of the current chat was changed.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "for_both": "If set, indicates the wallpaper was forcefully applied for both sides, without explicit confirmation from the other side. If the message is incoming, and we did not like the new wallpaper the other user has chosen for us, we can re-set our previous wallpaper just on our side, by invoking messages.setChatWallPaper, providing only the revert flag (and obviously the peer parameter).",
        "same": "If set, indicates the user applied a wallpaper \u00bb previously sent by the other user in a messageActionSetChatWallPaper message.",
        "wallpaper": "New wallpaper"
      }
    },
    "MessageActionSetMessagesTTL": {
      "desc": "The Time-To-Live of messages in this chat was changed.",
      "params": {
        "auto_setting_from": "If set, the chat TTL setting was set not due to a manual change by one of participants, but automatically because one of the participants has the default TTL settings enabled \u00bb. For example, when a user writes to us for the first time and we have set a default messages TTL of 1 week, this service message (with auto_setting_from=our_userid) will be emitted before our first message.",
        "flags": "Flags, see TL conditional fields",
        "period": "New Time-To-Live of all messages sent in this chat; if 0, autodeletion was disabled."
      }
    },
    "MessageActionSuggestProfilePhoto": {
      "desc": "A new profile picture was suggested using photos.uploadContactProfilePhoto.",
      "params": {
        "photo": "The photo that the user suggested we set as profile picture."
      }
    },
    "MessageActionTopicCreate": {
      "desc": "A forum topic was created.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "icon_color": "If no custom emoji icon is specified, specifies the color of the fallback topic icon (RGB), one of 0x6FB9F0, 0xFFD67E, 0xCB86DB, 0x8EEE98, 0xFF93B2, or 0xFB6F5F.",
        "icon_emoji_id": "ID of the custom emoji used as topic icon.",
        "title": "Topic name."
      }
    },
    "MessageActionTopicEdit": {
      "desc": "Forum topic information was edited.",
      "params": {
        "closed": "Whether the topic was opened or closed.",
        "flags": "Flags, see TL conditional fields",
        "hidden": "Whether the topic was hidden or unhidden (only valid for the \"General\" topic, id=1).",
        "icon_emoji_id": "ID of the new custom emoji used as topic icon, or if it was removed.",
        "title": "New topic title."
      }
    },
    "MessageActionWebViewDataSent": {
      "desc": "Data from an opened reply keyboard bot mini app was relayed to the bot that owns it (user side service message).",
      "params": {
        "text": "Text of the keyboardButtonSimpleWebView that was pressed to open the web app."
      }
    },
    "MessageActionWebViewDataSentMe": {
      "desc": "Data from an opened reply keyboard bot mini app was relayed to the bot that owns it (bot side service message).",
      "params": {
        "data": "Relayed data.",
        "text": "Text of the keyboardButtonSimpleWebView that was pressed to open the web app."
      }
    },
    "MessageEmpty": {
      "desc": "Empty constructor, non-existent message.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "id": "Message identifier",
        "peer_id": "Peer ID, the chat where this message was sent"
      }
    },
    "MessageEntityBankCard": {
      "desc": "Indicates a credit card number",
      "params": {
        "length": "Length of message entity within message (in UTF-16 code units)",
        "offset": "Offset of message entity within message (in UTF-16 code units)"
      }
    },
    "MessageEntityBlockquote": {
      "desc": "Message entity representing a block quote.",
      "params": {
        "collapsed": "",
        "flags": "Flags, see TL conditional fields",
        "length": "Length of message entity within message (in UTF-16 code units)",
        "offset": "Offset of message entity within message (in UTF-16 code units)"
      }
    },
    "MessageEntityBold": {
      "desc": "Message entity representing bold text.",
      "params": {
        "length": "Length of message entity within message (in UTF-16 code units)",
        "offset": "Offset of message entity within message (in UTF-16 code units)"
      }
    },
    "MessageEntityBotCommand": {
      "desc": "Message entity representing a bot /command",
      "params": {
        "length": "Length of message entity within message (in UTF-16 code units)",
        "offset": "Offset of message entity within message (in UTF-16 code units)"
      }
    },
    "MessageEntityCashtag": {
      "desc": "Message entity representing a $cashtag.",
      "params": {
        "length": "Length of message entity within message (in UTF-16 code units)",
        "offset": "Offset of message entity within message (in UTF-16 code units)"
      }
    },
    "MessageEntityCode": {
      "desc": "Message entity representing a codeblock.",
      "params": {
        "length": "Length of message entity within message (in UTF-16 code units)",
        "offset": "Offset of message entity within message (in UTF-16 code units)"
      }
    },
    "MessageEntityCustomEmoji": {
      "desc": "Represents a custom emoji.\nNote that this entity must wrap exactly one regular emoji (the one contained in documentAttributeCustomEmoji.alt) in the related text, otherwise the server will ignore it.",
      "params": {
        "document_id": "Document ID of the custom emoji, use messages.getCustomEmojiDocuments to fetch the emoji animation and the actual emoji it represents.",
        "length": "Length of message entity within message (in UTF-16 code units)",
        "offset": "Offset of message entity within message (in UTF-16 code units)"
      }
    },
    "MessageEntityEmail": {
      "desc": "Message entity representing an email@example.com.",
      "params": {
        "length": "Length of message entity within message (in UTF-16 code units)",
        "offset": "Offset of message entity within message (in UTF-16 code units)"
      }
    },
    "MessageEntityHashtag": {
      "desc": "#hashtag message entity",
      "params": {
        "length": "Length of message entity within message (in UTF-16 code units)",
        "offset": "Offset of message entity within message (in UTF-16 code units)"
      }
    },
    "MessageEntityItalic": {
      "desc": "Message entity representing italic text.",
      "params": {
        "length": "Length of message entity within message (in UTF-16 code units)",
        "offset": "Offset of message entity within message (in UTF-16 code units)"
      }
    },
    "MessageEntityMention": {
      "desc": "Message entity mentioning a user by @username; messageEntityMentionName can also be used to mention users by their ID.",
      "params": {
        "length": "Length of message entity within message (in UTF-16 code units)",
        "offset": "Offset of message entity within message (in UTF-16 code units)"
      }
    },
    "MessageEntityMentionName": {
      "desc": "Message entity representing a user mention: for creating a mention use inputMessageEntityMentionName.",
      "params": {
        "length": "Length of message entity within message (in UTF-16 code units)",
        "offset": "Offset of message entity within message (in UTF-16 code units)",
        "user_id": "Identifier of the user that was mentioned"
      }
    },
    "MessageEntityPhone": {
      "desc": "Message entity representing a phone number.",
      "params": {
        "length": "Length of message entity within message (in UTF-16 code units)",
        "offset": "Offset of message entity within message (in UTF-16 code units)"
      }
    },
    "MessageEntityPre": {
      "desc": "Message entity representing a preformatted codeblock, allowing the user to specify a programming language for the codeblock.",
      "params": {
        "language": "Programming language of the code",
        "length": "Length of message entity within message (in UTF-16 code units)",
        "offset": "Offset of message entity within message (in UTF-16 code units)"
      }
    },
    "MessageEntitySpoiler": {
      "desc": "Message entity representing a spoiler",
      "params": {
        "length": "Length of message entity within message (in UTF-16 code units)",
        "offset": "Offset of message entity within message (in UTF-16 code units)"
      }
    },
    "MessageEntityStrike": {
      "desc": "Message entity representing strikethrough text.",
      "params": {
        "length": "Length of message entity within message (in UTF-16 code units)",
        "offset": "Offset of message entity within message (in UTF-16 code units)"
      }
    },
    "MessageEntityTextUrl": {
      "desc": "Message entity representing a text url: for in-text urls like https://google.com use messageEntityUrl.",
      "params": {
        "length": "Length of message entity within message (in UTF-16 code units)",
        "offset": "Offset of message entity within message (in UTF-16 code units)",
        "url": "The actual URL"
      }
    },
    "MessageEntityUnderline": {
      "desc": "Message entity representing underlined text.",
      "params": {
        "length": "Length of message entity within message (in UTF-16 code units)",
        "offset": "Offset of message entity within message (in UTF-16 code units)"
      }
    },
    "MessageEntityUnknown": {
      "desc": "Unknown message entity",
      "params": {
        "length": "Length of message entity within message (in UTF-16 code units)",
        "offset": "Offset of message entity within message (in UTF-16 code units)"
      }
    },
    "MessageEntityUrl": {
      "desc": "Message entity representing an in-text url: https://google.com; for text urls, use messageEntityTextUrl.",
      "params": {
        "length": "Length of message entity within message (in UTF-16 code units)",
        "offset": "Offset of message entity within message (in UTF-16 code units)"
      }
    },
    "MessageExtendedMedia": {
      "desc": "Extended media",
      "params": {
        "media": "Media"
      }
    },
    "MessageExtendedMediaPreview": {
      "desc": "Extended media preview",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "h": "Height",
        "thumb": "Thumbnail",
        "video_duration": "Video duration",
        "w": "Width"
      }
    },
    "MessageFwdHeader": {
      "desc": "Info about a forwarded message",
      "params": {
        "channel_post": "ID of the channel message that was forwarded",
        "date": "When was the message originally sent",
        "flags": "Flags, see TL conditional fields",
        "from_id": "The ID of the user that originally sent the message",
        "from_name": "The name of the user that originally sent the message",
        "imported": "Whether this message was imported from a foreign chat service, click here for more info \u00bb",
        "post_author": "For channels and if signatures are enabled, author of the channel message",
        "psa_type": "PSA type",
        "saved_date": "Only for forwarded messages reforwarded to saved messages \u00bb, indicates when was the original message sent (i.e. if user A sends a message @ unixtime 1, then user B forwards it somewhere @ unixtime 2, then user C saves it to saved messages @ unixtime 3, this field will contain 2, date will contain 1 and the date of the containing message will contain 3).",
        "saved_from_id": "Only for forwarded messages reforwarded to saved messages \u00bb, contains the sender of the original message (i.e. if user A sends a message, then user B forwards it somewhere, then user C saves it to saved messages, this field will contain the ID of user B and from_id will contain the ID of user A).",
        "saved_from_msg_id": "Only for messages forwarded to saved messages \u00bb, contains the original ID of the message in saved_from_peer.",
        "saved_from_name": "Only for forwarded messages from users with forward privacy enabled, sent by users with forward privacy enabled, reforwarded to saved messages \u00bb, contains the sender of the original message (i.e. if user A (fwd privacy enabled) sends a message, then user B (fwd privacy enabled) forwards it somewhere, then user C saves it to saved messages, this field will contain the name of user B and from_name will contain the name of user A).",
        "saved_from_peer": "Only for messages forwarded to saved messages \u00bb, contains the dialog where the message was originally sent.",
        "saved_out": "Only for messages forwarded to saved messages \u00bb, set if the original message was outgoing (though the message may have been originally outgoing even if this flag is not set, if from_id points to the current user)."
      }
    },
    "MessageMediaContact": {
      "desc": "Attached contact.",
      "params": {
        "first_name": "Contact's first name",
        "last_name": "Contact's last name",
        "phone_number": "Phone number",
        "user_id": "User identifier or 0, if the user with the given phone number is not registered",
        "vcard": "VCARD of contact"
      }
    },
    "MessageMediaDice": {
      "desc": "Dice-based animated sticker",
      "params": {
        "emoticon": "The emoji, for now ,  and  are supported",
        "value": "Dice value"
      }
    },
    "MessageMediaDocument": {
      "desc": "Document (video, audio, voice, sticker, any media type except photo)",
      "params": {
        "alt_document": "Currently only used for story videos, may contain an alternative version of the story video, explicitly encoded using H.264 (in MPEG4 transport) at a lower resolution than document.",
        "document": "Attached document",
        "flags": "Flags, see TL conditional fields",
        "nopremium": "Whether this is a normal sticker, if not set this is a premium sticker and a premium sticker animation must be played.",
        "round": "Whether this is a round video.",
        "spoiler": "Whether this media should be hidden behind a spoiler warning",
        "ttl_seconds": "Time to live of self-destructing document",
        "video": "Whether this is a video.",
        "voice": "Whether this is a voice message."
      }
    },
    "MessageMediaEmpty": {
      "desc": "Empty constructor.",
      "params": {}
    },
    "MessageMediaGame": {
      "desc": "Telegram game",
      "params": {
        "game": "Game"
      }
    },
    "MessageMediaGeo": {
      "desc": "Attached map.",
      "params": {
        "geo": "GeoPoint"
      }
    },
    "MessageMediaGeoLive": {
      "desc": "Indicates a live geolocation",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "geo": "Geolocation",
        "heading": "For live locations, a direction in which the location moves, in degrees; 1-360",
        "period": "Validity period of provided geolocation",
        "proximity_notification_radius": "For live locations, a maximum distance to another chat member for proximity alerts, in meters (0-100000)."
      }
    },
    "MessageMediaGiveaway": {
      "desc": "Contains info about a giveaway, see here \u00bb for more info.",
      "params": {
        "channels": "The channels that the user must join to participate in the giveaway.",
        "countries_iso2": "If set, only users residing in these countries can participate in the giveaway, (specified as a list of two-letter ISO 3166-1 alpha-2 country codes); otherwise there are no country-based limitations.",
        "flags": "Flags, see TL conditional fields",
        "months": "Duration in months of each Telegram Premium subscription in the giveaway.",
        "only_new_subscribers": "If set, only new subscribers starting from the giveaway creation date will be able to participate to the giveaway.",
        "prize_description": "Can contain a textual description of additional giveaway prizes.",
        "quantity": "Number of Telegram Premium subscriptions given away.",
        "until_date": "The end date of the giveaway.",
        "winners_are_visible": "If set, giveaway winners are public and will be listed in a messageMediaGiveawayResults message that will be automatically sent to the channel once the giveaway ends."
      }
    },
    "MessageMediaGiveawayResults": {
      "desc": "A giveaway with public winners has finished, this constructor contains info about the winners.",
      "params": {
        "additional_peers_count": "Number of other channels that participated in the giveaway.",
        "channel_id": "ID of the channel that was automatically boosted by the winners of the giveaway for duration of the Premium subscription.",
        "flags": "Flags, see TL conditional fields",
        "launch_msg_id": "Identifier of the message with the giveaway in channel_id.",
        "months": "Duration in months of each Telegram Premium subscription in the giveaway.",
        "only_new_subscribers": "If set, only new subscribers starting from the giveaway creation date participated in the giveaway.",
        "prize_description": "Can contain a textual description of additional giveaway prizes.",
        "refunded": "If set, the giveaway was canceled and was fully refunded.",
        "unclaimed_count": "Number of not-yet-claimed prizes.",
        "until_date": "Point in time (Unix timestamp) when the winners were selected. May be bigger than winners selection date specified in initial parameters of the giveaway.",
        "winners": "Up to 100 user identifiers of the winners of the giveaway.",
        "winners_count": "Total number of winners in the giveaway."
      }
    },
    "MessageMediaInvoice": {
      "desc": "Invoice",
      "params": {
        "currency": "Three-letter ISO 4217 currency code",
        "description": "Product description, 1-255 characters",
        "extended_media": "Extended media",
        "flags": "Flags, see TL conditional fields",
        "photo": "URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.",
        "receipt_msg_id": "Message ID of receipt: if set, clients should change the text of the first keyboardButtonBuy button always attached to the message to a localized version of the word Receipt",
        "shipping_address_requested": "Whether the shipping address was requested",
        "start_param": "Unique bot deep-linking parameter that can be used to generate this invoice",
        "test": "Whether this is an example invoice",
        "title": "Product name, 1-32 characters",
        "total_amount": "Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)."
      }
    },
    "MessageMediaPhoto": {
      "desc": "Attached photo.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "photo": "Photo",
        "spoiler": "Whether this media should be hidden behind a spoiler warning",
        "ttl_seconds": "Time to live in seconds of self-destructing photo"
      }
    },
    "MessageMediaPoll": {
      "desc": "Poll",
      "params": {
        "poll": "The poll",
        "results": "The results of the poll"
      }
    },
    "MessageMediaStory": {
      "desc": "Represents a forwarded story or a story mention.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "id": "Story ID",
        "peer": "Peer that posted the story.",
        "story": "The story itself, if absent fetch it using stories.getStoriesByID and the peer/id parameters specified above.",
        "via_mention": "If set, indicates that this someone has mentioned us in this story (i.e. by tagging us in the description) or vice versa, we have mentioned the other peer (if the message is outgoing)."
      }
    },
    "MessageMediaUnsupported": {
      "desc": "Current version of the client does not support this media type.",
      "params": {}
    },
    "MessageMediaVenue": {
      "desc": "Venue",
      "params": {
        "address": "Address",
        "geo": "Geolocation of venue",
        "provider": "Venue provider: currently only \"foursquare\" and \"gplaces\" (Google Places) need to be supported",
        "title": "Venue name",
        "venue_id": "Venue ID in the provider's database",
        "venue_type": "Venue type in the provider's database"
      }
    },
    "MessageMediaWebPage": {
      "desc": "Preview of webpage",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "force_large_media": "If set, specifies that a large media preview should be used.",
        "force_small_media": "If set, specifies that a small media preview should be used.",
        "manual": "If set, indicates that the URL used for the webpage preview was specified manually using inputMediaWebPage, and may not be related to any of the URLs specified in the message.",
        "safe": "If set, the webpage can be opened directly without user confirmation; otherwise, user confirmation is required, showing the exact URL that will be opened.",
        "webpage": "Webpage preview"
      }
    },
    "MessagePeerReaction": {
      "desc": "How a certain peer reacted to the message",
      "params": {
        "big": "Whether the specified message reaction \u00bb should elicit a bigger and longer reaction",
        "date": "When was this reaction added",
        "flags": "Flags, see TL conditional fields",
        "my": "Starting from layer 159, messages.sendReaction will send reactions from the peer (user or channel) specified using messages.saveDefaultSendAs. If set, this flag indicates that this reaction was sent by us, even if the peer doesn't point to the current account.",
        "peer_id": "Peer that reacted to the message",
        "reaction": "Reaction emoji",
        "unread": "Whether the reaction wasn't yet marked as read by the current user"
      }
    },
    "MessagePeerVote": {
      "desc": "How a peer voted in a poll",
      "params": {
        "date": "When did the peer cast the vote",
        "option": "The option chosen by the peer",
        "peer": "Peer ID"
      }
    },
    "MessagePeerVoteInputOption": {
      "desc": "How a peer voted in a poll (reduced constructor, returned if an option was provided to messages.getPollVotes)",
      "params": {
        "date": "When did the peer cast the vote",
        "peer": "The peer that voted for the queried option"
      }
    },
    "MessagePeerVoteMultiple": {
      "desc": "How a peer voted in a multiple-choice poll",
      "params": {
        "date": "When did the peer cast their votes",
        "options": "Options chosen by the peer",
        "peer": "Peer ID"
      }
    },
    "MessageRange": {
      "desc": "Indicates a range of chat messages",
      "params": {
        "max_id": "End of range (message ID)",
        "min_id": "Start of range (message ID)"
      }
    },
    "MessageReactions": {
      "desc": "Message reactions \u00bb",
      "params": {
        "can_see_list": "Whether messages.getMessageReactionsList can be used to see how each specific peer reacted to the message",
        "flags": "Flags, see TL conditional fields",
        "min": "Similar to min objects, used for message reaction \u00bb constructors that are the same for all users so they don't have the reactions sent by the current user (you can use messages.getMessagesReactions to get the full reaction info).",
        "reactions_as_tags": "",
        "recent_reactions": "List of recent peers and their reactions",
        "results": "Reactions"
      }
    },
    "MessageReplies": {
      "desc": "Info about the comment section of a channel post, or a simple message thread",
      "params": {
        "channel_id": "For channel post comments, contains the ID of the associated discussion supergroup",
        "comments": "Whether this constructor contains information about the comment section of a channel post, or a simple message thread",
        "flags": "Flags, see TL conditional fields",
        "max_id": "ID of the latest message in this thread or comment section.",
        "read_max_id": "Contains the ID of the latest read message in this thread or comment section.",
        "recent_repliers": "For channel post comments, contains information about the last few comment posters for a specific thread, to show a small list of commenter profile pictures in client previews.",
        "replies": "Contains the total number of replies in this thread or comment section.",
        "replies_pts": "PTS of the message that started this thread."
      }
    },
    "MessageReplyHeader": {
      "desc": "Message replies and thread information",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "forum_topic": "Whether this message was sent in a forum topic (except for the General topic).",
        "quote": "Whether this message is quoting a part of another message.",
        "quote_entities": "Message entities for styled text from the quote_text field.",
        "quote_offset": "Offset of the message quote_text within the original message (in UTF-16 code units).",
        "quote_text": "Used to quote-reply to only a certain section (specified here) of the original message.",
        "reply_from": "When replying to a message sent by a certain peer to another chat, contains info about the peer that originally sent the message to that other chat.",
        "reply_media": "When replying to a media sent by a certain peer to another chat, contains the media of the replied-to message.",
        "reply_to_msg_id": "ID of message to which this message is replying",
        "reply_to_peer_id": "For replies sent in channel discussion threads of which the current user is not a member, the discussion group ID",
        "reply_to_scheduled": "This is a reply to a scheduled message.",
        "reply_to_top_id": "ID of the message that started this message thread"
      }
    },
    "MessageReplyStoryHeader": {
      "desc": "Represents a reply to a story",
      "params": {
        "peer": "",
        "story_id": "Story ID"
      }
    },
    "MessageService": {
      "desc": "Indicates a service message",
      "params": {
        "action": "Event connected with the service message",
        "date": "Message date",
        "flags": "Flags, see TL conditional fields",
        "from_id": "ID of the sender of this message",
        "id": "Message ID",
        "legacy": "This is a legacy message: it has to be refetched with the new layer",
        "media_unread": "Whether the message contains unread media",
        "mentioned": "Whether we were mentioned in the message",
        "out": "Whether the message is outgoing",
        "peer_id": "Sender of service message",
        "post": "Whether it's a channel post",
        "reply_to": "Reply (thread) information",
        "silent": "Whether the message is silent",
        "ttl_period": "Time To Live of the message, once message.date+message.ttl_period === time(), the message will be deleted on the server, and must be deleted locally as well."
      }
    },
    "MessageViews": {
      "desc": "View, forward counter + info about replies of a specific message",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "forwards": "Forward count of message",
        "replies": "Reply and thread information of message",
        "views": "View count of message"
      }
    },
    "MissingInvitee": {
      "desc": "{schema}",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "premium_required_for_pm": "",
        "premium_would_allow_invite": "",
        "user_id": ""
      }
    },
    "MyBoost": {
      "desc": "Contains information about a single boost slot \u00bb.",
      "params": {
        "cooldown_until_date": "If peer is set, indicates the (unixtime) date after which this boost can be reassigned to another channel.",
        "date": "When (unixtime) we started boosting the peer, 0 otherwise.",
        "expires": "Indicates the (unixtime) expiration date of the boost in peer (0 if peer is not set).",
        "flags": "Flags, see TL conditional fields",
        "peer": "If set, indicates this slot is currently occupied, i.e. we are boosting this peer.  Note that we can assign multiple boost slots to the same peer.",
        "slot": "Boost slot ID \u00bb"
      }
    },
    "NearestDc": {
      "desc": "Nearest data center, according to geo-ip.",
      "params": {
        "country": "Country code determined by geo-ip",
        "nearest_dc": "Number of nearest data center",
        "this_dc": "Number of current data center"
      }
    },
    "NotificationSoundDefault": {
      "desc": "Indicates the default notification sound should be used",
      "params": {}
    },
    "NotificationSoundLocal": {
      "desc": "Indicates a specific local notification sound should be used",
      "params": {
        "data": "Notification sound identifier (arbitrary data used by the client to identify a specific local notification sound)",
        "title": "Notification sound title"
      }
    },
    "NotificationSoundNone": {
      "desc": "No notification sound should be used",
      "params": {}
    },
    "NotificationSoundRingtone": {
      "desc": "A specific previously uploaded notification sound should be used",
      "params": {
        "id": "Document ID of notification sound uploaded using account.uploadRingtone"
      }
    },
    "NotifyBroadcasts": {
      "desc": "Channel notification settings",
      "params": {}
    },
    "NotifyChats": {
      "desc": "Notifications generated by all groups.",
      "params": {}
    },
    "NotifyForumTopic": {
      "desc": "Notifications generated by a topic in a forum.",
      "params": {
        "peer": "Forum ID",
        "top_msg_id": "Topic ID"
      }
    },
    "NotifyPeer": {
      "desc": "Notifications generated by a certain user or group.",
      "params": {
        "peer": "user or group"
      }
    },
    "NotifyUsers": {
      "desc": "Notifications generated by all users.",
      "params": {}
    },
    "OutboxReadDate": {
      "desc": "{schema}",
      "params": {
        "date": ""
      }
    },
    "Page": {
      "desc": "Instant view page",
      "params": {
        "blocks": "Page elements (like with HTML elements, only as TL constructors)",
        "documents": "Media in page",
        "flags": "Flags, see TL conditional fields",
        "part": "Indicates that not full page preview is available to the client and it will need to fetch full Instant View from the server using messages.getWebPagePreview.",
        "photos": "Photos in page",
        "rtl": "Whether the page contains RTL text",
        "url": "Original page HTTP URL",
        "v2": "Whether this is an IV v2 page",
        "views": "View count"
      }
    },
    "PageBlockAnchor": {
      "desc": "Link to section within the page itself (like <a href=\"#target\">anchor</a>)",
      "params": {
        "name": "Name of target section"
      }
    },
    "PageBlockAudio": {
      "desc": "Audio",
      "params": {
        "audio_id": "Audio ID (to be fetched from the container page constructor",
        "caption": "Audio caption"
      }
    },
    "PageBlockAuthorDate": {
      "desc": "Author and date of creation of article",
      "params": {
        "author": "Author name",
        "published_date": "Date of publication"
      }
    },
    "PageBlockBlockquote": {
      "desc": "Quote (equivalent to the HTML <blockquote>)",
      "params": {
        "caption": "Caption",
        "text": "Quote contents"
      }
    },
    "PageBlockChannel": {
      "desc": "Reference to a telegram channel",
      "params": {
        "channel": "The channel/supergroup/chat"
      }
    },
    "PageBlockCollage": {
      "desc": "Collage of media",
      "params": {
        "caption": "Caption",
        "items": "Media elements"
      }
    },
    "PageBlockCover": {
      "desc": "A page cover",
      "params": {
        "cover": "Cover"
      }
    },
    "PageBlockDetails": {
      "desc": "A collapsible details block",
      "params": {
        "blocks": "Block contents",
        "flags": "Flags, see TL conditional fields",
        "open": "Whether the block is open by default",
        "title": "Always visible heading for the block"
      }
    },
    "PageBlockDivider": {
      "desc": "An empty block separating a page",
      "params": {}
    },
    "PageBlockEmbed": {
      "desc": "An embedded webpage",
      "params": {
        "allow_scrolling": "Whether scrolling should be allowed",
        "caption": "Caption",
        "flags": "Flags, see TL conditional fields",
        "full_width": "Whether the block should be full width",
        "h": "Block height, if known",
        "html": "HTML-markup of the embedded page",
        "poster_photo_id": "Poster photo, if available",
        "url": "Web page URL, if available",
        "w": "Block width, if known"
      }
    },
    "PageBlockEmbedPost": {
      "desc": "An embedded post",
      "params": {
        "author": "Author name",
        "author_photo_id": "ID of the author's photo",
        "blocks": "Post contents",
        "caption": "Caption",
        "date": "Creation date",
        "url": "Web page URL",
        "webpage_id": "ID of generated webpage preview"
      }
    },
    "PageBlockFooter": {
      "desc": "Page footer",
      "params": {
        "text": "Contents"
      }
    },
    "PageBlockHeader": {
      "desc": "Page header",
      "params": {
        "text": "Contents"
      }
    },
    "PageBlockKicker": {
      "desc": "Kicker",
      "params": {
        "text": "Contents"
      }
    },
    "PageBlockList": {
      "desc": "Unordered list of IV blocks",
      "params": {
        "items": "List of blocks in an IV page"
      }
    },
    "PageBlockMap": {
      "desc": "A map",
      "params": {
        "caption": "Caption",
        "geo": "Location of the map center",
        "h": "Map height in pixels before applying scale; 16-1024",
        "w": "Map width in pixels before applying scale; 16-102",
        "zoom": "Map zoom level; 13-20"
      }
    },
    "PageBlockOrderedList": {
      "desc": "Ordered list of IV blocks",
      "params": {
        "items": "List items"
      }
    },
    "PageBlockParagraph": {
      "desc": "A paragraph",
      "params": {
        "text": "Text"
      }
    },
    "PageBlockPhoto": {
      "desc": "A photo",
      "params": {
        "caption": "Caption",
        "flags": "Flags, see TL conditional fields",
        "photo_id": "Photo ID",
        "url": "HTTP URL of page the photo leads to when clicked",
        "webpage_id": "ID of preview of the page the photo leads to when clicked"
      }
    },
    "PageBlockPreformatted": {
      "desc": "Preformatted (<pre> text)",
      "params": {
        "language": "Programming language of preformatted text",
        "text": "Text"
      }
    },
    "PageBlockPullquote": {
      "desc": "Pullquote",
      "params": {
        "caption": "Caption",
        "text": "Text"
      }
    },
    "PageBlockRelatedArticles": {
      "desc": "Related articles",
      "params": {
        "articles": "Related articles",
        "title": "Title"
      }
    },
    "PageBlockSlideshow": {
      "desc": "Slideshow",
      "params": {
        "caption": "Caption",
        "items": "Slideshow items"
      }
    },
    "PageBlockSubheader": {
      "desc": "Subheader",
      "params": {
        "text": "Subheader"
      }
    },
    "PageBlockSubtitle": {
      "desc": "Subtitle",
      "params": {
        "text": "Text"
      }
    },
    "PageBlockTable": {
      "desc": "Table",
      "params": {
        "bordered": "Does the table have a visible border?",
        "flags": "Flags, see TL conditional fields",
        "rows": "Table rows",
        "striped": "Is the table striped?",
        "title": "Title"
      }
    },
    "PageBlockTitle": {
      "desc": "Title",
      "params": {
        "text": "Title"
      }
    },
    "PageBlockUnsupported": {
      "desc": "Unsupported IV element",
      "params": {}
    },
    "PageBlockVideo": {
      "desc": "Video",
      "params": {
        "autoplay": "Whether the video is set to autoplay",
        "caption": "Caption",
        "flags": "Flags, see TL conditional fields",
        "loop": "Whether the video is set to loop",
        "video_id": "Video ID"
      }
    },
    "PageCaption": {
      "desc": "Page caption",
      "params": {
        "credit": "Credits",
        "text": "Caption"
      }
    },
    "PageListItemBlocks": {
      "desc": "List item",
      "params": {
        "blocks": "Blocks"
      }
    },
    "PageListItemText": {
      "desc": "List item",
      "params": {
        "text": "Text"
      }
    },
    "PageListOrderedItemBlocks": {
      "desc": "Ordered list of IV blocks",
      "params": {
        "blocks": "Item contents",
        "num": "Number of element within ordered list"
      }
    },
    "PageListOrderedItemText": {
      "desc": "Ordered list of text items",
      "params": {
        "num": "Number of element within ordered list",
        "text": "Text"
      }
    },
    "PageRelatedArticle": {
      "desc": "Related article",
      "params": {
        "author": "Author name",
        "description": "Description",
        "flags": "Flags, see TL conditional fields",
        "photo_id": "ID of preview photo",
        "published_date": "Date of publication",
        "title": "Title",
        "url": "URL of article",
        "webpage_id": "Webpage ID of generated IV preview"
      }
    },
    "PageTableCell": {
      "desc": "Table cell",
      "params": {
        "align_center": "Horizontally centered block",
        "align_right": "Right-aligned block",
        "colspan": "For how many columns should this cell extend",
        "flags": "Flags, see TL conditional fields",
        "header": "Is this element part of the column header",
        "rowspan": "For how many rows should this cell extend",
        "text": "Content",
        "valign_bottom": "Block vertically-aligned to the bottom",
        "valign_middle": "Vertically centered block"
      }
    },
    "PageTableRow": {
      "desc": "Table row",
      "params": {
        "cells": "Table cells"
      }
    },
    "PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow": {
      "desc": "This key derivation algorithm defines that SRP 2FA login must be used",
      "params": {
        "g": "Base (see SRP 2FA login)",
        "p": "2048-bit modulus (see SRP 2FA login)",
        "salt1": "One of two salts used by the derivation function (see SRP 2FA login)",
        "salt2": "One of two salts used by the derivation function (see SRP 2FA login)"
      }
    },
    "PasswordKdfAlgoUnknown": {
      "desc": "Unknown KDF (most likely, the client is outdated and does not support the specified KDF algorithm)",
      "params": {}
    },
    "PaymentCharge": {
      "desc": "Payment identifier",
      "params": {
        "id": "Telegram payment identifier",
        "provider_charge_id": "Provider payment identifier"
      }
    },
    "PaymentFormMethod": {
      "desc": "Represents an additional payment method",
      "params": {
        "title": "Payment method description",
        "url": "URL to open in a webview to process the payment"
      }
    },
    "PaymentRequestedInfo": {
      "desc": "Order info provided by the user",
      "params": {
        "email": "User's email address",
        "flags": "Flags, see TL conditional fields",
        "name": "User's full name",
        "phone": "User's phone number",
        "shipping_address": "User's shipping address"
      }
    },
    "PaymentSavedCredentialsCard": {
      "desc": "Saved credit card",
      "params": {
        "id": "Card ID",
        "title": "Title"
      }
    },
    "PeerBlocked": {
      "desc": "Information about a blocked peer",
      "params": {
        "date": "When was the peer blocked",
        "peer_id": "Peer ID"
      }
    },
    "PeerChannel": {
      "desc": "Channel/supergroup",
      "params": {
        "channel_id": "Channel ID"
      }
    },
    "PeerChat": {
      "desc": "Group.",
      "params": {
        "chat_id": "Group identifier"
      }
    },
    "PeerColor": {
      "desc": "Represents a color palette \u00bb.",
      "params": {
        "background_emoji_id": "Optional custom emoji ID used to generate the pattern.",
        "color": "Color palette ID, see here \u00bb for more info; if not set, the default palette should be used.",
        "flags": "Flags, see TL conditional fields"
      }
    },
    "PeerLocated": {
      "desc": "Peer geolocated nearby",
      "params": {
        "distance": "Distance from the peer in meters",
        "expires": "Validity period of current data",
        "peer": "Peer"
      }
    },
    "PeerNotifySettings": {
      "desc": "Notification settings.",
      "params": {
        "android_sound": "Notification sound for the official android application",
        "flags": "Flags, see TL conditional fields",
        "ios_sound": "Notification sound for the official iOS application",
        "mute_until": "Mute all notifications until this date",
        "other_sound": "Notification sound for other applications",
        "show_previews": "(Ternary value) If set, indicates whether or not to display previews of messages in notifications; otherwise the default behavior should be used.",
        "silent": "(Ternary value) If set, indicates whether to mute or unmute the peer; otherwise the default behavior should be used.",
        "stories_android_sound": "Sound for story notifications on the official Android application",
        "stories_hide_sender": "Whether the sender name should be displayed in story notifications.",
        "stories_ios_sound": "Sound for story notifications on the official iOS application",
        "stories_muted": "Whether story notifications should be disabled.",
        "stories_other_sound": "Sound for story notifications on other applications"
      }
    },
    "PeerSelfLocated": {
      "desc": "Current peer",
      "params": {
        "expires": "Expiry of geolocation info for current peer"
      }
    },
    "PeerSettings": {
      "desc": "List of actions that are possible when interacting with this user, to be shown as suggested actions in the chat action bar \u00bb, see here \u00bb for more info.",
      "params": {
        "add_contact": "Whether we can add the user as contact",
        "autoarchived": "Whether this peer was automatically archived according to privacy settings and can be unarchived",
        "block_contact": "Whether we can block the user",
        "business_bot_can_reply": "",
        "business_bot_id": "",
        "business_bot_manage_url": "",
        "business_bot_paused": "",
        "flags": "Flags, see TL conditional fields",
        "geo_distance": "Distance in meters between us and this peer",
        "invite_members": "If set, this is a recently created group chat to which new members can be invited",
        "need_contacts_exception": "Whether a special exception for contacts is needed",
        "report_geo": "Whether we can report a geogroup as irrelevant for this location",
        "report_spam": "Whether we can still report the user for spam",
        "request_chat_broadcast": "This flag is set if request_chat_title and request_chat_date fields are set and the join request \u00bb is related to a channel (otherwise if only the request fields are set, the join request \u00bb is related to a chat).",
        "request_chat_date": "If set, this is a private chat with an administrator of a chat or channel to which the user sent a join request, and this field contains the timestamp when the join request \u00bb was sent.",
        "request_chat_title": "If set, this is a private chat with an administrator of a chat or channel to which the user sent a join request, and this field contains the chat/channel's title.",
        "share_contact": "Whether we can share the user's contact"
      }
    },
    "PeerStories": {
      "desc": "Stories associated to a peer",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "max_read_id": "If set, contains the ID of the maximum read story",
        "peer": "The peer",
        "stories": "Stories"
      }
    },
    "PeerUser": {
      "desc": "Chat partner",
      "params": {
        "user_id": "User identifier"
      }
    },
    "PhoneCall": {
      "desc": "Phone call",
      "params": {
        "access_hash": "Access hash",
        "admin_id": "User ID of the creator of the call",
        "connections": "List of endpoints the user can connect to to exchange call data",
        "custom_parameters": "",
        "date": "Date of creation of the call",
        "flags": "Flags, see TL conditional fields",
        "g_a_or_b": "Parameter for key exchange",
        "id": "Call ID",
        "key_fingerprint": "Key fingerprint",
        "p2p_allowed": "Whether P2P connection to the other peer is allowed",
        "participant_id": "User ID of the other participant in the call",
        "protocol": "Call protocol info to be passed to libtgvoip",
        "start_date": "When was the call actually started",
        "video": "Whether this is a video call"
      }
    },
    "PhoneCallAccepted": {
      "desc": "An accepted phone call",
      "params": {
        "access_hash": "Access hash of phone call",
        "admin_id": "ID of the call creator",
        "date": "When was the call accepted",
        "flags": "Flags, see TL conditional fields",
        "g_b": "B parameter for secure E2E phone call key exchange",
        "id": "ID of accepted phone call",
        "participant_id": "ID of the other user in the call",
        "protocol": "Protocol to use for phone call",
        "video": "Whether this is a video call"
      }
    },
    "PhoneCallDiscardReasonBusy": {
      "desc": "The phone call was discarded because the user is busy in another call",
      "params": {}
    },
    "PhoneCallDiscardReasonDisconnect": {
      "desc": "The phone call was disconnected",
      "params": {}
    },
    "PhoneCallDiscardReasonHangup": {
      "desc": "The phone call was ended normally",
      "params": {}
    },
    "PhoneCallDiscardReasonMissed": {
      "desc": "The phone call was missed",
      "params": {}
    },
    "PhoneCallDiscarded": {
      "desc": "Indicates a discarded phone call",
      "params": {
        "duration": "Duration of the phone call in seconds",
        "flags": "Flags, see TL conditional fields",
        "id": "Call ID",
        "need_debug": "Whether the server required the client to send the libtgvoip call debug data",
        "need_rating": "Whether the server required the user to rate the call",
        "reason": "Why was the phone call discarded",
        "video": "Whether the call was a video call"
      }
    },
    "PhoneCallEmpty": {
      "desc": "Empty constructor",
      "params": {
        "id": "Call ID"
      }
    },
    "PhoneCallProtocol": {
      "desc": "Protocol info for libtgvoip",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "library_versions": "When using phone.requestCall and phone.acceptCall, specify all library versions supported by the client. The server will merge and choose the best library version supported by both peers, returning only the best value in the result of the callee's phone.acceptCall and in the phoneCallAccepted update received by the caller.",
        "max_layer": "Maximum layer for remote libtgvoip",
        "min_layer": "Minimum layer for remote libtgvoip",
        "udp_p2p": "Whether to allow P2P connection to the other participant",
        "udp_reflector": "Whether to allow connection to the other participants through the reflector servers"
      }
    },
    "PhoneCallRequested": {
      "desc": "Requested phone call",
      "params": {
        "access_hash": "Access hash",
        "admin_id": "ID of the creator of the phone call",
        "date": "When was the phone call created",
        "flags": "Flags, see TL conditional fields",
        "g_a_hash": "Parameter for key exchange",
        "id": "Phone call ID",
        "participant_id": "ID of the other participant of the phone call",
        "protocol": "Call protocol info to be passed to libtgvoip",
        "video": "Whether this is a video call"
      }
    },
    "PhoneCallWaiting": {
      "desc": "Incoming phone call",
      "params": {
        "access_hash": "Access hash",
        "admin_id": "Admin ID",
        "date": "Date",
        "flags": "Flags, see TL conditional fields",
        "id": "Call ID",
        "participant_id": "Participant ID",
        "protocol": "Phone call protocol info",
        "receive_date": "When was the phone call received",
        "video": "Is this a video call"
      }
    },
    "PhoneConnection": {
      "desc": "Identifies an endpoint that can be used to connect to the other user in a phone call",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "id": "Endpoint ID",
        "ip": "IP address of endpoint",
        "ipv6": "IPv6 address of endpoint",
        "peer_tag": "Our peer tag",
        "port": "Port ID",
        "tcp": "Whether TCP should be used"
      }
    },
    "PhoneConnectionWebrtc": {
      "desc": "WebRTC connection parameters",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "id": "Endpoint ID",
        "ip": "IP address",
        "ipv6": "IPv6 address",
        "password": "Password",
        "port": "Port",
        "stun": "Whether this is a STUN endpoint",
        "turn": "Whether this is a TURN endpoint",
        "username": "Username"
      }
    },
    "Photo": {
      "desc": "Photo",
      "params": {
        "access_hash": "Access hash",
        "date": "Date of upload",
        "dc_id": "DC ID to use for download",
        "file_reference": "file reference",
        "flags": "Flags, see TL conditional fields",
        "has_stickers": "Whether the photo has mask stickers attached to it",
        "id": "ID",
        "sizes": "Available sizes for download",
        "video_sizes": "For animated profiles, the MPEG4 videos"
      }
    },
    "PhotoCachedSize": {
      "desc": "Description of an image and its content.",
      "params": {
        "bytes": "Binary data, file content",
        "h": "Image height",
        "type": "Thumbnail type",
        "w": "Image width"
      }
    },
    "PhotoEmpty": {
      "desc": "Empty constructor, non-existent photo",
      "params": {
        "id": "Photo identifier"
      }
    },
    "PhotoPathSize": {
      "desc": "Messages with animated stickers can have a compressed svg (< 300 bytes) to show the outline of the sticker before fetching the actual lottie animation.",
      "params": {
        "bytes": "Compressed SVG path payload, see here for decompression instructions",
        "type": "Always j"
      }
    },
    "PhotoSize": {
      "desc": "Image description.",
      "params": {
        "h": "Image height",
        "size": "File size",
        "type": "Thumbnail type \u00bb",
        "w": "Image width"
      }
    },
    "PhotoSizeEmpty": {
      "desc": "Empty constructor. Image with this thumbnail is unavailable.",
      "params": {
        "type": "Thumbnail type \u00bb"
      }
    },
    "PhotoSizeProgressive": {
      "desc": "Progressively encoded photosize",
      "params": {
        "h": "Photo height",
        "sizes": "Sizes of progressive JPEG file prefixes, which can be used to preliminarily show the image.",
        "type": "Photosize type \u00bb",
        "w": "Photo width"
      }
    },
    "PhotoStrippedSize": {
      "desc": "A low-resolution compressed JPG payload",
      "params": {
        "bytes": "Thumbnail data, see here for more info on decompression \u00bb",
        "type": "Thumbnail type"
      }
    },
    "Poll": {
      "desc": "Poll",
      "params": {
        "answers": "The possible answers, vote using messages.sendVote.",
        "close_date": "Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future; can't be used together with close_period.",
        "close_period": "Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with close_date.",
        "closed": "Whether the poll is closed and doesn't accept any more answers",
        "flags": "Flags, see TL conditional fields",
        "id": "ID of the poll",
        "multiple_choice": "Whether multiple options can be chosen as answer",
        "public_voters": "Whether cast votes are publicly visible to all users (non-anonymous poll)",
        "question": "The question of the poll",
        "quiz": "Whether this is a quiz (with wrong and correct answers, results shown in the return type)"
      }
    },
    "PollAnswer": {
      "desc": "A possible answer of a poll",
      "params": {
        "option": "The param that has to be passed to messages.sendVote.",
        "text": "Textual representation of the answer"
      }
    },
    "PollAnswerVoters": {
      "desc": "A poll answer, and how users voted on it",
      "params": {
        "chosen": "Whether we have chosen this answer",
        "correct": "For quizzes, whether the option we have chosen is correct",
        "flags": "Flags, see TL conditional fields",
        "option": "The param that has to be passed to messages.sendVote.",
        "voters": "How many users voted for this option"
      }
    },
    "PollResults": {
      "desc": "Results of poll",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "min": "Similar to min objects, used for poll constructors that are the same for all users so they don't have the option chosen by the current user (you can use messages.getPollResults to get the full poll results).",
        "recent_voters": "IDs of the last users that recently voted in the poll",
        "results": "Poll results",
        "solution": "Explanation of quiz solution",
        "solution_entities": "Message entities for styled text in quiz solution",
        "total_voters": "Total number of people that voted in the poll"
      }
    },
    "PopularContact": {
      "desc": "Popular contact",
      "params": {
        "client_id": "Contact identifier",
        "importers": "How many people imported this contact"
      }
    },
    "PostAddress": {
      "desc": "Shipping address",
      "params": {
        "city": "City",
        "country_iso2": "ISO 3166-1 alpha-2 country code",
        "post_code": "Address post code",
        "state": "State, if applicable (empty otherwise)",
        "street_line1": "First line for the address",
        "street_line2": "Second line for the address"
      }
    },
    "PostInteractionCountersMessage": {
      "desc": "Interaction counters for a message.",
      "params": {
        "forwards": "Number of forwards to public channels",
        "msg_id": "Message ID",
        "reactions": "Number of reactions",
        "views": "Number of views"
      }
    },
    "PostInteractionCountersStory": {
      "desc": "Interaction counters for a story.",
      "params": {
        "forwards": "Number of forwards and reposts to public chats and channels",
        "reactions": "Number of reactions",
        "story_id": "Story ID",
        "views": "Number of views"
      }
    },
    "PremiumGiftCodeOption": {
      "desc": "Contains info about a giveaway/gift option.",
      "params": {
        "amount": "Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).",
        "currency": "Three-letter ISO 4217 currency code",
        "flags": "Flags, see TL conditional fields",
        "months": "Duration in months of each gifted Telegram Premium subscription.",
        "store_product": "Identifier of the store product associated with the option, official apps only.",
        "store_quantity": "Number of times the store product must be paid",
        "users": "Number of users which will be able to activate the gift codes."
      }
    },
    "PremiumGiftOption": {
      "desc": "Telegram Premium gift option",
      "params": {
        "amount": "Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).",
        "bot_url": "An invoice deep link \u00bb to an invoice for in-app payment, using the official Premium bot; may be empty if direct payment isn't available.",
        "currency": "Three-letter ISO 4217 currency code",
        "flags": "Flags, see TL conditional fields",
        "months": "Duration of gifted Telegram Premium subscription",
        "store_product": "An identifier for the App Store/Play Store product associated with the Premium gift."
      }
    },
    "PremiumSubscriptionOption": {
      "desc": "Describes a Telegram Premium subscription option",
      "params": {
        "amount": "Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).",
        "bot_url": "Deep link used to initiate payment",
        "can_purchase_upgrade": "Whether this subscription option can be used to upgrade the existing Telegram Premium subscription. When upgrading Telegram Premium subscriptions bought through stores, make sure that the store transaction ID is equal to transaction, to avoid upgrading someone else's account, if the client is currently logged into multiple accounts.",
        "currency": "Three-letter ISO 4217 currency code",
        "current": "Whether this subscription option is currently in use.",
        "flags": "Flags, see TL conditional fields",
        "months": "Duration of subscription in months",
        "store_product": "Store product ID, only for official apps",
        "transaction": "Identifier of the last in-store transaction for the currently used subscription on the current account."
      }
    },
    "PrepaidGiveaway": {
      "desc": "Contains info about a prepaid giveaway \u00bb.",
      "params": {
        "date": "Payment date.",
        "id": "Prepaid giveaway ID.",
        "months": "Duration in months of each gifted Telegram Premium subscription.",
        "quantity": "Number of given away Telegram Premium subscriptions."
      }
    },
    "PrivacyKeyAbout": {
      "desc": "Whether people can see your bio",
      "params": {}
    },
    "PrivacyKeyAddedByPhone": {
      "desc": "Whether this user can be added to our contact list by their phone number",
      "params": {}
    },
    "PrivacyKeyBirthday": {
      "desc": "{schema}",
      "params": {}
    },
    "PrivacyKeyChatInvite": {
      "desc": "Whether the user can be invited to chats",
      "params": {}
    },
    "PrivacyKeyForwards": {
      "desc": "Whether messages forwarded from the user will be anonymously forwarded",
      "params": {}
    },
    "PrivacyKeyPhoneCall": {
      "desc": "Whether the user accepts phone calls",
      "params": {}
    },
    "PrivacyKeyPhoneNumber": {
      "desc": "Whether the user allows us to see his phone number",
      "params": {}
    },
    "PrivacyKeyPhoneP2P": {
      "desc": "Whether P2P connections in phone calls with this user are allowed",
      "params": {}
    },
    "PrivacyKeyProfilePhoto": {
      "desc": "Whether the profile picture of the user is visible",
      "params": {}
    },
    "PrivacyKeyStatusTimestamp": {
      "desc": "Whether we can see the last online timestamp of this user",
      "params": {}
    },
    "PrivacyKeyVoiceMessages": {
      "desc": "Whether the user accepts voice messages",
      "params": {}
    },
    "PrivacyValueAllowAll": {
      "desc": "Allow all users",
      "params": {}
    },
    "PrivacyValueAllowChatParticipants": {
      "desc": "Allow all participants of certain chats",
      "params": {
        "chats": "Allowed chats"
      }
    },
    "PrivacyValueAllowCloseFriends": {
      "desc": "Allow only close friends \u00bb",
      "params": {}
    },
    "PrivacyValueAllowContacts": {
      "desc": "Allow all contacts",
      "params": {}
    },
    "PrivacyValueAllowPremium": {
      "desc": "{schema}",
      "params": {}
    },
    "PrivacyValueAllowUsers": {
      "desc": "Allow only certain users",
      "params": {
        "users": "Allowed users"
      }
    },
    "PrivacyValueDisallowAll": {
      "desc": "Disallow all users",
      "params": {}
    },
    "PrivacyValueDisallowChatParticipants": {
      "desc": "Disallow only participants of certain chats",
      "params": {
        "chats": "Disallowed chats"
      }
    },
    "PrivacyValueDisallowContacts": {
      "desc": "Disallow only contacts",
      "params": {}
    },
    "PrivacyValueDisallowUsers": {
      "desc": "Disallow only certain users",
      "params": {
        "users": "Disallowed users"
      }
    },
    "PublicForwardMessage": {
      "desc": "Contains info about a forward of a story as a message.",
      "params": {
        "message": "Info about the message with the reposted story."
      }
    },
    "PublicForwardStory": {
      "desc": "Contains info about a forward of a story as a repost by a public channel.",
      "params": {
        "peer": "The channel that reposted the story.",
        "story": "The reposted story (may be different from the original story)."
      }
    },
    "QuickReply": {
      "desc": "{schema}",
      "params": {
        "count": "",
        "shortcut": "",
        "shortcut_id": "",
        "top_message": ""
      }
    },
    "ReactionCount": {
      "desc": "Reactions",
      "params": {
        "chosen_order": "If set, indicates that the current user also sent this reaction. The integer value indicates when was the reaction added: the bigger the value, the newer the reaction.",
        "count": "Number of users that reacted with this emoji.",
        "flags": "Flags, see TL conditional fields",
        "reaction": "The reaction."
      }
    },
    "ReactionCustomEmoji": {
      "desc": "Custom emoji message reaction",
      "params": {
        "document_id": "Custom emoji document ID"
      }
    },
    "ReactionEmoji": {
      "desc": "Normal emoji message reaction",
      "params": {
        "emoticon": "Emoji"
      }
    },
    "ReactionEmpty": {
      "desc": "No reaction",
      "params": {}
    },
    "ReactionNotificationsFromAll": {
      "desc": "{schema}",
      "params": {}
    },
    "ReactionNotificationsFromContacts": {
      "desc": "{schema}",
      "params": {}
    },
    "ReactionsNotifySettings": {
      "desc": "{schema}",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "messages_notify_from": "",
        "show_previews": "",
        "sound": "",
        "stories_notify_from": ""
      }
    },
    "ReadParticipantDate": {
      "desc": "Contains info about when a certain participant has read a message",
      "params": {
        "date": "When the user read the message",
        "user_id": "User ID"
      }
    },
    "ReceivedNotifyMessage": {
      "desc": "Message ID, for which PUSH-notifications were cancelled.",
      "params": {
        "flags": "Reserved for future use",
        "id": "Message ID, for which PUSH-notifications were canceled"
      }
    },
    "RecentMeUrlChat": {
      "desc": "Recent t.me link to a chat",
      "params": {
        "chat_id": "Chat ID",
        "url": "t.me URL"
      }
    },
    "RecentMeUrlChatInvite": {
      "desc": "Recent t.me invite link to a chat",
      "params": {
        "chat_invite": "Chat invitation",
        "url": "t.me URL"
      }
    },
    "RecentMeUrlStickerSet": {
      "desc": "Recent t.me stickerset installation URL",
      "params": {
        "set": "Stickerset",
        "url": "t.me URL"
      }
    },
    "RecentMeUrlUnknown": {
      "desc": "Unknown t.me url",
      "params": {
        "url": "URL"
      }
    },
    "RecentMeUrlUser": {
      "desc": "Recent t.me link to a user",
      "params": {
        "url": "URL",
        "user_id": "User ID"
      }
    },
    "ReplyInlineMarkup": {
      "desc": "Bot or inline keyboard",
      "params": {
        "rows": "Bot or inline keyboard rows"
      }
    },
    "ReplyKeyboardForceReply": {
      "desc": "Force the user to send a reply",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "placeholder": "The placeholder to be shown in the input field when the keyboard is active; 1-64 characters.",
        "selective": "Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply_to_message_id), sender of the original message. Example: A user requests to change the bot's language, bot replies to the request with a keyboard to select the new language. Other users in the group don't see the keyboard.",
        "single_use": "Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat \u2013 the user can press a special button in the input field to see the custom keyboard again."
      }
    },
    "ReplyKeyboardHide": {
      "desc": "Hide sent bot keyboard",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "selective": "Use this flag if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply_to_message_id), sender of the original message.Example: A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven't voted yet"
      }
    },
    "ReplyKeyboardMarkup": {
      "desc": "Bot keyboard",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "persistent": "Requests clients to always show the keyboard when the regular keyboard is hidden.",
        "placeholder": "The placeholder to be shown in the input field when the keyboard is active; 1-64 characters.",
        "resize": "Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). If not set, the custom keyboard is always of the same height as the app's standard keyboard.",
        "rows": "Button row",
        "selective": "Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply_to_message_id), sender of the original message.Example: A user requests to change the bot's language, bot replies to the request with a keyboard to select the new language. Other users in the group don't see the keyboard.",
        "single_use": "Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat \u2013 the user can press a special button in the input field to see the custom keyboard again."
      }
    },
    "RequestPeerTypeBroadcast": {
      "desc": "Choose a channel",
      "params": {
        "bot_admin_rights": "If specified, allows only choosing channels where the bot is an admin with at least the specified admin rights.",
        "creator": "Whether to allow only choosing channels that were created by the current user.",
        "flags": "Flags, see TL conditional fields",
        "has_username": "If specified, allows only choosing channels with or without a username, according to the value of Bool.",
        "user_admin_rights": "If specified, allows only choosing channels where the current user is an admin with at least the specified admin rights."
      }
    },
    "RequestPeerTypeChat": {
      "desc": "Choose a chat or supergroup",
      "params": {
        "bot_admin_rights": "If specified, allows only choosing chats or supergroups where the bot is an admin with at least the specified admin rights.",
        "bot_participant": "Whether to allow only choosing chats or supergroups where the bot is a participant.",
        "creator": "Whether to allow only choosing chats or supergroups that were created by the current user.",
        "flags": "Flags, see TL conditional fields",
        "forum": "If specified, allows only choosing chats or supergroups that are or aren't forums, according to the value of Bool.",
        "has_username": "If specified, allows only choosing channels with or without a username, according to the value of Bool.",
        "user_admin_rights": "If specified, allows only choosing chats or supergroups where the current user is an admin with at least the specified admin rights."
      }
    },
    "RequestPeerTypeUser": {
      "desc": "Choose a user.",
      "params": {
        "bot": "Whether to allow choosing only bots.",
        "flags": "Flags, see TL conditional fields",
        "premium": "Whether to allow choosing only Premium users."
      }
    },
    "RequestedPeerChannel": {
      "desc": "{schema}",
      "params": {
        "channel_id": "",
        "flags": "Flags, see TL conditional fields",
        "photo": "",
        "title": "",
        "username": ""
      }
    },
    "RequestedPeerChat": {
      "desc": "{schema}",
      "params": {
        "chat_id": "",
        "flags": "Flags, see TL conditional fields",
        "photo": "",
        "title": ""
      }
    },
    "RequestedPeerUser": {
      "desc": "{schema}",
      "params": {
        "first_name": "",
        "flags": "Flags, see TL conditional fields",
        "last_name": "",
        "photo": "",
        "user_id": "",
        "username": ""
      }
    },
    "RestrictionReason": {
      "desc": "Restriction reason.",
      "params": {
        "platform": "Platform identifier (ios, android, wp, all, etc.), can be concatenated with a dash as separator (android-ios, ios-wp, etc)",
        "reason": "Restriction reason (porno, terms, etc.)",
        "text": "Error message to be shown to the user"
      }
    },
    "SavedDialog": {
      "desc": "Represents a saved dialog \u00bb.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "peer": "The dialog",
        "pinned": "Is the dialog pinned",
        "top_message": "The latest message ID"
      }
    },
    "SavedPhoneContact": {
      "desc": "Saved contact",
      "params": {
        "date": "Date added",
        "first_name": "First name",
        "last_name": "Last name",
        "phone": "Phone number"
      }
    },
    "SavedReactionTag": {
      "desc": "{schema}",
      "params": {
        "count": "",
        "flags": "Flags, see TL conditional fields",
        "reaction": "",
        "title": ""
      }
    },
    "SearchResultPosition": {
      "desc": "Information about a message in a specific position",
      "params": {
        "date": "When was the message sent",
        "msg_id": "Message ID",
        "offset": "0-based message position in the full list of suitable messages"
      }
    },
    "SearchResultsCalendarPeriod": {
      "desc": "Information about found messages sent on a specific day, used to split the messages in messages.searchResultsCalendar constructors by days.",
      "params": {
        "count": "All messages that were sent on this day.",
        "date": "The day this object is referring to.",
        "max_msg_id": "Last message ID that was sent on this day.",
        "min_msg_id": "First message ID that was sent on this day."
      }
    },
    "SecureCredentialsEncrypted": {
      "desc": "Encrypted credentials required to decrypt telegram passport data.",
      "params": {
        "data": "Encrypted JSON-serialized data with unique user's payload, data hashes and secrets required for EncryptedPassportElement decryption and authentication, as described in decrypting data \u00bb",
        "hash": "Data hash for data authentication as described in decrypting data \u00bb",
        "secret": "Secret, encrypted with the bot's public RSA key, required for data decryption as described in decrypting data \u00bb"
      }
    },
    "SecureData": {
      "desc": "Secure passport data, for more info see the passport docs \u00bb",
      "params": {
        "data": "Data",
        "data_hash": "Data hash",
        "secret": "Secret"
      }
    },
    "SecureFile": {
      "desc": "Secure passport file, for more info see the passport docs \u00bb",
      "params": {
        "access_hash": "Access hash",
        "date": "Date of upload",
        "dc_id": "DC ID",
        "file_hash": "File hash",
        "id": "ID",
        "secret": "Secret",
        "size": "File size"
      }
    },
    "SecureFileEmpty": {
      "desc": "Empty constructor",
      "params": {}
    },
    "SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000": {
      "desc": "PBKDF2 with SHA512 and 100000 iterations KDF algo",
      "params": {
        "salt": "Salt"
      }
    },
    "SecurePasswordKdfAlgoSHA512": {
      "desc": "SHA512 KDF algo",
      "params": {
        "salt": "Salt"
      }
    },
    "SecurePasswordKdfAlgoUnknown": {
      "desc": "Unknown KDF algo (most likely the client has to be updated)",
      "params": {}
    },
    "SecurePlainEmail": {
      "desc": "Email address to use in telegram passport: it must be verified, first \u00bb.",
      "params": {
        "email": "Email address"
      }
    },
    "SecurePlainPhone": {
      "desc": "Phone number to use in telegram passport: it must be verified, first \u00bb.",
      "params": {
        "phone": "Phone number"
      }
    },
    "SecureRequiredType": {
      "desc": "Required type",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "native_names": "Native names",
        "selfie_required": "Is a selfie required",
        "translation_required": "Is a translation required",
        "type": "Secure value type"
      }
    },
    "SecureRequiredTypeOneOf": {
      "desc": "One of",
      "params": {
        "types": "Secure required value types"
      }
    },
    "SecureSecretSettings": {
      "desc": "Secure settings",
      "params": {
        "secure_algo": "Secure KDF algo",
        "secure_secret": "Secure secret",
        "secure_secret_id": "Secret ID"
      }
    },
    "SecureValue": {
      "desc": "Secure value",
      "params": {
        "data": "Encrypted Telegram Passport element data",
        "files": "Array of encrypted passport files with photos the of the documents",
        "flags": "Flags, see TL conditional fields",
        "front_side": "Encrypted passport file with the front side of the document",
        "hash": "Data hash",
        "plain_data": "Plaintext verified passport data",
        "reverse_side": "Encrypted passport file with the reverse side of the document",
        "selfie": "Encrypted passport file with a selfie of the user holding the document",
        "translation": "Array of encrypted passport files with translated versions of the provided documents",
        "type": "Secure passport value type"
      }
    },
    "SecureValueError": {
      "desc": "Secure value error",
      "params": {
        "hash": "Hash",
        "text": "Error message",
        "type": "Type of element which has the issue"
      }
    },
    "SecureValueErrorData": {
      "desc": "Represents an issue in one of the data fields that was provided by the user. The error is considered resolved when the field's value changes.",
      "params": {
        "data_hash": "Data hash",
        "field": "Name of the data field which has the error",
        "text": "Error message",
        "type": "The section of the user's Telegram Passport which has the error, one of secureValueTypePersonalDetails, secureValueTypePassport, secureValueTypeDriverLicense, secureValueTypeIdentityCard, secureValueTypeInternalPassport, secureValueTypeAddress"
      }
    },
    "SecureValueErrorFile": {
      "desc": "Represents an issue with a document scan. The error is considered resolved when the file with the document scan changes.",
      "params": {
        "file_hash": "File hash",
        "text": "Error message",
        "type": "One of secureValueTypeUtilityBill, secureValueTypeBankStatement, secureValueTypeRentalAgreement, secureValueTypePassportRegistration, secureValueTypeTemporaryRegistration"
      }
    },
    "SecureValueErrorFiles": {
      "desc": "Represents an issue with a list of scans. The error is considered resolved when the list of files containing the scans changes.",
      "params": {
        "file_hash": "File hash",
        "text": "Error message",
        "type": "One of secureValueTypeUtilityBill, secureValueTypeBankStatement, secureValueTypeRentalAgreement, secureValueTypePassportRegistration, secureValueTypeTemporaryRegistration"
      }
    },
    "SecureValueErrorFrontSide": {
      "desc": "Represents an issue with the front side of a document. The error is considered resolved when the file with the front side of the document changes.",
      "params": {
        "file_hash": "File hash",
        "text": "Error message",
        "type": "One of secureValueTypePassport, secureValueTypeDriverLicense, secureValueTypeIdentityCard, secureValueTypeInternalPassport"
      }
    },
    "SecureValueErrorReverseSide": {
      "desc": "Represents an issue with the reverse side of a document. The error is considered resolved when the file with reverse side of the document changes.",
      "params": {
        "file_hash": "File hash",
        "text": "Error message",
        "type": "One of secureValueTypeDriverLicense, secureValueTypeIdentityCard"
      }
    },
    "SecureValueErrorSelfie": {
      "desc": "Represents an issue with the selfie with a document. The error is considered resolved when the file with the selfie changes.",
      "params": {
        "file_hash": "File hash",
        "text": "Error message",
        "type": "One of secureValueTypePassport, secureValueTypeDriverLicense, secureValueTypeIdentityCard, secureValueTypeInternalPassport"
      }
    },
    "SecureValueErrorTranslationFile": {
      "desc": "Represents an issue with one of the files that constitute the translation of a document. The error is considered resolved when the file changes.",
      "params": {
        "file_hash": "File hash",
        "text": "Error message",
        "type": "One of secureValueTypePersonalDetails, secureValueTypePassport, secureValueTypeDriverLicense, secureValueTypeIdentityCard, secureValueTypeInternalPassport, secureValueTypeUtilityBill, secureValueTypeBankStatement, secureValueTypeRentalAgreement, secureValueTypePassportRegistration, secureValueTypeTemporaryRegistration"
      }
    },
    "SecureValueErrorTranslationFiles": {
      "desc": "Represents an issue with the translated version of a document. The error is considered resolved when a file with the document translation changes.",
      "params": {
        "file_hash": "Hash",
        "text": "Error message",
        "type": "One of secureValueTypePersonalDetails, secureValueTypePassport, secureValueTypeDriverLicense, secureValueTypeIdentityCard, secureValueTypeInternalPassport, secureValueTypeUtilityBill, secureValueTypeBankStatement, secureValueTypeRentalAgreement, secureValueTypePassportRegistration, secureValueTypeTemporaryRegistration"
      }
    },
    "SecureValueHash": {
      "desc": "Secure value hash",
      "params": {
        "hash": "Hash",
        "type": "Secure value type"
      }
    },
    "SecureValueTypeAddress": {
      "desc": "Address",
      "params": {}
    },
    "SecureValueTypeBankStatement": {
      "desc": "Bank statement",
      "params": {}
    },
    "SecureValueTypeDriverLicense": {
      "desc": "Driver's license",
      "params": {}
    },
    "SecureValueTypeEmail": {
      "desc": "Email",
      "params": {}
    },
    "SecureValueTypeIdentityCard": {
      "desc": "Identity card",
      "params": {}
    },
    "SecureValueTypeInternalPassport": {
      "desc": "Internal passport",
      "params": {}
    },
    "SecureValueTypePassport": {
      "desc": "Passport",
      "params": {}
    },
    "SecureValueTypePassportRegistration": {
      "desc": "Internal registration passport",
      "params": {}
    },
    "SecureValueTypePersonalDetails": {
      "desc": "Personal details",
      "params": {}
    },
    "SecureValueTypePhone": {
      "desc": "Phone",
      "params": {}
    },
    "SecureValueTypeRentalAgreement": {
      "desc": "Rental agreement",
      "params": {}
    },
    "SecureValueTypeTemporaryRegistration": {
      "desc": "Temporary registration",
      "params": {}
    },
    "SecureValueTypeUtilityBill": {
      "desc": "Utility bill",
      "params": {}
    },
    "SendAsPeer": {
      "desc": "Indicates a peer that can be used to send messages",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "peer": "Peer",
        "premium_required": "Whether a Telegram Premium account is required to send messages as this peer"
      }
    },
    "SendMessageCancelAction": {
      "desc": "Invalidate all previous action updates. E.g. when user deletes entered text or aborts a video upload.",
      "params": {}
    },
    "SendMessageChooseContactAction": {
      "desc": "User is selecting a contact to share.",
      "params": {}
    },
    "SendMessageChooseStickerAction": {
      "desc": "User is choosing a sticker",
      "params": {}
    },
    "SendMessageEmojiInteraction": {
      "desc": "User has clicked on an animated emoji triggering a reaction, click here for more info \u00bb.",
      "params": {
        "emoticon": "Emoji",
        "interaction": "A JSON object with interaction info, click here for more info \u00bb",
        "msg_id": "Message ID of the animated emoji that was clicked"
      }
    },
    "SendMessageEmojiInteractionSeen": {
      "desc": "User is watching an animated emoji reaction triggered by another user, click here for more info \u00bb.",
      "params": {
        "emoticon": "Emoji"
      }
    },
    "SendMessageGamePlayAction": {
      "desc": "User is playing a game",
      "params": {}
    },
    "SendMessageGeoLocationAction": {
      "desc": "User is selecting a location to share.",
      "params": {}
    },
    "SendMessageHistoryImportAction": {
      "desc": "Chat history is being imported",
      "params": {
        "progress": "Progress percentage"
      }
    },
    "SendMessageRecordAudioAction": {
      "desc": "User is recording a voice message.",
      "params": {}
    },
    "SendMessageRecordRoundAction": {
      "desc": "User is recording a round video to share",
      "params": {}
    },
    "SendMessageRecordVideoAction": {
      "desc": "User is recording a video.",
      "params": {}
    },
    "SendMessageTypingAction": {
      "desc": "User is typing.",
      "params": {}
    },
    "SendMessageUploadAudioAction": {
      "desc": "User is uploading a voice message.",
      "params": {
        "progress": "Progress percentage"
      }
    },
    "SendMessageUploadDocumentAction": {
      "desc": "User is uploading a file.",
      "params": {
        "progress": "Progress percentage"
      }
    },
    "SendMessageUploadPhotoAction": {
      "desc": "User is uploading a photo.",
      "params": {
        "progress": "Progress percentage"
      }
    },
    "SendMessageUploadRoundAction": {
      "desc": "User is uploading a round video",
      "params": {
        "progress": "Progress percentage"
      }
    },
    "SendMessageUploadVideoAction": {
      "desc": "User is uploading a video.",
      "params": {
        "progress": "Progress percentage"
      }
    },
    "ShippingOption": {
      "desc": "Shipping option",
      "params": {
        "id": "Option ID",
        "prices": "List of price portions",
        "title": "Title"
      }
    },
    "SimpleWebViewResultUrl": {
      "desc": "Contains the webview URL with appropriate theme parameters added",
      "params": {
        "url": "URL"
      }
    },
    "SmsJob": {
      "desc": "{schema}",
      "params": {
        "job_id": "",
        "phone_number": "",
        "text": ""
      }
    },
    "SpeakingInGroupCallAction": {
      "desc": "User is currently speaking in the group call",
      "params": {}
    },
    "SponsoredMessage": {
      "desc": "A sponsored message.",
      "params": {
        "additional_info": "If set, contains additional information about the sponsored message to be shown along with the message.",
        "button_text": "Text of the sponsored message button.",
        "can_report": "",
        "color": "",
        "entities": "Message entities for styled text",
        "flags": "Flags, see TL conditional fields",
        "message": "Sponsored message",
        "photo": "",
        "random_id": "Message ID",
        "recommended": "Whether the message needs to be labeled as \"recommended\" instead of \"sponsored\"",
        "sponsor_info": "If set, contains additional information about the sponsor to be shown along with the message.",
        "title": "",
        "url": ""
      }
    },
    "SponsoredMessageReportOption": {
      "desc": "{schema}",
      "params": {
        "option": "",
        "text": ""
      }
    },
    "StarsTopupOption": {
      "desc": "{schema}",
      "params": {
        "amount": "",
        "currency": "",
        "extended": "",
        "flags": "Flags, see TL conditional fields",
        "stars": "",
        "store_product": ""
      }
    },
    "StarsTransaction": {
      "desc": "{schema}",
      "params": {
        "date": "",
        "description": "",
        "flags": "Flags, see TL conditional fields",
        "id": "",
        "peer": "",
        "photo": "",
        "refund": "",
        "stars": "",
        "title": ""
      }
    },
    "StarsTransactionPeer": {
      "desc": "{schema}",
      "params": {
        "peer": ""
      }
    },
    "StarsTransactionPeerAppStore": {
      "desc": "{schema}",
      "params": {}
    },
    "StarsTransactionPeerFragment": {
      "desc": "{schema}",
      "params": {}
    },
    "StarsTransactionPeerPlayMarket": {
      "desc": "{schema}",
      "params": {}
    },
    "StarsTransactionPeerPremiumBot": {
      "desc": "{schema}",
      "params": {}
    },
    "StarsTransactionPeerUnsupported": {
      "desc": "{schema}",
      "params": {}
    },
    "StatsAbsValueAndPrev": {
      "desc": "Statistics value couple; initial and final value for period of time currently in consideration",
      "params": {
        "current": "Current value",
        "previous": "Previous value"
      }
    },
    "StatsDateRangeDays": {
      "desc": "Channel statistics date range",
      "params": {
        "max_date": "Final date",
        "min_date": "Initial date"
      }
    },
    "StatsGraph": {
      "desc": "Channel statistics graph",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "json": "Statistics data",
        "zoom_token": "Zoom token"
      }
    },
    "StatsGraphAsync": {
      "desc": "This channel statistics graph must be generated asynchronously using stats.loadAsyncGraph to reduce server load",
      "params": {
        "token": "Token to use for fetching the async graph"
      }
    },
    "StatsGraphError": {
      "desc": "An error occurred while generating the statistics graph",
      "params": {
        "error": "The error"
      }
    },
    "StatsGroupTopAdmin": {
      "desc": "Information about an active admin in a supergroup",
      "params": {
        "banned": "Number of banned users for statistics period in consideration",
        "deleted": "Number of deleted messages for statistics period in consideration",
        "kicked": "Number of kicked users for statistics period in consideration",
        "user_id": "User ID"
      }
    },
    "StatsGroupTopInviter": {
      "desc": "Information about an active supergroup inviter",
      "params": {
        "invitations": "Number of invitations for statistics period in consideration",
        "user_id": "User ID"
      }
    },
    "StatsGroupTopPoster": {
      "desc": "Information about an active user in a supergroup",
      "params": {
        "avg_chars": "Average number of characters per message",
        "messages": "Number of messages for statistics period in consideration",
        "user_id": "User ID"
      }
    },
    "StatsPercentValue": {
      "desc": "Channel statistics percentage.\nCompute the percentage simply by doing part * total / 100",
      "params": {
        "part": "Partial value",
        "total": "Total value"
      }
    },
    "StatsURL": {
      "desc": "URL with chat statistics",
      "params": {
        "url": "Chat statistics"
      }
    },
    "StickerKeyword": {
      "desc": "Keywords for a certain sticker",
      "params": {
        "document_id": "Sticker ID",
        "keyword": "Keywords"
      }
    },
    "StickerPack": {
      "desc": "A stickerpack is a group of stickers associated to the same emoji.\nIt is not a sticker pack the way it is usually intended, you may be looking for a StickerSet.",
      "params": {
        "documents": "Stickers",
        "emoticon": "Emoji"
      }
    },
    "StickerSet": {
      "desc": "Represents a stickerset (stickerpack)",
      "params": {
        "access_hash": "Access hash of stickerset",
        "archived": "Whether this stickerset was archived (due to too many saved stickers in the current account)",
        "channel_emoji_status": "If set, this custom emoji stickerset can be used in channel emoji statuses.",
        "count": "Number of stickers in pack",
        "creator": "",
        "emojis": "This is a custom emoji stickerset",
        "flags": "Flags, see TL conditional fields",
        "hash": "Hash",
        "id": "ID of the stickerset",
        "installed_date": "When was this stickerset installed",
        "masks": "Is this a mask stickerset",
        "official": "Is this stickerset official",
        "short_name": "Short name of stickerset, used when sharing stickerset using stickerset deep links.",
        "text_color": "Whether the color of this TGS custom emoji stickerset should be changed to the text color when used in messages, the accent color if used as emoji status, white on chat photos, or another appropriate color based on context.",
        "thumb_dc_id": "DC ID of thumbnail",
        "thumb_document_id": "Document ID of custom emoji thumbnail, fetch the document using messages.getCustomEmojiDocuments",
        "thumb_version": "Thumbnail version",
        "thumbs": "Stickerset thumbnail",
        "title": "Title of stickerset"
      }
    },
    "StickerSetCovered": {
      "desc": "Stickerset with a single sticker as preview",
      "params": {
        "cover": "Preview",
        "set": "Stickerset"
      }
    },
    "StickerSetFullCovered": {
      "desc": "Stickerset preview with all stickers of the stickerset included.\nCurrently used only for custom emoji stickersets, to avoid a further call to messages.getStickerSet.",
      "params": {
        "documents": "Stickers",
        "keywords": "Keywords for some or every sticker in the stickerset.",
        "packs": "Emoji information about every sticker in the stickerset",
        "set": "Stickerset"
      }
    },
    "StickerSetMultiCovered": {
      "desc": "Stickerset, with multiple stickers as preview",
      "params": {
        "covers": "Preview stickers",
        "set": "Stickerset"
      }
    },
    "StickerSetNoCovered": {
      "desc": "Just the stickerset information, with no previews.",
      "params": {
        "set": "Stickerset information."
      }
    },
    "StoriesStealthMode": {
      "desc": "Information about the current stealth mode session.",
      "params": {
        "active_until_date": "The date up to which stealth mode will be active.",
        "cooldown_until_date": "The date starting from which the user will be allowed to re-enable stealth mode again.",
        "flags": "Flags, see TL conditional fields"
      }
    },
    "StoryFwdHeader": {
      "desc": "Contains info about the original poster of a reposted story.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "from": "Peer that originally posted the story; will be empty for stories forwarded from a user with forwards privacy enabled, in which case from_name will be set, instead.",
        "from_name": "Will be set for stories forwarded from a user with forwards privacy enabled, in which case from will also be empty.",
        "modified": "Whether the story media was modified before reposting it (for example by overlaying a round video with a reaction).",
        "story_id": ", contains the story ID"
      }
    },
    "StoryItem": {
      "desc": "Represents a story.",
      "params": {
        "caption": "Story caption.",
        "close_friends": "Whether this story can only be viewed by our close friends, see here \u00bb for more info",
        "contacts": "Whether this story can only be viewed by our contacts",
        "date": "When was the story posted.",
        "edited": "Indicates whether the story was edited.",
        "entities": "Message entities for styled text",
        "expire_date": "When does the story expire.",
        "flags": "Flags, see TL conditional fields",
        "from_id": "",
        "fwd_from": "For reposted stories \u00bb, contains info about the original story.",
        "id": "ID of the story.",
        "media": "Story media.",
        "media_areas": "List of media areas, see here \u00bb for more info on media areas.",
        "min": "Full information about this story was omitted for space and performance reasons; use stories.getStoriesByID to fetch full info about this story when and if needed.",
        "noforwards": "Whether this story is protected and thus cannot be forwarded; clients should also prevent users from saving attached media (i.e. videos should only be streamed, photos should be kept in RAM, et cetera).",
        "out": "indicates whether we sent this story.",
        "pinned": "Whether this story is pinned on the user's profile",
        "privacy": "Privacy rules indicating who can and can't view this story",
        "public": "Whether this story is public and can be viewed by everyone",
        "selected_contacts": "Whether this story can only be viewed by a select list of our contacts",
        "sent_reaction": "The reaction we sent.",
        "views": "View date and reaction information"
      }
    },
    "StoryItemDeleted": {
      "desc": "Represents a previously active story, that was deleted",
      "params": {
        "id": "Story ID"
      }
    },
    "StoryItemSkipped": {
      "desc": "Represents an active story, whose full information was omitted for space and performance reasons; use stories.getStoriesByID to fetch full info about the skipped story when and if needed.",
      "params": {
        "close_friends": "Whether this story can only be viewed by our close friends, see here \u00bb for more info",
        "date": "When was the story posted.",
        "expire_date": "When does the story expire.",
        "flags": "Flags, see TL conditional fields",
        "id": "Story ID"
      }
    },
    "StoryReaction": {
      "desc": "How a certain peer reacted to a story",
      "params": {
        "date": "Reaction date",
        "peer_id": "The peer",
        "reaction": "The reaction"
      }
    },
    "StoryReactionPublicForward": {
      "desc": "A certain peer has forwarded the story as a message to a public chat or channel.",
      "params": {
        "message": "The message with the forwarded story."
      }
    },
    "StoryReactionPublicRepost": {
      "desc": "A certain peer has reposted the story.",
      "params": {
        "peer_id": "The peer that reposted the story.",
        "story": "The reposted story."
      }
    },
    "StoryView": {
      "desc": "Story view date and reaction information",
      "params": {
        "blocked": "Whether we have completely blocked this user, including from viewing more of our stories.",
        "blocked_my_stories_from": "Whether we have blocked this user from viewing more of our stories.",
        "date": "When did the user view the story",
        "flags": "Flags, see TL conditional fields",
        "reaction": "If present, contains the reaction that the user left on the story",
        "user_id": "The user that viewed the story"
      }
    },
    "StoryViewPublicForward": {
      "desc": "A certain peer has forwarded the story as a message to a public chat or channel.",
      "params": {
        "blocked": "Whether we have completely blocked this user, including from viewing more of our stories.",
        "blocked_my_stories_from": "Whether we have blocked this user from viewing more of our stories.",
        "flags": "Flags, see TL conditional fields",
        "message": "The message with the forwarded story."
      }
    },
    "StoryViewPublicRepost": {
      "desc": "A certain peer has reposted the story.",
      "params": {
        "blocked": "Whether we have completely blocked this user, including from viewing more of our stories.",
        "blocked_my_stories_from": "Whether we have blocked this user from viewing more of our stories.",
        "flags": "Flags, see TL conditional fields",
        "peer_id": "The peer that reposted the story.",
        "story": "The reposted story."
      }
    },
    "StoryViews": {
      "desc": "Aggregated view and reaction information of a story.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "forwards_count": "Forward counter of the story",
        "has_viewers": "If set, indicates that the viewers list is currently viewable, and was not yet deleted because the story has expired while the user didn't have a Premium account.",
        "reactions": "All reactions sent to this story",
        "reactions_count": "Number of reactions added to the story",
        "recent_viewers": "User IDs of some recent viewers of the story",
        "views_count": "View counter of the story"
      }
    },
    "TextAnchor": {
      "desc": "Text linking to another section of the page",
      "params": {
        "name": "Section name",
        "text": "Text"
      }
    },
    "TextBold": {
      "desc": "Bold text",
      "params": {
        "text": "Text"
      }
    },
    "TextConcat": {
      "desc": "Concatenation of rich texts",
      "params": {
        "texts": "Concatenated rich texts"
      }
    },
    "TextEmail": {
      "desc": "Rich text email link",
      "params": {
        "email": "Email address",
        "text": "Link text"
      }
    },
    "TextEmpty": {
      "desc": "Empty rich text element",
      "params": {}
    },
    "TextFixed": {
      "desc": "fixed-width rich text",
      "params": {
        "text": "Text"
      }
    },
    "TextImage": {
      "desc": "Inline image",
      "params": {
        "document_id": "Document ID",
        "h": "Height",
        "w": "Width"
      }
    },
    "TextItalic": {
      "desc": "Italic text",
      "params": {
        "text": "Text"
      }
    },
    "TextMarked": {
      "desc": "Highlighted text",
      "params": {
        "text": "Text"
      }
    },
    "TextPhone": {
      "desc": "Rich text linked to a phone number",
      "params": {
        "phone": "Phone number",
        "text": "Text"
      }
    },
    "TextPlain": {
      "desc": "Plain text",
      "params": {
        "text": "Text"
      }
    },
    "TextStrike": {
      "desc": "Strikethrough text",
      "params": {
        "text": "Text"
      }
    },
    "TextSubscript": {
      "desc": "Subscript text",
      "params": {
        "text": "Text"
      }
    },
    "TextSuperscript": {
      "desc": "Superscript text",
      "params": {
        "text": "Text"
      }
    },
    "TextUnderline": {
      "desc": "Underlined text",
      "params": {
        "text": "Text"
      }
    },
    "TextUrl": {
      "desc": "Link",
      "params": {
        "text": "Text of link",
        "url": "Webpage HTTP URL",
        "webpage_id": "If a preview was already generated for the page, the page ID"
      }
    },
    "TextWithEntities": {
      "desc": "Styled text with message entities",
      "params": {
        "entities": "Message entities for styled text",
        "text": "Text"
      }
    },
    "Theme": {
      "desc": "Theme",
      "params": {
        "access_hash": "Theme access hash",
        "creator": "Whether the current user is the creator of this theme",
        "default": "Whether this is the default theme",
        "document": "Theme",
        "emoticon": "Theme emoji",
        "flags": "Flags, see TL conditional fields",
        "for_chat": "Whether this theme is meant to be used as a chat theme",
        "id": "Theme ID",
        "installs_count": "Installation count",
        "settings": "Theme settings",
        "slug": "Unique theme ID",
        "title": "Theme name"
      }
    },
    "ThemeSettings": {
      "desc": "Theme settings",
      "params": {
        "accent_color": "Accent color, ARGB format",
        "base_theme": "Base theme",
        "flags": "Flags, see TL conditional fields",
        "message_colors": "The fill to be used as a background for outgoing messages, in RGB24 format. If just one or two equal colors are provided, describes a solid fill of a background. If two different colors are provided, describes the top and bottom colors of a 0-degree gradient.If three or four colors are provided, describes a freeform gradient fill of a background.",
        "message_colors_animated": "If set, the freeform gradient fill needs to be animated on every sent message.",
        "outbox_accent_color": "Accent color of outgoing messages in ARGB format",
        "wallpaper": "Wallpaper"
      }
    },
    "Timezone": {
      "desc": "{schema}",
      "params": {
        "id": "",
        "name": "",
        "utc_offset": ""
      }
    },
    "TopPeer": {
      "desc": "Top peer",
      "params": {
        "peer": "Peer",
        "rating": "Rating as computed in top peer rating \u00bb"
      }
    },
    "TopPeerCategoryBotsInline": {
      "desc": "Most used inline bots",
      "params": {}
    },
    "TopPeerCategoryBotsPM": {
      "desc": "Most used bots",
      "params": {}
    },
    "TopPeerCategoryChannels": {
      "desc": "Most frequently visited channels",
      "params": {}
    },
    "TopPeerCategoryCorrespondents": {
      "desc": "Users we've chatted most frequently with",
      "params": {}
    },
    "TopPeerCategoryForwardChats": {
      "desc": "Chats to which the users often forwards messages to",
      "params": {}
    },
    "TopPeerCategoryForwardUsers": {
      "desc": "Users to which the users often forwards messages to",
      "params": {}
    },
    "TopPeerCategoryGroups": {
      "desc": "Often-opened groups and supergroups",
      "params": {}
    },
    "TopPeerCategoryPeers": {
      "desc": "Top peer category",
      "params": {
        "category": "Top peer category of peers",
        "count": "Count of peers",
        "peers": "Peers"
      }
    },
    "TopPeerCategoryPhoneCalls": {
      "desc": "Most frequently called users",
      "params": {}
    },
    "UpdateAttachMenuBots": {
      "desc": "The list of installed attachment menu entries \u00bb has changed, use messages.getAttachMenuBots to fetch the updated list.",
      "params": {}
    },
    "UpdateAutoSaveSettings": {
      "desc": "Media autosave settings have changed and must be refetched using account.getAutoSaveSettings.",
      "params": {}
    },
    "UpdateBotBusinessConnect": {
      "desc": "{schema}",
      "params": {
        "connection": "",
        "qts": ""
      }
    },
    "UpdateBotCallbackQuery": {
      "desc": "A callback button was pressed, and the button data was sent to the bot that created the button",
      "params": {
        "chat_instance": "Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in games.",
        "data": "Callback data",
        "flags": "Flags, see TL conditional fields",
        "game_short_name": "Short name of a Game to be returned, serves as the unique identifier for the game",
        "msg_id": "Message ID",
        "peer": "Chat where the inline keyboard was sent",
        "query_id": "Query ID",
        "user_id": "ID of the user that pressed the button"
      }
    },
    "UpdateBotChatBoost": {
      "desc": "A channel boost has changed (bots only)",
      "params": {
        "boost": "New boost information",
        "peer": "Channel",
        "qts": "QTS event sequence identifier"
      }
    },
    "UpdateBotChatInviteRequester": {
      "desc": "Someone has requested to join a chat or channel (bots only, users will receive an updatePendingJoinRequests, instead)",
      "params": {
        "about": "Bio of the user",
        "date": "When was the join request \u00bb made",
        "invite": "Chat invite link that was used by the user to send the join request \u00bb",
        "peer": "The chat or channel in question",
        "qts": "QTS event sequence identifier",
        "user_id": "The user ID that is asking to join the chat or channel"
      }
    },
    "UpdateBotCommands": {
      "desc": "The command set of a certain bot in a certain chat has changed.",
      "params": {
        "bot_id": "ID of the bot that changed its command set",
        "commands": "New bot commands",
        "peer": "The affected chat"
      }
    },
    "UpdateBotDeleteBusinessMessage": {
      "desc": "{schema}",
      "params": {
        "connection_id": "",
        "messages": "",
        "peer": "",
        "qts": ""
      }
    },
    "UpdateBotEditBusinessMessage": {
      "desc": "{schema}",
      "params": {
        "connection_id": "",
        "flags": "Flags, see TL conditional fields",
        "message": "",
        "qts": "",
        "reply_to_message": ""
      }
    },
    "UpdateBotInlineQuery": {
      "desc": "An incoming inline query",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "geo": "Attached geolocation",
        "offset": "Offset to navigate through results",
        "peer_type": "Type of the chat from which the inline query was sent.",
        "query": "Text of query",
        "query_id": "Query ID",
        "user_id": "User that sent the query"
      }
    },
    "UpdateBotInlineSend": {
      "desc": "The result of an inline query that was chosen by a user and sent to their chat partner. Please see our documentation on the feedback collecting for details on how to enable these updates for your bot.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "geo": "Optional. Sender location, only for bots that require user location",
        "id": "The unique identifier for the result that was chosen",
        "msg_id": "Identifier of the sent inline message. Available only if there is an inline keyboard attached to the message. Will be also received in callback queries and can be used to edit the message.",
        "query": "The query that was used to obtain the result",
        "user_id": "The user that chose the result"
      }
    },
    "UpdateBotMenuButton": {
      "desc": "The menu button behavior for the specified bot has changed",
      "params": {
        "bot_id": "Bot ID",
        "button": "New menu button"
      }
    },
    "UpdateBotMessageReaction": {
      "desc": "Bots only: a user has changed their reactions on a message with public reactions.",
      "params": {
        "actor": "The user that (un)reacted to the message.",
        "date": "Date of the change.",
        "msg_id": "ID of the reacted-to message.",
        "new_reactions": "New reactions",
        "old_reactions": "Old reactions",
        "peer": "Peer of the reacted-to message.",
        "qts": "QTS event sequence identifier"
      }
    },
    "UpdateBotMessageReactions": {
      "desc": "Bots only: the number of reactions on a message with anonymous reactions has changed.",
      "params": {
        "date": "Date of the change.",
        "msg_id": "ID of the reacted-to message.",
        "peer": "Peer of the reacted-to message.",
        "qts": "QTS event sequence identifier",
        "reactions": "New reaction counters."
      }
    },
    "UpdateBotNewBusinessMessage": {
      "desc": "{schema}",
      "params": {
        "connection_id": "",
        "flags": "Flags, see TL conditional fields",
        "message": "",
        "qts": "",
        "reply_to_message": ""
      }
    },
    "UpdateBotPrecheckoutQuery": {
      "desc": "This object contains information about an incoming pre-checkout query.",
      "params": {
        "currency": "Three-letter ISO 4217 currency code",
        "flags": "Flags, see TL conditional fields",
        "info": "Order info provided by the user",
        "payload": "Bot specified invoice payload",
        "query_id": "Unique query identifier",
        "shipping_option_id": "Identifier of the shipping option chosen by the user",
        "total_amount": "Total amount in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).",
        "user_id": "User who sent the query"
      }
    },
    "UpdateBotShippingQuery": {
      "desc": "This object contains information about an incoming shipping query.",
      "params": {
        "payload": "Bot specified invoice payload",
        "query_id": "Unique query identifier",
        "shipping_address": "User specified shipping address",
        "user_id": "User who sent the query"
      }
    },
    "UpdateBotStopped": {
      "desc": "A bot was stopped or re-started.",
      "params": {
        "date": "When did this action occur",
        "qts": "New qts value, see updates \u00bb for more info.",
        "stopped": "Whether the bot was stopped or started",
        "user_id": "The user ID"
      }
    },
    "UpdateBotWebhookJSON": {
      "desc": "A new incoming event; for bots only",
      "params": {
        "data": "The event"
      }
    },
    "UpdateBotWebhookJSONQuery": {
      "desc": "A new incoming query; for bots only",
      "params": {
        "data": "Query data",
        "query_id": "Query identifier",
        "timeout": "Query timeout"
      }
    },
    "UpdateBroadcastRevenueTransactions": {
      "desc": "{schema}",
      "params": {
        "balances": "",
        "peer": ""
      }
    },
    "UpdateChannel": {
      "desc": "A new channel or supergroup is available, or info about an existing channel has changed and must be refeteched.",
      "params": {
        "channel_id": "Channel ID"
      }
    },
    "UpdateChannelAvailableMessages": {
      "desc": "The history of a channel/supergroup was hidden.",
      "params": {
        "available_min_id": "Identifier of a maximum unavailable message in a channel due to hidden history.",
        "channel_id": "Channel/supergroup ID"
      }
    },
    "UpdateChannelMessageForwards": {
      "desc": "The forward counter of a message in a channel has changed",
      "params": {
        "channel_id": "Channel ID",
        "forwards": "New forward counter",
        "id": "ID of the message"
      }
    },
    "UpdateChannelMessageViews": {
      "desc": "The view counter of a message in a channel has changed",
      "params": {
        "channel_id": "Channel ID",
        "id": "ID of the message",
        "views": "New view counter"
      }
    },
    "UpdateChannelParticipant": {
      "desc": "A participant has left, joined, was banned or admined in a channel or supergroup.",
      "params": {
        "actor_id": "User that triggered the change (inviter, admin that kicked the user, or the even the user_id itself)",
        "channel_id": "Channel ID",
        "date": "Date of the event",
        "flags": "Flags, see TL conditional fields",
        "invite": "Chat invite used to join the channel/supergroup",
        "new_participant": "New participant status",
        "prev_participant": "Previous participant status",
        "qts": "New qts value, see updates \u00bb for more info.",
        "user_id": "User that was affected by the change",
        "via_chatlist": "Whether the participant joined using a chat folder deep link \u00bb."
      }
    },
    "UpdateChannelPinnedTopic": {
      "desc": "A forum topic \u00bb was pinned or unpinned.",
      "params": {
        "channel_id": "The forum ID",
        "flags": "Flags, see TL conditional fields",
        "pinned": "Whether the topic was pinned or unpinned",
        "topic_id": "The topic ID"
      }
    },
    "UpdateChannelPinnedTopics": {
      "desc": "The pinned topics of a forum have changed.",
      "params": {
        "channel_id": "Forum ID.",
        "flags": "Flags, see TL conditional fields",
        "order": "Ordered list containing the IDs of all pinned topics."
      }
    },
    "UpdateChannelReadMessagesContents": {
      "desc": "The specified channel/supergroup messages were read",
      "params": {
        "channel_id": "Channel/supergroup ID",
        "flags": "Flags, see TL conditional fields",
        "messages": "IDs of messages that were read",
        "top_msg_id": "Forum topic ID."
      }
    },
    "UpdateChannelTooLong": {
      "desc": "There are new updates in the specified channel, the client must fetch them.\nIf the difference is too long or if the channel isn't currently in the states, start fetching from the specified pts.",
      "params": {
        "channel_id": "The channel",
        "flags": "Flags, see TL conditional fields",
        "pts": "The PTS."
      }
    },
    "UpdateChannelUserTyping": {
      "desc": "A user is typing in a supergroup, channel or message thread",
      "params": {
        "action": "Whether the user is typing, sending a media or doing something else",
        "channel_id": "Channel ID",
        "flags": "Flags, see TL conditional fields",
        "from_id": "The peer that is typing",
        "top_msg_id": "Thread ID"
      }
    },
    "UpdateChannelViewForumAsMessages": {
      "desc": "Users may also choose to display messages from all topics as if they were sent to a normal group, using a \"View as messages\" setting in the local client.\nThis setting only affects the current account, and is synced to other logged in sessions using the channels.toggleViewForumAsMessages method; invoking this method will update the value of the view_forum_as_messages flag of channelFull or dialog and emit an updateChannelViewForumAsMessages.",
      "params": {
        "channel_id": "The forum ID",
        "enabled": "The new value of the toggle."
      }
    },
    "UpdateChannelWebPage": {
      "desc": "A webpage preview of a link in a channel/supergroup message was generated",
      "params": {
        "channel_id": "Channel/supergroup ID",
        "pts": "Event count after generation",
        "pts_count": "Number of events that were generated",
        "webpage": "Generated webpage preview"
      }
    },
    "UpdateChat": {
      "desc": "A new chat is available",
      "params": {
        "chat_id": "Chat ID"
      }
    },
    "UpdateChatDefaultBannedRights": {
      "desc": "Default banned rights in a normal chat were updated",
      "params": {
        "default_banned_rights": "New default banned rights",
        "peer": "The chat",
        "version": "Version"
      }
    },
    "UpdateChatParticipant": {
      "desc": "A user has joined or left a specific chat",
      "params": {
        "actor_id": "User that triggered the change (inviter, admin that kicked the user, or the even the user_id itself)",
        "chat_id": "Chat ID",
        "date": "When did this event occur",
        "flags": "Flags, see TL conditional fields",
        "invite": "The invite that was used to join the group",
        "new_participant": "New participant info (empty if this participant just left)",
        "prev_participant": "Previous participant info (empty if this participant just joined)",
        "qts": "New qts value, see updates \u00bb for more info.",
        "user_id": "User that was affected by the change"
      }
    },
    "UpdateChatParticipantAdd": {
      "desc": "New group member.",
      "params": {
        "chat_id": "Group ID",
        "date": "When was the participant added",
        "inviter_id": "ID of the user, who added member to the group",
        "user_id": "ID of the new member",
        "version": "Chat version number"
      }
    },
    "UpdateChatParticipantAdmin": {
      "desc": "Admin permissions of a user in a basic group were changed",
      "params": {
        "chat_id": "Chat ID",
        "is_admin": "Whether the user was rendered admin",
        "user_id": "ID of the (de)admined user",
        "version": "Used in basic groups to reorder updates and make sure that all of them was received."
      }
    },
    "UpdateChatParticipantDelete": {
      "desc": "A member has left the group.",
      "params": {
        "chat_id": "Group ID",
        "user_id": "ID of the user",
        "version": "Used in basic groups to reorder updates and make sure that all of them was received."
      }
    },
    "UpdateChatParticipants": {
      "desc": "Composition of chat participants changed.",
      "params": {
        "participants": "Updated chat participants"
      }
    },
    "UpdateChatUserTyping": {
      "desc": "The user is preparing a message in a group; typing, recording, uploading, etc. This update is valid for 6 seconds. If no further updates of this kind are received after 6 seconds, it should be considered that the user stopped doing whatever they were doing",
      "params": {
        "action": "Type of action",
        "chat_id": "Group id",
        "from_id": "Peer that started typing (can be the chat itself, in case of anonymous admins)."
      }
    },
    "UpdateConfig": {
      "desc": "The server-side configuration has changed; the client should re-fetch the config using help.getConfig",
      "params": {}
    },
    "UpdateContactsReset": {
      "desc": "All contacts were deleted",
      "params": {}
    },
    "UpdateDcOptions": {
      "desc": "Changes in the data center configuration options.",
      "params": {
        "dc_options": "New connection options"
      }
    },
    "UpdateDeleteChannelMessages": {
      "desc": "Some messages in a supergroup/channel were deleted",
      "params": {
        "channel_id": "Channel ID",
        "messages": "IDs of messages that were deleted",
        "pts": "Event count after generation",
        "pts_count": "Number of events that were generated"
      }
    },
    "UpdateDeleteMessages": {
      "desc": "Messages were deleted.",
      "params": {
        "messages": "List of identifiers of deleted messages",
        "pts": "New quality of actions in a message box",
        "pts_count": "Number of generated events"
      }
    },
    "UpdateDeleteQuickReply": {
      "desc": "{schema}",
      "params": {
        "shortcut_id": ""
      }
    },
    "UpdateDeleteQuickReplyMessages": {
      "desc": "{schema}",
      "params": {
        "messages": "",
        "shortcut_id": ""
      }
    },
    "UpdateDeleteScheduledMessages": {
      "desc": "Some scheduled messages were deleted from the schedule queue of a chat",
      "params": {
        "messages": "Deleted scheduled messages",
        "peer": "Peer"
      }
    },
    "UpdateDialogFilter": {
      "desc": "A new folder was added",
      "params": {
        "filter": "Folder info",
        "flags": "Flags, see TL conditional fields",
        "id": "Folder ID"
      }
    },
    "UpdateDialogFilterOrder": {
      "desc": "New folder order",
      "params": {
        "order": "Ordered folder IDs"
      }
    },
    "UpdateDialogFilters": {
      "desc": "Clients should update folder info",
      "params": {}
    },
    "UpdateDialogPinned": {
      "desc": "A dialog was pinned/unpinned",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "folder_id": "Peer folder ID, for more info click here",
        "peer": "The dialog",
        "pinned": "Whether the dialog was pinned"
      }
    },
    "UpdateDialogUnreadMark": {
      "desc": "The manual unread mark of a chat was changed",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "peer": "The dialog",
        "unread": "Was the chat marked or unmarked as read"
      }
    },
    "UpdateDraftMessage": {
      "desc": "Notifies a change of a message draft.",
      "params": {
        "draft": "The draft",
        "flags": "Flags, see TL conditional fields",
        "peer": "The peer to which the draft is associated",
        "top_msg_id": "ID of the forum topic to which the draft is associated"
      }
    },
    "UpdateEditChannelMessage": {
      "desc": "A message was edited in a channel/supergroup",
      "params": {
        "message": "The new message",
        "pts": "Event count after generation",
        "pts_count": "Number of events that were generated"
      }
    },
    "UpdateEditMessage": {
      "desc": "A message was edited",
      "params": {
        "message": "The new edited message",
        "pts": "PTS",
        "pts_count": "PTS count"
      }
    },
    "UpdateEncryptedChatTyping": {
      "desc": "Interlocutor is typing a message in an encrypted chat. Update period is 6 second. If upon this time there is no repeated update, it shall be considered that the interlocutor stopped typing.",
      "params": {
        "chat_id": "Chat ID"
      }
    },
    "UpdateEncryptedMessagesRead": {
      "desc": "Communication history in an encrypted chat was marked as read.",
      "params": {
        "chat_id": "Chat ID",
        "date": "Time when messages were read",
        "max_date": "Maximum value of data for read messages"
      }
    },
    "UpdateEncryption": {
      "desc": "Change of state in an encrypted chat.",
      "params": {
        "chat": "Encrypted chat",
        "date": "Date of change"
      }
    },
    "UpdateFavedStickers": {
      "desc": "The list of favorited stickers was changed, the client should call messages.getFavedStickers to refetch the new list",
      "params": {}
    },
    "UpdateFolderPeers": {
      "desc": "The peer list of a peer folder was updated",
      "params": {
        "folder_peers": "New peer list",
        "pts": "Event count after generation",
        "pts_count": "Number of events that were generated"
      }
    },
    "UpdateGeoLiveViewed": {
      "desc": "Live geoposition message was viewed",
      "params": {
        "msg_id": "Message ID of geoposition message",
        "peer": "The user that viewed the live geoposition"
      }
    },
    "UpdateGroupCall": {
      "desc": "A new groupcall was started",
      "params": {
        "call": "Info about the group call or livestream",
        "chat_id": "The channel/supergroup where this group call or livestream takes place"
      }
    },
    "UpdateGroupCallConnection": {
      "desc": "New WebRTC parameters",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "params": "WebRTC parameters",
        "presentation": "Are these parameters related to the screen capture session currently in progress?"
      }
    },
    "UpdateGroupCallParticipants": {
      "desc": "The participant list of a certain group call has changed",
      "params": {
        "call": "Group call",
        "participants": "New participant list",
        "version": "Version"
      }
    },
    "UpdateInlineBotCallbackQuery": {
      "desc": "This notification is received by bots when a button is pressed",
      "params": {
        "chat_instance": "Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in games.",
        "data": "Data associated with the callback button. Be aware that a bad client can send arbitrary data in this field.",
        "flags": "Flags, see TL conditional fields",
        "game_short_name": "Short name of a Game to be returned, serves as the unique identifier for the game",
        "msg_id": "ID of the inline message with the button",
        "query_id": "Query ID",
        "user_id": "ID of the user that pressed the button"
      }
    },
    "UpdateLangPack": {
      "desc": "Language pack updated",
      "params": {
        "difference": "Changed strings"
      }
    },
    "UpdateLangPackTooLong": {
      "desc": "A language pack has changed, the client should manually fetch the changed strings using langpack.getDifference",
      "params": {
        "lang_code": "Language code"
      }
    },
    "UpdateLoginToken": {
      "desc": "A login token (for login via QR code) was accepted.",
      "params": {}
    },
    "UpdateMessageExtendedMedia": {
      "desc": "Extended media update",
      "params": {
        "extended_media": "Extended media",
        "msg_id": "Message ID",
        "peer": "Peer"
      }
    },
    "UpdateMessageID": {
      "desc": "Sent message with random_id client identifier was assigned an identifier.",
      "params": {
        "id": "id identifier of a respective Message",
        "random_id": "Previously transferred client random_id identifier"
      }
    },
    "UpdateMessagePoll": {
      "desc": "The results of a poll have changed",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "poll": "If the server knows the client hasn't cached this poll yet, the poll itself",
        "poll_id": "Poll ID",
        "results": "New poll results"
      }
    },
    "UpdateMessagePollVote": {
      "desc": "A specific peer has voted in a poll",
      "params": {
        "options": "Chosen option(s)",
        "peer": "The peer that voted in the poll",
        "poll_id": "Poll ID",
        "qts": "New qts value, see updates \u00bb for more info."
      }
    },
    "UpdateMessageReactions": {
      "desc": "New message reactions \u00bb are available",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "msg_id": "Message ID",
        "peer": "Peer",
        "reactions": "Reactions",
        "top_msg_id": "Forum topic ID"
      }
    },
    "UpdateMoveStickerSetToTop": {
      "desc": "A stickerset was just moved to top, see here for more info \u00bb",
      "params": {
        "emojis": "This update is referring to a custom emoji stickerset",
        "flags": "Flags, see TL conditional fields",
        "masks": "This update is referring to a mask stickerset",
        "stickerset": "Stickerset ID"
      }
    },
    "UpdateNewAuthorization": {
      "desc": "A new session logged into the current user's account through an unknown device.",
      "params": {
        "date": "Authorization date",
        "device": "Name of device, for example Android",
        "flags": "Flags, see TL conditional fields",
        "hash": "Hash for pagination, for more info click here",
        "location": "Location, for example USA, NY (IP=1.2.3.4)",
        "unconfirmed": "Whether the session is unconfirmed, see here \u00bb for more info."
      }
    },
    "UpdateNewChannelMessage": {
      "desc": "A new message was sent in a channel/supergroup",
      "params": {
        "message": "New message",
        "pts": "Event count after generation",
        "pts_count": "Number of events that were generated"
      }
    },
    "UpdateNewEncryptedMessage": {
      "desc": "New encrypted message.",
      "params": {
        "message": "Message",
        "qts": "New qts value, see updates \u00bb for more info."
      }
    },
    "UpdateNewMessage": {
      "desc": "New message in a private chat or in a basic group.",
      "params": {
        "message": "Message",
        "pts": "New quantity of actions in a message box",
        "pts_count": "Number of generated events"
      }
    },
    "UpdateNewQuickReply": {
      "desc": "{schema}",
      "params": {
        "quick_reply": ""
      }
    },
    "UpdateNewScheduledMessage": {
      "desc": "A message was added to the schedule queue of a chat",
      "params": {
        "message": "Message"
      }
    },
    "UpdateNewStickerSet": {
      "desc": "A new stickerset was installed",
      "params": {
        "stickerset": "The installed stickerset"
      }
    },
    "UpdateNewStoryReaction": {
      "desc": "{schema}",
      "params": {
        "peer": "",
        "reaction": "",
        "story_id": ""
      }
    },
    "UpdateNotifySettings": {
      "desc": "Changes in notification settings.",
      "params": {
        "notify_settings": "New notification settings",
        "peer": "Notification source"
      }
    },
    "UpdatePeerBlocked": {
      "desc": "We blocked a peer, see here \u00bb for more info on blocklists.",
      "params": {
        "blocked": "Whether the peer was blocked or unblocked",
        "blocked_my_stories_from": "Whether the peer was added/removed to/from the story blocklist; if not set, this update affects the main blocklist, see here \u00bb for more info.",
        "flags": "Flags, see TL conditional fields",
        "peer_id": "The (un)blocked peer"
      }
    },
    "UpdatePeerHistoryTTL": {
      "desc": "The Time-To-Live for messages sent by the current user in a specific chat has changed",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "peer": "The chat",
        "ttl_period": "The new Time-To-Live"
      }
    },
    "UpdatePeerLocated": {
      "desc": "List of peers near you was updated",
      "params": {
        "peers": "Geolocated peer list update"
      }
    },
    "UpdatePeerSettings": {
      "desc": "Settings of a certain peer have changed",
      "params": {
        "peer": "The peer",
        "settings": "Associated peer settings"
      }
    },
    "UpdatePeerWallpaper": {
      "desc": "The wallpaper \u00bb of a given peer has changed.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "peer": "The peer where the wallpaper has changed.",
        "wallpaper": "The new wallpaper, if none the wallpaper was removed and the default wallpaper should be used.",
        "wallpaper_overridden": "Whether the other user has chosen a custom wallpaper for us using messages.setChatWallPaper and the for_both flag, see here \u00bb for more info."
      }
    },
    "UpdatePendingJoinRequests": {
      "desc": "Someone has requested to join a chat or channel",
      "params": {
        "peer": "Chat or channel",
        "recent_requesters": "IDs of users that have recently requested to join",
        "requests_pending": "Number of pending join requests \u00bb for the chat or channel"
      }
    },
    "UpdatePhoneCall": {
      "desc": "An incoming phone call",
      "params": {
        "phone_call": "Phone call"
      }
    },
    "UpdatePhoneCallSignalingData": {
      "desc": "Incoming phone call signaling payload",
      "params": {
        "data": "Signaling payload",
        "phone_call_id": "Phone call ID"
      }
    },
    "UpdatePinnedChannelMessages": {
      "desc": "Messages were pinned/unpinned in a channel/supergroup",
      "params": {
        "channel_id": "Channel ID",
        "flags": "Flags, see TL conditional fields",
        "messages": "Messages",
        "pinned": "Whether the messages were pinned or unpinned",
        "pts": "Event count after generation",
        "pts_count": "Number of events that were generated"
      }
    },
    "UpdatePinnedDialogs": {
      "desc": "Pinned dialogs were updated",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "folder_id": "Peer folder ID, for more info click here",
        "order": "New order of pinned dialogs"
      }
    },
    "UpdatePinnedMessages": {
      "desc": "Some messages were pinned in a chat",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "messages": "Message IDs",
        "peer": "Peer",
        "pinned": "Whether the messages were pinned or unpinned",
        "pts": "Event count after generation",
        "pts_count": "Number of events that were generated"
      }
    },
    "UpdatePinnedSavedDialogs": {
      "desc": "Pinned saved dialogs \u00bb were updated",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "order": "New order of pinned saved dialogs"
      }
    },
    "UpdatePrivacy": {
      "desc": "Privacy rules were changed",
      "params": {
        "key": "Peers to which the privacy rules apply",
        "rules": "New privacy rules"
      }
    },
    "UpdatePtsChanged": {
      "desc": "Common message box sequence PTS has changed, state has to be refetched using updates.getState",
      "params": {}
    },
    "UpdateQuickReplies": {
      "desc": "{schema}",
      "params": {
        "quick_replies": ""
      }
    },
    "UpdateQuickReplyMessage": {
      "desc": "{schema}",
      "params": {
        "message": ""
      }
    },
    "UpdateReadChannelDiscussionInbox": {
      "desc": "Incoming comments in a discussion thread were marked as read",
      "params": {
        "broadcast_id": "If set, contains the ID of the channel that contains the post that started the comment thread in the discussion group (channel_id)",
        "broadcast_post": "If set, contains the ID of the channel post that started the comment thread",
        "channel_id": "Discussion group ID",
        "flags": "Flags, see TL conditional fields",
        "read_max_id": "Message ID of latest read incoming message for this thread",
        "top_msg_id": "ID of the group message that started the thread (message in linked discussion group)"
      }
    },
    "UpdateReadChannelDiscussionOutbox": {
      "desc": "Outgoing comments in a discussion thread were marked as read",
      "params": {
        "channel_id": "Supergroup ID",
        "read_max_id": "Message ID of latest read outgoing message for this thread",
        "top_msg_id": "ID of the group message that started the thread"
      }
    },
    "UpdateReadChannelInbox": {
      "desc": "Incoming messages in a channel/supergroup were read",
      "params": {
        "channel_id": "Channel/supergroup ID",
        "flags": "Flags, see TL conditional fields",
        "folder_id": "Peer folder ID, for more info click here",
        "max_id": "Position up to which all incoming messages are read.",
        "pts": "Event count after generation",
        "still_unread_count": "Count of messages weren't read yet"
      }
    },
    "UpdateReadChannelOutbox": {
      "desc": "Outgoing messages in a channel/supergroup were read",
      "params": {
        "channel_id": "Channel/supergroup ID",
        "max_id": "Position up to which all outgoing messages are read."
      }
    },
    "UpdateReadFeaturedEmojiStickers": {
      "desc": "Some featured custom emoji stickers were marked as read",
      "params": {}
    },
    "UpdateReadFeaturedStickers": {
      "desc": "Some featured stickers were marked as read",
      "params": {}
    },
    "UpdateReadHistoryInbox": {
      "desc": "Incoming messages were read",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "folder_id": "Peer folder ID, for more info click here",
        "max_id": "Maximum ID of messages read",
        "peer": "Peer",
        "pts": "Event count after generation",
        "pts_count": "Number of events that were generated",
        "still_unread_count": "Number of messages that are still unread"
      }
    },
    "UpdateReadHistoryOutbox": {
      "desc": "Outgoing messages were read",
      "params": {
        "max_id": "Maximum ID of read outgoing messages",
        "peer": "Peer",
        "pts": "Event count after generation",
        "pts_count": "Number of events that were generated"
      }
    },
    "UpdateReadMessagesContents": {
      "desc": "Contents of messages in the common message box were read",
      "params": {
        "date": "When was the last message in messages marked as read.",
        "flags": "Flags, see TL conditional fields",
        "messages": "IDs of read messages",
        "pts": "Event count after generation",
        "pts_count": "Number of events that were generated"
      }
    },
    "UpdateReadStories": {
      "desc": "Stories of a specific peer were marked as read.",
      "params": {
        "max_id": "ID of the last story that was marked as read",
        "peer": "The peer"
      }
    },
    "UpdateRecentEmojiStatuses": {
      "desc": "The list of recent emoji statuses has changed",
      "params": {}
    },
    "UpdateRecentReactions": {
      "desc": "The list of recent message reactions has changed",
      "params": {}
    },
    "UpdateRecentStickers": {
      "desc": "The recent sticker list was updated",
      "params": {}
    },
    "UpdateSavedDialogPinned": {
      "desc": "A saved message dialog was pinned/unpinned",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "peer": "The dialog",
        "pinned": "Whether the dialog was pinned"
      }
    },
    "UpdateSavedGifs": {
      "desc": "The saved gif list has changed, the client should refetch it using messages.getSavedGifs",
      "params": {}
    },
    "UpdateSavedReactionTags": {
      "desc": "{schema}",
      "params": {}
    },
    "UpdateSavedRingtones": {
      "desc": "The list of saved notification sounds has changed, use account.getSavedRingtones to fetch the new list.",
      "params": {}
    },
    "UpdateSentStoryReaction": {
      "desc": "Indicates we reacted to a story \u00bb.",
      "params": {
        "peer": "The peer that sent the story",
        "reaction": "The reaction that was sent",
        "story_id": "ID of the story we reacted to"
      }
    },
    "UpdateServiceNotification": {
      "desc": "A service message for the user.",
      "params": {
        "entities": "Message entities for styled text",
        "flags": "Flags, see TL conditional fields",
        "inbox_date": "When was the notification receivedThe message must also be stored locally as part of the message history with the user id 777000 (Telegram Notifications).",
        "invert_media": "If set, any eventual webpage preview will be shown on top of the message instead of at the bottom.",
        "media": "Media content (optional)",
        "message": "Message text",
        "popup": "If set, the message must be displayed in a popup.",
        "type": "String, identical in format and contents to the type field in API errors. Describes type of service message. It is acceptable to ignore repeated messages of the same type within a short period of time (15 minutes)."
      }
    },
    "UpdateShort": {
      "desc": "Shortened constructor containing info on one update not requiring auxiliary data",
      "params": {
        "date": "Date of event",
        "update": "Update"
      }
    },
    "UpdateShortChatMessage": {
      "desc": "Shortened constructor containing info on one new incoming text message from a chat",
      "params": {
        "chat_id": "ID of the chat where the message was sent",
        "date": "date",
        "entities": "Entities for styled text",
        "flags": "Flags, see TL conditional fields",
        "from_id": "ID of the sender of the message",
        "fwd_from": "Info about a forwarded message",
        "id": "ID of the message",
        "media_unread": "Whether the message contains some unread mentions",
        "mentioned": "Whether we were mentioned in this message",
        "message": "Message",
        "out": "Whether the message is outgoing",
        "pts": "PTS",
        "pts_count": "PTS count",
        "reply_to": "Reply (thread) information",
        "silent": "If true, the message is a silent message, no notifications should be triggered",
        "ttl_period": "Time To Live of the message, once updateShortChatMessage.date+updateShortChatMessage.ttl_period === time(), the message will be deleted on the server, and must be deleted locally as well.",
        "via_bot_id": "Info about the inline bot used to generate this message"
      }
    },
    "UpdateShortMessage": {
      "desc": "Info about a message sent to (received from) another user",
      "params": {
        "date": "date",
        "entities": "Entities for styled text",
        "flags": "Flags, see TL conditional fields",
        "fwd_from": "Info about a forwarded message",
        "id": "The message ID",
        "media_unread": "Whether there are some unread mentions in this message",
        "mentioned": "Whether we were mentioned in the message",
        "message": "The message",
        "out": "Whether the message is outgoing",
        "pts": "PTS",
        "pts_count": "PTS count",
        "reply_to": "Reply and thread information",
        "silent": "If true, the message is a silent message, no notifications should be triggered",
        "ttl_period": "Time To Live of the message, once message.date+message.ttl_period === time(), the message will be deleted on the server, and must be deleted locally as well.",
        "user_id": "The ID of the sender (if outgoing will be the ID of the destination) of the message",
        "via_bot_id": "Info about the inline bot used to generate this message"
      }
    },
    "UpdateShortSentMessage": {
      "desc": "Shortened constructor containing info on one outgoing message to a contact (the destination chat has to be extracted from the method call that returned this object).",
      "params": {
        "date": "date",
        "entities": "Entities for styled text",
        "flags": "Flags, see TL conditional fields",
        "id": "ID of the sent message",
        "media": "Attached media",
        "out": "Whether the message is outgoing",
        "pts": "PTS",
        "pts_count": "PTS count",
        "ttl_period": "Time To Live of the message, once message.date+message.ttl_period === time(), the message will be deleted on the server, and must be deleted locally as well."
      }
    },
    "UpdateSmsJob": {
      "desc": "{schema}",
      "params": {
        "job_id": ""
      }
    },
    "UpdateStarsBalance": {
      "desc": "{schema}",
      "params": {
        "balance": ""
      }
    },
    "UpdateStickerSets": {
      "desc": "Installed stickersets have changed, the client should refetch them as described in the docs.",
      "params": {
        "emojis": "Whether the list of installed custom emoji stickersets has changed",
        "flags": "Flags, see TL conditional fields",
        "masks": "Whether mask stickersets have changed"
      }
    },
    "UpdateStickerSetsOrder": {
      "desc": "The order of stickersets was changed",
      "params": {
        "emojis": "Whether the updated stickers are custom emoji stickers",
        "flags": "Flags, see TL conditional fields",
        "masks": "Whether the updated stickers are mask stickers",
        "order": "New sticker order by sticker ID"
      }
    },
    "UpdateStoriesStealthMode": {
      "desc": "Indicates that stories stealth mode was activated.",
      "params": {
        "stealth_mode": "Information about the current stealth mode session."
      }
    },
    "UpdateStory": {
      "desc": "A new story was posted.",
      "params": {
        "peer": "ID of the poster.",
        "story": "The story that was posted."
      }
    },
    "UpdateStoryID": {
      "desc": "A story was successfully uploaded.",
      "params": {
        "id": "The id that was attributed to the story.",
        "random_id": "The random_id that was passed to stories.sendStory."
      }
    },
    "UpdateTheme": {
      "desc": "A cloud theme was updated",
      "params": {
        "theme": "Theme"
      }
    },
    "UpdateTranscribedAudio": {
      "desc": "A pending voice message transcription \u00bb initiated with messages.transcribeAudio was updated.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "msg_id": "Transcribed message ID",
        "peer": "Peer of the transcribed message",
        "pending": "Whether this transcription is still pending and further updateTranscribedAudio about it will be sent in the future.",
        "text": "Transcribed text",
        "transcription_id": "Transcription ID"
      }
    },
    "UpdateUser": {
      "desc": "User information was updated, it must be refetched using users.getFullUser.",
      "params": {
        "user_id": "User ID"
      }
    },
    "UpdateUserEmojiStatus": {
      "desc": "The emoji status of a certain user has changed",
      "params": {
        "emoji_status": "New emoji status",
        "user_id": "User ID"
      }
    },
    "UpdateUserName": {
      "desc": "Changes the user's first name, last name and username.",
      "params": {
        "first_name": "New first name. Corresponds to the new value of real_first_name field of the userFull constructor.",
        "last_name": "New last name. Corresponds to the new value of real_last_name field of the userFull constructor.",
        "user_id": "User identifier",
        "usernames": "Usernames."
      }
    },
    "UpdateUserPhone": {
      "desc": "A user's phone number was changed",
      "params": {
        "phone": "New phone number",
        "user_id": "User ID"
      }
    },
    "UpdateUserStatus": {
      "desc": "Contact status update.",
      "params": {
        "status": "New status",
        "user_id": "User identifier"
      }
    },
    "UpdateUserTyping": {
      "desc": "The user is preparing a message; typing, recording, uploading, etc. This update is valid for 6 seconds. If no further updates of this kind are received after 6 seconds, it should be considered that the user stopped doing whatever they were doing",
      "params": {
        "action": "Action type",
        "user_id": "User id"
      }
    },
    "UpdateWebPage": {
      "desc": "An instant view webpage preview was generated",
      "params": {
        "pts": "Event count after generation",
        "pts_count": "Number of events that were generated",
        "webpage": "Webpage preview"
      }
    },
    "UpdateWebViewResultSent": {
      "desc": "Indicates to a bot that a webview was closed and an inline message was sent on behalf of the user using messages.sendWebViewResultMessage",
      "params": {
        "query_id": "Web app interaction ID"
      }
    },
    "Updates": {
      "desc": "Full constructor of updates",
      "params": {
        "chats": "List of chats mentioned in updates",
        "date": "Current date",
        "seq": "Total number of sent updates",
        "updates": "List of updates",
        "users": "List of users mentioned in updates"
      }
    },
    "UpdatesCombined": {
      "desc": "Constructor for a group of updates.",
      "params": {
        "chats": "List of chats mentioned in updates",
        "date": "Current date",
        "seq": "Value seq for the latest update in a group",
        "seq_start": "Value seq for the earliest update in a group",
        "updates": "List of updates",
        "users": "List of users mentioned in updates"
      }
    },
    "UpdatesTooLong": {
      "desc": "Too many updates, it is necessary to execute updates.getDifference.",
      "params": {}
    },
    "UrlAuthResultAccepted": {
      "desc": "Details about an accepted authorization request, for more info click here \u00bb",
      "params": {
        "url": "The URL name of the website on which the user has logged in."
      }
    },
    "UrlAuthResultDefault": {
      "desc": "Details about an accepted authorization request, for more info click here \u00bb",
      "params": {}
    },
    "UrlAuthResultRequest": {
      "desc": "Details about the authorization request, for more info click here \u00bb",
      "params": {
        "bot": "Username of a bot, which will be used for user authorization. If not specified, the current bot's username will be assumed. The url's domain must be the same as the domain linked with the bot. See Linking your domain to the bot for more details.",
        "domain": "The domain name of the website on which the user will log in.",
        "flags": "Flags, see TL conditional fields",
        "request_write_access": "Whether the bot would like to send messages to the user"
      }
    },
    "User": {
      "desc": "Indicates info about a certain user",
      "params": {
        "access_hash": "Access hash of the user",
        "apply_min_photo": "If set, the profile picture for this user should be refetched",
        "attach_menu_enabled": "Whether we installed the attachment menu web app offered by this bot",
        "bot": "Is this user a bot?",
        "bot_attach_menu": "Whether this bot offers an attachment menu web app",
        "bot_business": "",
        "bot_can_edit": "Whether we can edit the profile picture, name, about text and description of this bot because we own it.",
        "bot_chat_history": "Can the bot see all messages in groups?",
        "bot_info_version": "Version of the bot_info field in userFull, incremented every time it changes",
        "bot_inline_geo": "Whether the bot can request our geolocation in inline mode",
        "bot_inline_placeholder": "Inline placeholder for this inline bot",
        "bot_nochats": "Can the bot be added to groups?",
        "close_friend": "Whether we marked this user as a close friend, see here \u00bb for more info",
        "color": "The user's accent color.",
        "contact": "Whether this user is a contact",
        "contact_require_premium": "",
        "deleted": "Whether the account of this user was deleted",
        "emoji_status": "Emoji status",
        "fake": "If set, this user was reported by many users as a fake or scam user: be careful when interacting with them.",
        "first_name": "First name",
        "flags": "Flags, see TL conditional fields",
        "flags2": "Flags, see TL conditional fields",
        "id": "ID of the user",
        "lang_code": "Language code of the user",
        "last_name": "Last name",
        "min": "See min",
        "mutual_contact": "Whether this user is a mutual contact",
        "phone": "Phone number",
        "photo": "Profile picture of user",
        "premium": "Whether this user is a Telegram Premium user",
        "profile_color": "The user's profile color.",
        "restricted": "Access to this user must be restricted for the reason specified in restriction_reason",
        "restriction_reason": "Contains the reason why access to this user must be restricted.",
        "scam": "This may be a scam user",
        "self": "Whether this user indicates the currently logged in user",
        "status": "Online status of user",
        "stories_hidden": "Whether we have hidden \u00bb all active stories of this user.",
        "stories_max_id": "ID of the maximum read story.",
        "stories_unavailable": "No stories from this user are visible.",
        "support": "Whether this is an official support user",
        "username": "Username",
        "usernames": "Additional usernames",
        "verified": "Whether this user is verified"
      }
    },
    "UserEmpty": {
      "desc": "Empty constructor, non-existent user.",
      "params": {
        "id": "User identifier or 0"
      }
    },
    "UserFull": {
      "desc": "Extended user info",
      "params": {
        "about": "Bio of the user",
        "birthday": "",
        "blocked": "Whether you have blocked this user",
        "blocked_my_stories_from": "Whether we've blocked this user, preventing them from seeing our stories \u00bb.",
        "bot_broadcast_admin_rights": "A suggested set of administrator rights for the bot, to be shown when adding the bot as admin to a channel, see here for more info on how to handle them \u00bb.",
        "bot_group_admin_rights": "A suggested set of administrator rights for the bot, to be shown when adding the bot as admin to a group, see here for more info on how to handle them \u00bb.",
        "bot_info": "For bots, info about the bot (bot commands, etc)",
        "business_away_message": "",
        "business_greeting_message": "",
        "business_intro": "",
        "business_location": "",
        "business_work_hours": "",
        "can_pin_message": "Whether you can pin messages in the chat with this user, you can do this only for a chat with yourself",
        "common_chats_count": "Chats in common with this user",
        "contact_require_premium": "",
        "fallback_photo": "Fallback profile photo, displayed if no photo is present in profile_photo or personal_photo, due to privacy settings.",
        "flags": "Flags, see TL conditional fields",
        "flags2": "",
        "folder_id": "Peer folder ID, for more info click here",
        "has_scheduled": "Whether scheduled messages are available",
        "id": "User ID",
        "notify_settings": "Notification settings",
        "personal_channel_id": "",
        "personal_channel_message": "",
        "personal_photo": "Personal profile photo, to be shown instead of profile_photo.",
        "phone_calls_available": "Whether this user can make VoIP calls",
        "phone_calls_private": "Whether this user's privacy settings allow you to call them",
        "pinned_msg_id": "Message ID of the last pinned message",
        "premium_gifts": "Telegram Premium subscriptions gift options",
        "private_forward_name": "Anonymized text to be shown instead of the user's name on forwarded messages",
        "profile_photo": "Profile photo",
        "read_dates_private": "",
        "settings": "Peer settings",
        "sponsored_enabled": "",
        "stories": "Active stories \u00bb",
        "stories_pinned_available": "Whether this user has some pinned stories.",
        "theme_emoticon": "Emoji associated with chat theme",
        "translations_disabled": "Whether the real-time chat translation popup should be hidden.",
        "ttl_period": "Time To Live of all messages in this chat; once a message is this many seconds old, it must be deleted.",
        "video_calls_available": "Whether the user can receive video calls",
        "voice_messages_forbidden": "Whether this user doesn't allow sending voice messages in a private chat with them",
        "wallpaper": "Wallpaper to use in the private chat with the user.",
        "wallpaper_overridden": "Whether the other user has chosen a custom wallpaper for us using messages.setChatWallPaper and the for_both flag, see here \u00bb for more info."
      }
    },
    "UserProfilePhoto": {
      "desc": "User profile photo.",
      "params": {
        "dc_id": "DC ID where the photo is stored",
        "flags": "Flags, see TL conditional fields",
        "has_video": "Whether an animated profile picture is available for this user",
        "personal": "Whether this profile photo is only visible to us (i.e. it was set using photos.uploadContactProfilePhoto).",
        "photo_id": "Identifier of the respective photo",
        "stripped_thumb": "Stripped thumbnail"
      }
    },
    "UserProfilePhotoEmpty": {
      "desc": "Profile photo has not been set, or was hidden.",
      "params": {}
    },
    "UserStatusEmpty": {
      "desc": "User status has not been set yet.",
      "params": {}
    },
    "UserStatusLastMonth": {
      "desc": "Online status: last seen last month",
      "params": {
        "by_me": "",
        "flags": "Flags, see TL conditional fields"
      }
    },
    "UserStatusLastWeek": {
      "desc": "Online status: last seen last week",
      "params": {
        "by_me": "",
        "flags": "Flags, see TL conditional fields"
      }
    },
    "UserStatusOffline": {
      "desc": "The user's offline status.",
      "params": {
        "was_online": "Time the user was last seen online"
      }
    },
    "UserStatusOnline": {
      "desc": "Online status of the user.",
      "params": {
        "expires": "Time to expiration of the current online status"
      }
    },
    "UserStatusRecently": {
      "desc": "Online status: last seen recently",
      "params": {
        "by_me": "",
        "flags": "Flags, see TL conditional fields"
      }
    },
    "Username": {
      "desc": "Contains information about a username.",
      "params": {
        "active": "Whether the username is active.",
        "editable": "Whether the username is editable, meaning it wasn't bought on fragment.",
        "flags": "Flags, see TL conditional fields",
        "username": "The username."
      }
    },
    "VideoSize": {
      "desc": "An animated profile picture in MPEG4 format",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "h": "Video height",
        "size": "File size",
        "type": "u for animated profile pictures, and v for trimmed and downscaled video previews",
        "video_start_ts": "Timestamp that should be shown as static preview to the user (seconds)",
        "w": "Video width"
      }
    },
    "VideoSizeEmojiMarkup": {
      "desc": "An animated profile picture based on a custom emoji sticker.",
      "params": {
        "background_colors": "1, 2, 3 or 4 RBG-24 colors used to generate a solid (1), gradient (2) or freeform gradient (3, 4) background, similar to how fill wallpapers are generated. The rotation angle for gradient backgrounds is 0.",
        "emoji_id": "Custom emoji ID: the custom emoji sticker is shown at the center of the profile picture and occupies at most 67% of it."
      }
    },
    "VideoSizeStickerMarkup": {
      "desc": "An animated profile picture based on a sticker.",
      "params": {
        "background_colors": "1, 2, 3 or 4 RBG-24 colors used to generate a solid (1), gradient (2) or freeform gradient (3, 4) background, similar to how fill wallpapers are generated. The rotation angle for gradient backgrounds is 0.",
        "sticker_id": "Sticker ID",
        "stickerset": "Stickerset"
      }
    },
    "WallPaper": {
      "desc": "Represents a wallpaper based on an image.",
      "params": {
        "access_hash": "Access hash",
        "creator": "Whether we created this wallpaper",
        "dark": "Whether this wallpaper should be used in dark mode.",
        "default": "Whether this is the default wallpaper",
        "document": "The actual wallpaper",
        "flags": "Flags, see TL conditional fields",
        "id": "Identifier",
        "pattern": "Whether this is a pattern wallpaper \u00bb",
        "settings": "Info on how to generate the wallpaper, according to these instructions \u00bb.",
        "slug": "Unique wallpaper ID, used when generating wallpaper links or importing wallpaper links."
      }
    },
    "WallPaperNoFile": {
      "desc": "Represents a wallpaper only based on colors/gradients.",
      "params": {
        "dark": "Whether this wallpaper should be used in dark mode.",
        "default": "Whether this is the default wallpaper",
        "flags": "Flags, see TL conditional fields",
        "id": "Wallpaper ID",
        "settings": "Info on how to generate the wallpaper."
      }
    },
    "WallPaperSettings": {
      "desc": "Wallpaper rendering information.",
      "params": {
        "background_color": "Used for solid \u00bb, gradient \u00bb and freeform gradient \u00bb fills.",
        "blur": "For image wallpapers \u00bb: if set, the JPEG must be downscaled to fit in 450x450 square and then box-blurred with radius 12.",
        "emoticon": "If set, this wallpaper can be used as a channel wallpaper and is represented by the specified UTF-8 emoji.",
        "flags": "Flags, see TL conditional fields",
        "fourth_background_color": "Used for freeform gradient \u00bb fills.",
        "intensity": "Used for pattern wallpapers \u00bb.",
        "motion": "If set, the background needs to be slightly moved when the device is rotated.",
        "rotation": "Clockwise rotation angle of the gradient, in degrees; 0-359. Should be always divisible by 45.",
        "second_background_color": "Used for gradient \u00bb and freeform gradient \u00bb fills.",
        "third_background_color": "Used for freeform gradient \u00bb fills."
      }
    },
    "WebAuthorization": {
      "desc": "Represents a bot logged in using the Telegram login widget",
      "params": {
        "bot_id": "Bot ID",
        "browser": "Browser user-agent",
        "date_active": "When was the web session last active",
        "date_created": "When was the web session created",
        "domain": "The domain name of the website on which the user has logged in.",
        "hash": "Authorization hash",
        "ip": "IP address",
        "platform": "Platform",
        "region": "Region, determined from IP address"
      }
    },
    "WebDocument": {
      "desc": "Remote document",
      "params": {
        "access_hash": "Access hash",
        "attributes": "Attributes for media types",
        "mime_type": "MIME type",
        "size": "File size",
        "url": "Document URL"
      }
    },
    "WebDocumentNoProxy": {
      "desc": "Remote document that can be downloaded without proxying through telegram",
      "params": {
        "attributes": "Attributes for media types",
        "mime_type": "MIME type",
        "size": "File size",
        "url": "Document URL"
      }
    },
    "WebPage": {
      "desc": "Webpage preview",
      "params": {
        "attributes": "Webpage attributes",
        "author": "Author of the content",
        "cached_page": "Page contents in instant view format",
        "description": "Content description",
        "display_url": "Webpage URL to be displayed to the user",
        "document": "Preview of the content as a media file",
        "duration": "Duration of the content, in seconds",
        "embed_height": "Height of the embedded preview",
        "embed_type": "MIME type of the embedded preview, (e.g., text/html or video/mp4)",
        "embed_url": "URL to show in the embedded preview",
        "embed_width": "Width of the embedded preview",
        "flags": "Flags, see TL conditional fields",
        "has_large_media": "Whether the size of the media in the preview can be changed.",
        "hash": "Hash for pagination, for more info click here",
        "id": "Preview ID",
        "photo": "Image representing the content",
        "site_name": "Short name of the site (e.g., Google Docs, App Store)",
        "title": "Title of the content",
        "type": "Type of the web page. Can be: article, photo, audio, video, document, profile, app, or something else",
        "url": "URL of previewed webpage"
      }
    },
    "WebPageAttributeStickerSet": {
      "desc": "{schema}",
      "params": {
        "emojis": "",
        "flags": "Flags, see TL conditional fields",
        "stickers": "",
        "text_color": ""
      }
    },
    "WebPageAttributeStory": {
      "desc": "Webpage preview of a Telegram story",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "id": "Story ID",
        "peer": "Peer that posted the story",
        "story": "May contain the story, if not the story should be fetched when and if needed using stories.getStoriesByID with the above id and peer."
      }
    },
    "WebPageAttributeTheme": {
      "desc": "Page theme",
      "params": {
        "documents": "Theme files",
        "flags": "Flags, see TL conditional fields",
        "settings": "Theme settings"
      }
    },
    "WebPageEmpty": {
      "desc": "No preview is available for the webpage",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "id": "Preview ID",
        "url": "URL of the webpage."
      }
    },
    "WebPageNotModified": {
      "desc": "The preview of the webpage hasn't changed",
      "params": {
        "cached_page_views": "Page view count",
        "flags": "Flags, see TL conditional fields"
      }
    },
    "WebPagePending": {
      "desc": "A preview of the webpage is currently being generated",
      "params": {
        "date": "When was the processing started",
        "flags": "Flags, see TL conditional fields",
        "id": "ID of preview",
        "url": "URL of the webpage"
      }
    },
    "WebViewMessageSent": {
      "desc": "Info about a sent inline webview message",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "msg_id": "Message ID"
      }
    },
    "WebViewResultUrl": {
      "desc": "Contains the webview URL with appropriate theme and user info parameters added",
      "params": {
        "query_id": "Webview session ID",
        "url": "Webview URL to open"
      }
    },
    "account.AuthorizationForm": {
      "desc": "Telegram Passport authorization form",
      "params": {
        "errors": "Telegram Passport errors",
        "flags": "Flags, see TL conditional fields",
        "privacy_policy_url": "URL of the service's privacy policy",
        "required_types": "Required Telegram Passport documents",
        "users": "Info about the bot to which the form will be submitted",
        "values": "Already submitted Telegram Passport documents"
      }
    },
    "account.Authorizations": {
      "desc": "Logged-in sessions",
      "params": {
        "authorization_ttl_days": "Time-to-live of session",
        "authorizations": "Logged-in sessions"
      }
    },
    "account.AutoDownloadSettings": {
      "desc": "Media autodownload settings",
      "params": {
        "high": "High data usage preset",
        "low": "Low data usage preset",
        "medium": "Medium data usage preset"
      }
    },
    "account.AutoSaveSettings": {
      "desc": "Contains media autosave settings",
      "params": {
        "broadcasts_settings": "Default media autosave settings for channels",
        "chats": "Chats mentioned in the peer-specific granular autosave settings",
        "chats_settings": "Default media autosave settings for groups and supergroups",
        "exceptions": "Peer-specific granular autosave settings",
        "users": "Users mentioned in the peer-specific granular autosave settings",
        "users_settings": "Default media autosave settings for private chats"
      }
    },
    "account.BusinessChatLinks": {
      "desc": "{schema}",
      "params": {
        "chats": "",
        "links": "",
        "users": ""
      }
    },
    "account.ConnectedBots": {
      "desc": "{schema}",
      "params": {
        "connected_bots": "",
        "users": ""
      }
    },
    "account.ContentSettings": {
      "desc": "Sensitive content settings",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "sensitive_can_change": "Whether the current client can change the sensitive content settings to view NSFW content",
        "sensitive_enabled": "Whether viewing of sensitive (NSFW) content is enabled"
      }
    },
    "account.EmailVerified": {
      "desc": "The email was verified correctly.",
      "params": {
        "email": "The verified email address."
      }
    },
    "account.EmailVerifiedLogin": {
      "desc": "The email was verified correctly, and a login code was just sent to it.",
      "params": {
        "email": "The verified email address.",
        "sent_code": "Info about the sent login code"
      }
    },
    "account.EmojiStatuses": {
      "desc": "A list of emoji statuses",
      "params": {
        "hash": "Hash for pagination, for more info click here",
        "statuses": "Emoji statuses"
      }
    },
    "account.EmojiStatusesNotModified": {
      "desc": "The server-side list of emoji statuses hasn't changed",
      "params": {}
    },
    "account.Password": {
      "desc": "Configuration for two-factor authorization",
      "params": {
        "current_algo": "The KDF algorithm for SRP two-factor authentication of the current password",
        "email_unconfirmed_pattern": "A password recovery email with the specified pattern is still awaiting verification",
        "flags": "Flags, see TL conditional fields",
        "has_password": "Whether the user has a password",
        "has_recovery": "Whether the user has a recovery method configured",
        "has_secure_values": "Whether telegram passport is enabled",
        "hint": "Text hint for the password",
        "login_email_pattern": "A verified login email with the specified pattern is configured",
        "new_algo": "The KDF algorithm for SRP two-factor authentication to use when creating new passwords",
        "new_secure_algo": "The KDF algorithm for telegram passport",
        "pending_reset_date": "The 2FA password will be automatically removed at this date, unless the user cancels the operation",
        "secure_random": "Secure random string",
        "srp_B": "Srp B param for SRP authorization",
        "srp_id": "Srp ID param for SRP authorization"
      }
    },
    "account.PasswordInputSettings": {
      "desc": "Settings for setting up a new password",
      "params": {
        "email": "Password recovery email",
        "flags": "Flags, see TL conditional fields",
        "hint": "Text hint for the password",
        "new_algo": "The SRP algorithm to use",
        "new_password_hash": "The computed password hash",
        "new_secure_settings": "Telegram passport settings"
      }
    },
    "account.PasswordSettings": {
      "desc": "Private info associated to the password info (recovery email, telegram passport info & so on)",
      "params": {
        "email": "2FA Recovery email",
        "flags": "Flags, see TL conditional fields",
        "secure_settings": "Telegram passport settings"
      }
    },
    "account.PrivacyRules": {
      "desc": "Privacy rules",
      "params": {
        "chats": "Chats to which the rules apply",
        "rules": "Privacy rules",
        "users": "Users to which the rules apply"
      }
    },
    "account.ResetPasswordFailedWait": {
      "desc": "You recently requested a password reset that was canceled, please wait until the specified date before requesting another reset.",
      "params": {
        "retry_date": "Wait until this date before requesting another reset."
      }
    },
    "account.ResetPasswordOk": {
      "desc": "The 2FA password was reset successfully.",
      "params": {}
    },
    "account.ResetPasswordRequestedWait": {
      "desc": "You successfully requested a password reset, please wait until the specified date before finalizing the reset.",
      "params": {
        "until_date": "Wait until this date before finalizing the reset."
      }
    },
    "account.ResolvedBusinessChatLinks": {
      "desc": "{schema}",
      "params": {
        "chats": "",
        "entities": "Message entities for styled text",
        "flags": "Flags, see TL conditional fields",
        "message": "",
        "peer": "",
        "users": ""
      }
    },
    "account.SavedRingtone": {
      "desc": "The notification sound was already in MP3 format and was saved without any modification",
      "params": {}
    },
    "account.SavedRingtoneConverted": {
      "desc": "The notification sound was not in MP3 format and was successfully converted and saved, use the returned Document to refer to the notification sound from now on",
      "params": {
        "document": "The converted notification sound"
      }
    },
    "account.SavedRingtones": {
      "desc": "A list of saved notification sounds",
      "params": {
        "hash": "Hash for pagination, for more info click here",
        "ringtones": "Saved notification sounds"
      }
    },
    "account.SavedRingtonesNotModified": {
      "desc": "The notification sound list hasn't changed.",
      "params": {}
    },
    "account.SentEmailCode": {
      "desc": "The sent email code",
      "params": {
        "email_pattern": "The email (to which the code was sent) must match this pattern",
        "length": "The length of the verification code"
      }
    },
    "account.Takeout": {
      "desc": "Takeout info",
      "params": {
        "id": "Takeout ID"
      }
    },
    "account.Themes": {
      "desc": "Installed themes",
      "params": {
        "hash": "Hash for pagination, for more info click here",
        "themes": "Themes"
      }
    },
    "account.ThemesNotModified": {
      "desc": "No new themes were installed",
      "params": {}
    },
    "account.TmpPassword": {
      "desc": "Temporary payment password",
      "params": {
        "tmp_password": "Temporary password",
        "valid_until": "Validity period"
      }
    },
    "account.WallPapers": {
      "desc": "Installed wallpapers",
      "params": {
        "hash": "Hash for pagination, for more info click here",
        "wallpapers": "Wallpapers"
      }
    },
    "account.WallPapersNotModified": {
      "desc": "No new wallpapers were found",
      "params": {}
    },
    "account.WebAuthorizations": {
      "desc": "Web authorizations",
      "params": {
        "authorizations": "Web authorization list",
        "users": "Users"
      }
    },
    "auth.Authorization": {
      "desc": "Contains user authorization info.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "future_auth_token": "A future auth token",
        "otherwise_relogin_days": "Iff setup_password_required is set and the user declines to set a 2-step verification password, they will be able to log into their account via SMS again only after this many days pass.",
        "setup_password_required": "Suggests the user to set up a 2-step verification password to be able to log in again",
        "tmp_sessions": "Temporary passport sessions",
        "user": "Info on authorized user"
      }
    },
    "auth.AuthorizationSignUpRequired": {
      "desc": "An account with this phone number doesn't exist on telegram: the user has to enter basic information and sign up",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "terms_of_service": "Telegram's terms of service: the user must read and accept the terms of service before signing up to telegram"
      }
    },
    "auth.CodeTypeCall": {
      "desc": "The next time, the authentication code is to be delivered via an outgoing phone call.",
      "params": {}
    },
    "auth.CodeTypeFlashCall": {
      "desc": "The next time, the authentication code will be delivered via an immediately canceled incoming call.",
      "params": {}
    },
    "auth.CodeTypeFragmentSms": {
      "desc": "The next time, the authentication code will be delivered via fragment.com",
      "params": {}
    },
    "auth.CodeTypeMissedCall": {
      "desc": "The next time, the authentication code will be delivered via an immediately canceled incoming call, handled manually by the user.",
      "params": {}
    },
    "auth.CodeTypeSms": {
      "desc": "The next time, the authentication code will be delivered via an immediately canceled incoming call.",
      "params": {}
    },
    "auth.ExportedAuthorization": {
      "desc": "Data for copying of authorization between data centers.",
      "params": {
        "bytes": "authorizes key",
        "id": "current user identifier"
      }
    },
    "auth.LoggedOut": {
      "desc": "Future auth token \u00bb to be used on subsequent authorizations",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "future_auth_token": "Future auth token \u00bb to be used on subsequent authorizations"
      }
    },
    "auth.LoginToken": {
      "desc": "Login token (for QR code login)",
      "params": {
        "expires": "Expiration date of QR code",
        "token": "Token to render in QR code"
      }
    },
    "auth.LoginTokenMigrateTo": {
      "desc": "Repeat the query to the specified DC",
      "params": {
        "dc_id": "DC ID",
        "token": "Token to use for login"
      }
    },
    "auth.LoginTokenSuccess": {
      "desc": "Login via token (QR code) succeeded!",
      "params": {
        "authorization": "Authorization info"
      }
    },
    "auth.PasswordRecovery": {
      "desc": "Recovery info of a 2FA password, only for accounts with a recovery email configured.",
      "params": {
        "email_pattern": "The email to which the recovery code was sent must match this pattern."
      }
    },
    "auth.SentCode": {
      "desc": "Contains info about a sent verification code.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "next_type": "Phone code type that will be sent next, if the phone code is not received within timeout seconds: to send it use auth.resendCode",
        "phone_code_hash": "Phone code hash, to be stored and later re-used with auth.signIn",
        "timeout": "Timeout for reception of the phone code",
        "type": "Phone code type"
      }
    },
    "auth.SentCodeSuccess": {
      "desc": "The user successfully authorized using future auth tokens",
      "params": {
        "authorization": "Authorization info"
      }
    },
    "auth.SentCodeTypeApp": {
      "desc": "The code was sent through the telegram app",
      "params": {
        "length": "Length of the code in bytes"
      }
    },
    "auth.SentCodeTypeCall": {
      "desc": "The code will be sent via a phone call: a synthesized voice will tell the user which verification code to input.",
      "params": {
        "length": "Length of the verification code"
      }
    },
    "auth.SentCodeTypeEmailCode": {
      "desc": "The code was sent via the previously configured login email \u00bb",
      "params": {
        "apple_signin_allowed": "Whether authorization through Apple ID is allowed",
        "email_pattern": "Pattern of the email",
        "flags": "Flags, see TL conditional fields",
        "google_signin_allowed": "Whether authorization through Google ID is allowed",
        "length": "Length of the sent verification code",
        "reset_available_period": "Clients should wait for the specified amount of seconds before allowing the user to invoke auth.resetLoginEmail (will be 0 for Premium users).",
        "reset_pending_date": "An email reset was already requested, and will occur at the specified date."
      }
    },
    "auth.SentCodeTypeFirebaseSms": {
      "desc": "An authentication code should be delivered via SMS after Firebase attestation, as described in the auth documentation \u00bb.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "length": "Length of the code that will be delivered.",
        "nonce": "On Android, the nonce to be used as described in the auth documentation \u00bb",
        "play_integrity_nonce": "",
        "push_timeout": "On iOS: if a push notification with the ios_push_secret isn't received within push_timeout seconds, the next_type authentication method must be used, with auth.resendCode.",
        "receipt": "On iOS, must be compared with the receipt extracted from the received push notification."
      }
    },
    "auth.SentCodeTypeFlashCall": {
      "desc": "The code will be sent via a flash phone call, that will be closed immediately. The phone code will then be the phone number itself, just make sure that the phone number matches the specified pattern.",
      "params": {
        "pattern": "pattern to match"
      }
    },
    "auth.SentCodeTypeFragmentSms": {
      "desc": "The code was delivered via fragment.com.",
      "params": {
        "length": "Length of the delivered code.",
        "url": "Open the specified URL to log into fragment.com with the wallet that owns the specified phone number and view the code."
      }
    },
    "auth.SentCodeTypeMissedCall": {
      "desc": "The code will be sent via a flash phone call, that will be closed immediately. The last digits of the phone number that calls are the code that must be entered manually by the user.",
      "params": {
        "length": "Length of the verification code",
        "prefix": "Prefix of the phone number from which the call will be made"
      }
    },
    "auth.SentCodeTypeSetUpEmailRequired": {
      "desc": "The user should add and verify an email address in order to login as described here \u00bb.",
      "params": {
        "apple_signin_allowed": "Whether authorization through Apple ID is allowed",
        "flags": "Flags, see TL conditional fields",
        "google_signin_allowed": "Whether authorization through Google ID is allowed"
      }
    },
    "auth.SentCodeTypeSms": {
      "desc": "The code was sent via SMS",
      "params": {
        "length": "Length of the code in bytes"
      }
    },
    "auth.SentCodeTypeSmsPhrase": {
      "desc": "{schema}",
      "params": {
        "beginning": "",
        "flags": "Flags, see TL conditional fields"
      }
    },
    "auth.SentCodeTypeSmsWord": {
      "desc": "{schema}",
      "params": {
        "beginning": "",
        "flags": "Flags, see TL conditional fields"
      }
    },
    "bots.BotInfo": {
      "desc": "Localized information about a bot.",
      "params": {
        "about": "Bot about text",
        "description": "Bot description",
        "name": "Bot name"
      }
    },
    "channels.AdminLogResults": {
      "desc": "Admin log events",
      "params": {
        "chats": "Chats mentioned in events",
        "events": "Admin log events",
        "users": "Users mentioned in events"
      }
    },
    "channels.ChannelParticipant": {
      "desc": "Represents a channel participant",
      "params": {
        "chats": "Mentioned chats",
        "participant": "The channel participant",
        "users": "Users"
      }
    },
    "channels.ChannelParticipants": {
      "desc": "Represents multiple channel participants",
      "params": {
        "chats": "Mentioned chats",
        "count": "Total number of participants that correspond to the given query",
        "participants": "Participants",
        "users": "Users mentioned in participant info"
      }
    },
    "channels.ChannelParticipantsNotModified": {
      "desc": "No new participant info could be found",
      "params": {}
    },
    "channels.SendAsPeers": {
      "desc": "A list of peers that can be used to send messages in a specific group",
      "params": {
        "chats": "Mentioned chats",
        "peers": "Peers that can be used to send messages to the group",
        "users": "Mentioned users"
      }
    },
    "channels.SponsoredMessageReportResultAdsHidden": {
      "desc": "{schema}",
      "params": {}
    },
    "channels.SponsoredMessageReportResultChooseOption": {
      "desc": "{schema}",
      "params": {
        "options": "",
        "title": ""
      }
    },
    "channels.SponsoredMessageReportResultReported": {
      "desc": "{schema}",
      "params": {}
    },
    "chatlists.ChatlistInvite": {
      "desc": "Info about a chat folder deep link \u00bb.",
      "params": {
        "chats": "Related chat information",
        "emoticon": "Emoji to use as icon for the folder.",
        "flags": "Flags, see TL conditional fields",
        "peers": "Supergroups and channels to join",
        "title": "Name of the link",
        "users": "Related user information"
      }
    },
    "chatlists.ChatlistInviteAlready": {
      "desc": "Updated info about a chat folder deep link \u00bb we already imported.",
      "params": {
        "already_peers": "Peers that were already imported",
        "chats": "Related chat information",
        "filter_id": "ID of the imported folder",
        "missing_peers": "New peers to be imported",
        "users": "Related user information"
      }
    },
    "chatlists.ChatlistUpdates": {
      "desc": "Updated information about a chat folder deep link \u00bb.",
      "params": {
        "chats": "Related chat information",
        "missing_peers": "New peers to join",
        "users": "Related user information"
      }
    },
    "chatlists.ExportedChatlistInvite": {
      "desc": "Info about an exported chat folder deep link \u00bb.",
      "params": {
        "filter": "Folder ID",
        "invite": "The exported chat folder deep link \u00bb."
      }
    },
    "chatlists.ExportedInvites": {
      "desc": "Info about multiple chat folder deep links \u00bb.",
      "params": {
        "chats": "Related chat information",
        "invites": "The chat folder deep links \u00bb.",
        "users": "Related user information"
      }
    },
    "contacts.Blocked": {
      "desc": "Full list of blocked users.",
      "params": {
        "blocked": "List of blocked users",
        "chats": "Blocked chats",
        "users": "List of users"
      }
    },
    "contacts.BlockedSlice": {
      "desc": "Incomplete list of blocked users.",
      "params": {
        "blocked": "List of blocked users",
        "chats": "Blocked chats",
        "count": "Total number of elements in the list",
        "users": "List of users"
      }
    },
    "contacts.ContactBirthdays": {
      "desc": "{schema}",
      "params": {
        "contacts": "",
        "users": ""
      }
    },
    "contacts.Contacts": {
      "desc": "The current user's contact list and info on users.",
      "params": {
        "contacts": "Contact list",
        "saved_count": "Number of contacts that were saved successfully",
        "users": "User list"
      }
    },
    "contacts.ContactsNotModified": {
      "desc": "Contact list on the server is the same as the list on the client.",
      "params": {}
    },
    "contacts.Found": {
      "desc": "Users found by name substring and auxiliary data.",
      "params": {
        "chats": "Found chats",
        "my_results": "Personalized results",
        "results": "List of found user identifiers",
        "users": "List of users"
      }
    },
    "contacts.ImportedContacts": {
      "desc": "Info on successfully imported contacts.",
      "params": {
        "imported": "List of successfully imported contacts",
        "popular_invites": "Popular contacts",
        "retry_contacts": "List of contact ids that could not be imported due to system limitation and will need to be imported at a later date.",
        "users": "List of users"
      }
    },
    "contacts.ResolvedPeer": {
      "desc": "Resolved peer",
      "params": {
        "chats": "Chats",
        "peer": "The peer",
        "users": "Users"
      }
    },
    "contacts.TopPeers": {
      "desc": "Top peers",
      "params": {
        "categories": "Top peers by top peer category",
        "chats": "Chats",
        "users": "Users"
      }
    },
    "contacts.TopPeersDisabled": {
      "desc": "Top peers disabled",
      "params": {}
    },
    "contacts.TopPeersNotModified": {
      "desc": "Top peer info hasn't changed",
      "params": {}
    },
    "fragment.CollectibleInfo": {
      "desc": "{schema}",
      "params": {
        "amount": "",
        "crypto_amount": "",
        "crypto_currency": "",
        "currency": "",
        "purchase_date": "",
        "url": ""
      }
    },
    "help.AppConfig": {
      "desc": "Contains various client configuration parameters",
      "params": {
        "config": "Client configuration parameters",
        "hash": "Hash for pagination, for more info click here"
      }
    },
    "help.AppConfigNotModified": {
      "desc": "The client configuration parameters haven't changed",
      "params": {}
    },
    "help.AppUpdate": {
      "desc": "An update is available for the application.",
      "params": {
        "can_not_skip": "Unskippable, the new info must be shown to the user (with a popup or something else)",
        "document": "Application binary",
        "entities": "Message entities for styled text",
        "flags": "Flags, see TL conditional fields",
        "id": "Update ID",
        "sticker": "Associated sticker",
        "text": "Text description of the update",
        "url": "Application download URL",
        "version": "New version name"
      }
    },
    "help.CountriesList": {
      "desc": "Name, ISO code, localized name and phone codes/patterns of all available countries",
      "params": {
        "countries": "Name, ISO code, localized name and phone codes/patterns of all available countries",
        "hash": "Hash for pagination, for more info click here"
      }
    },
    "help.CountriesListNotModified": {
      "desc": "The country list has not changed",
      "params": {}
    },
    "help.Country": {
      "desc": "Name, ISO code, localized name and phone codes/patterns of a specific country",
      "params": {
        "country_codes": "Phone codes/patterns",
        "default_name": "Name of the country in the country's language",
        "flags": "Flags, see TL conditional fields",
        "hidden": "Whether this country should not be shown in the list",
        "iso2": "ISO code of country",
        "name": "Name of the country in the user's language, if different from the original name"
      }
    },
    "help.CountryCode": {
      "desc": "Country code and phone number pattern of a specific country",
      "params": {
        "country_code": "ISO country code",
        "flags": "Flags, see TL conditional fields",
        "patterns": "Phone patterns: for example, XXX XXX XXX",
        "prefixes": "Possible phone prefixes"
      }
    },
    "help.DeepLinkInfo": {
      "desc": "Deep link info, see the here for more details",
      "params": {
        "entities": "Message entities for styled text",
        "flags": "Flags, see TL conditional fields",
        "message": "Message to show to the user",
        "update_app": "An update of the app is required to parse this link"
      }
    },
    "help.DeepLinkInfoEmpty": {
      "desc": "Deep link info empty",
      "params": {}
    },
    "help.InviteText": {
      "desc": "Text of a text message with an invitation to install Telegram.",
      "params": {
        "message": "Text of the message"
      }
    },
    "help.NoAppUpdate": {
      "desc": "No updates are available for the application.",
      "params": {}
    },
    "help.PassportConfig": {
      "desc": "Telegram passport configuration",
      "params": {
        "countries_langs": "Localization",
        "hash": "Hash for pagination, for more info click here"
      }
    },
    "help.PassportConfigNotModified": {
      "desc": "Password configuration not modified",
      "params": {}
    },
    "help.PeerColorOption": {
      "desc": "Contains info about a color palette \u00bb.",
      "params": {
        "channel_min_level": "Channels can use this palette only after reaching at least the boost level specified in this field.",
        "color_id": "Palette ID.",
        "colors": "Light mode palette. Will be empty for IDs 0 to 6 inclusive, in which case a palette containing a single color from the following colors should be used: red, orange, violet, green, cyan, blue, pink for indexes 0 to 6.",
        "dark_colors": "Dark mode palette. Optional, defaults to the palette in colors (or the autogenerated palette for IDs 0 to 6) if absent.",
        "flags": "Flags, see TL conditional fields",
        "group_min_level": "",
        "hidden": "Whether this palette should not be displayed as an option to the user when choosing a palette to apply to profile pages or message accents."
      }
    },
    "help.PeerColorProfileSet": {
      "desc": "Represents a color palette that can be used in profile pages \u00bb.",
      "params": {
        "bg_colors": "A list of 1-2 colors in RGB format describing the colors used to generate the actual background used in the profile page.",
        "palette_colors": "A list of 1-2 colors in RGB format, shown in the color palette settings to describe the current palette.",
        "story_colors": "A list of 2 colors in RGB format describing the colors of the gradient used for the unread active story indicator around the profile photo."
      }
    },
    "help.PeerColorSet": {
      "desc": "Represents a color palette that can be used in message accents \u00bb.",
      "params": {
        "colors": "A list of 1-3 colors in RGB format, describing the accent color."
      }
    },
    "help.PeerColors": {
      "desc": "Contains info about multiple color palettes \u00bb.",
      "params": {
        "colors": "Usable color palettes.",
        "hash": "Hash for pagination, for more info click here"
      }
    },
    "help.PeerColorsNotModified": {
      "desc": "The list of color palettes has not changed.",
      "params": {}
    },
    "help.PremiumPromo": {
      "desc": "Telegram Premium promotion information",
      "params": {
        "period_options": "Telegram Premium subscription options",
        "status_entities": "Message entities for styled text",
        "status_text": "Description of the current state of the user's Telegram Premium subscription",
        "users": "Related user information",
        "video_sections": "A list of premium feature identifiers \u00bb, associated to each video",
        "videos": "A list of videos"
      }
    },
    "help.PromoData": {
      "desc": "MTProxy/Public Service Announcement information",
      "params": {
        "chats": "Chat info",
        "expires": "Expiry of PSA/MTProxy info",
        "flags": "Flags, see TL conditional fields",
        "peer": "MTProxy/PSA peer",
        "proxy": "MTProxy-related channel",
        "psa_message": "PSA message",
        "psa_type": "PSA type",
        "users": "User info"
      }
    },
    "help.PromoDataEmpty": {
      "desc": "No PSA/MTProxy info is available",
      "params": {
        "expires": "Re-fetch PSA/MTProxy info after the specified number of seconds"
      }
    },
    "help.RecentMeUrls": {
      "desc": "Recent t.me URLs",
      "params": {
        "chats": "Chats",
        "urls": "URLs",
        "users": "Users"
      }
    },
    "help.Support": {
      "desc": "Info on support user.",
      "params": {
        "phone_number": "Phone number",
        "user": "User"
      }
    },
    "help.SupportName": {
      "desc": "Localized name for telegram support",
      "params": {
        "name": "Localized name"
      }
    },
    "help.TermsOfService": {
      "desc": "Info about the latest telegram Terms Of Service",
      "params": {
        "entities": "Message entities for styled text",
        "flags": "Flags, see TL conditional fields",
        "id": "ID of the new terms",
        "min_age_confirm": "Minimum age required to sign up to telegram, the user must confirm that they is older than the minimum age.",
        "popup": "Whether a prompt must be showed to the user, in order to accept the new terms.",
        "text": "Text of the new terms"
      }
    },
    "help.TermsOfServiceUpdate": {
      "desc": "Info about an update of telegram's terms of service. If the terms of service are declined, then the account.deleteAccount method should be called with the reason \"Decline ToS update\"",
      "params": {
        "expires": "New TOS updates will have to be queried using help.getTermsOfServiceUpdate in expires seconds",
        "terms_of_service": "New terms of service"
      }
    },
    "help.TermsOfServiceUpdateEmpty": {
      "desc": "No changes were made to telegram's terms of service",
      "params": {
        "expires": "New TOS updates will have to be queried using help.getTermsOfServiceUpdate in expires seconds"
      }
    },
    "help.TimezonesList": {
      "desc": "{schema}",
      "params": {
        "hash": "Hash for pagination, for more info click here",
        "timezones": ""
      }
    },
    "help.TimezonesListNotModified": {
      "desc": "{schema}",
      "params": {}
    },
    "help.UserInfo": {
      "desc": "Internal use",
      "params": {
        "author": "Author",
        "date": "Date",
        "entities": "Message entities for styled text",
        "message": "Info"
      }
    },
    "help.UserInfoEmpty": {
      "desc": "Internal use",
      "params": {}
    },
    "messages.AffectedFoundMessages": {
      "desc": "Messages found and affected by changes",
      "params": {
        "messages": "Affected message IDs",
        "offset": "If bigger than zero, the request must be repeated to remove more messages",
        "pts": "Event count after generation",
        "pts_count": "Number of events that were generated"
      }
    },
    "messages.AffectedHistory": {
      "desc": "Affected part of communication history with the user or in a chat.",
      "params": {
        "offset": "If a parameter contains positive value, it is necessary to repeat the method call using the given value; during the proceeding of all the history the value itself shall gradually decrease",
        "pts": "Number of events occurred in a text box",
        "pts_count": "Number of affected events"
      }
    },
    "messages.AffectedMessages": {
      "desc": "Events affected by operation",
      "params": {
        "pts": "Event count after generation",
        "pts_count": "Number of events that were generated"
      }
    },
    "messages.AllStickers": {
      "desc": "Info about all installed stickers",
      "params": {
        "hash": "Hash for pagination, for more info click here",
        "sets": "All stickersets"
      }
    },
    "messages.AllStickersNotModified": {
      "desc": "Info about all installed stickers hasn't changed",
      "params": {}
    },
    "messages.ArchivedStickers": {
      "desc": "Archived stickersets",
      "params": {
        "count": "Number of archived stickers",
        "sets": "Archived stickersets"
      }
    },
    "messages.AvailableEffects": {
      "desc": "{schema}",
      "params": {
        "documents": "",
        "effects": "",
        "hash": "Hash for pagination, for more info click here"
      }
    },
    "messages.AvailableEffectsNotModified": {
      "desc": "{schema}",
      "params": {}
    },
    "messages.AvailableReactions": {
      "desc": "Animations and metadata associated with message reactions \u00bb",
      "params": {
        "hash": "Hash for pagination, for more info click here",
        "reactions": "Animations and metadata associated with message reactions \u00bb"
      }
    },
    "messages.AvailableReactionsNotModified": {
      "desc": "No new reactions are available",
      "params": {}
    },
    "messages.BotApp": {
      "desc": "Contains information about a direct link Mini App",
      "params": {
        "app": "Bot app information",
        "flags": "Flags, see TL conditional fields",
        "has_settings": "Deprecated flag, can be ignored.",
        "inactive": "Whether the web app was never used by the user, and confirmation must be asked from the user before opening it.",
        "request_write_access": "The bot is asking permission to send messages to the user: if the user agrees, set the write_allowed flag when invoking messages.requestAppWebView."
      }
    },
    "messages.BotCallbackAnswer": {
      "desc": "Callback answer sent by the bot in response to a button press",
      "params": {
        "alert": "Whether an alert should be shown to the user instead of a toast notification",
        "cache_time": "For how long should this answer be cached",
        "flags": "Flags, see TL conditional fields",
        "has_url": "Whether an URL is present",
        "message": "Alert to show",
        "native_ui": "Whether to show games in WebView or in native UI.",
        "url": "URL to open"
      }
    },
    "messages.BotResults": {
      "desc": "Result of a query to an inline bot",
      "params": {
        "cache_time": "Caching validity of the results",
        "flags": "Flags, see TL conditional fields",
        "gallery": "Whether the result is a picture gallery",
        "next_offset": "The next offset to use when navigating through results",
        "query_id": "Query ID",
        "results": "The results",
        "switch_pm": "Shown as a button on top of the remaining inline result list; if clicked, redirects the user to a private chat with the bot with the specified start parameter.",
        "switch_webview": "Shown as a button on top of the remaining inline result list; if clicked, opens the specified inline mode mini app.",
        "users": "Users mentioned in the results"
      }
    },
    "messages.ChannelMessages": {
      "desc": "Channel messages",
      "params": {
        "chats": "Chats",
        "count": "Total number of results were found server-side (may not be all included here)",
        "flags": "Flags, see TL conditional fields",
        "inexact": "If set, returned results may be inexact",
        "messages": "Found messages",
        "offset_id_offset": "Indicates the absolute position of messages[0] within the total result set with count count. This is useful, for example, if the result was fetched using offset_id, and we need to display a progress/total counter (like photo 134 of 200, for all media in a chat, we could simply use photo ${offset_id_offset} of ${count}.",
        "pts": "Event count after generation",
        "topics": "Forum topic information",
        "users": "Users"
      }
    },
    "messages.ChatAdminsWithInvites": {
      "desc": "Info about chat invites generated by admins.",
      "params": {
        "admins": "Info about chat invites generated by admins.",
        "users": "Mentioned users"
      }
    },
    "messages.ChatFull": {
      "desc": "Full info about a channel, supergroup, gigagroup or basic group.",
      "params": {
        "chats": "Mentioned chats",
        "full_chat": "Full info",
        "users": "Mentioned users"
      }
    },
    "messages.ChatInviteImporters": {
      "desc": "Info about the users that joined the chat using a specific chat invite",
      "params": {
        "count": "Number of users that joined",
        "importers": "The users that joined",
        "users": "The users that joined"
      }
    },
    "messages.Chats": {
      "desc": "List of chats with auxiliary data.",
      "params": {
        "chats": "List of chats"
      }
    },
    "messages.ChatsSlice": {
      "desc": "Partial list of chats, more would have to be fetched with pagination",
      "params": {
        "chats": "Chats",
        "count": "Total number of results that were found server-side (not all are included in chats)"
      }
    },
    "messages.CheckedHistoryImportPeer": {
      "desc": "Contains a confirmation text to be shown to the user, upon importing chat history, click here for more info \u00bb.",
      "params": {
        "confirm_text": "A confirmation text to be shown to the user, upon importing chat history \u00bb."
      }
    },
    "messages.DhConfig": {
      "desc": "New set of configuring parameters.",
      "params": {
        "g": "New value prime, see Wikipedia",
        "p": "New value primitive root, see Wikipedia",
        "random": "Random sequence of bytes of assigned length",
        "version": "Version of set of parameters"
      }
    },
    "messages.DhConfigNotModified": {
      "desc": "Configuring parameters did not change.",
      "params": {
        "random": "Random sequence of bytes of assigned length"
      }
    },
    "messages.DialogFilters": {
      "desc": "{schema}",
      "params": {
        "filters": "",
        "flags": "Flags, see TL conditional fields",
        "tags_enabled": ""
      }
    },
    "messages.Dialogs": {
      "desc": "Full list of chats with messages and auxiliary data.",
      "params": {
        "chats": "List of groups mentioned in the chats",
        "dialogs": "List of chats",
        "messages": "List of last messages from each chat",
        "users": "List of users mentioned in messages and groups"
      }
    },
    "messages.DialogsNotModified": {
      "desc": "Dialogs haven't changed",
      "params": {
        "count": "Number of dialogs found server-side by the query"
      }
    },
    "messages.DialogsSlice": {
      "desc": "Incomplete list of dialogs with messages and auxiliary data.",
      "params": {
        "chats": "List of chats mentioned in dialogs",
        "count": "Total number of dialogs",
        "dialogs": "List of dialogs",
        "messages": "List of last messages from dialogs",
        "users": "List of users mentioned in messages and chats"
      }
    },
    "messages.DiscussionMessage": {
      "desc": "Information about a message thread",
      "params": {
        "chats": "Chats mentioned in constructor",
        "flags": "Flags, see TL conditional fields",
        "max_id": "Message ID of latest reply in this thread",
        "messages": "The messages from which the thread starts. The messages are returned in reverse chronological order (i.e., in order of decreasing message ID).",
        "read_inbox_max_id": "Message ID of latest read incoming message in this thread",
        "read_outbox_max_id": "Message ID of latest read outgoing message in this thread",
        "unread_count": "Number of unread messages",
        "users": "Users mentioned in constructor"
      }
    },
    "messages.EmojiGroups": {
      "desc": "Represents a list of emoji categories.",
      "params": {
        "groups": "A list of emoji categories.",
        "hash": "Hash for pagination, for more info click here"
      }
    },
    "messages.EmojiGroupsNotModified": {
      "desc": "The list of emoji categories hasn't changed.",
      "params": {}
    },
    "messages.ExportedChatInvite": {
      "desc": "Info about a chat invite",
      "params": {
        "invite": "Info about the chat invite",
        "users": "Mentioned users"
      }
    },
    "messages.ExportedChatInviteReplaced": {
      "desc": "The specified chat invite was replaced with another one",
      "params": {
        "invite": "The replaced chat invite",
        "new_invite": "The invite that replaces the previous invite",
        "users": "Mentioned users"
      }
    },
    "messages.ExportedChatInvites": {
      "desc": "Info about chat invites exported by a certain admin.",
      "params": {
        "count": "Number of invites exported by the admin",
        "invites": "Exported invites",
        "users": "Info about the admin"
      }
    },
    "messages.FavedStickers": {
      "desc": "Favorited stickers",
      "params": {
        "hash": "Hash for pagination, for more info click here",
        "packs": "Emojis associated to stickers",
        "stickers": "Favorited stickers"
      }
    },
    "messages.FavedStickersNotModified": {
      "desc": "No new favorited stickers were found",
      "params": {}
    },
    "messages.FeaturedStickers": {
      "desc": "Featured stickersets",
      "params": {
        "count": "Total number of featured stickers",
        "flags": "Flags, see TL conditional fields",
        "hash": "Hash for pagination, for more info click here",
        "premium": "Whether this is a premium stickerset",
        "sets": "Featured stickersets",
        "unread": "IDs of new featured stickersets"
      }
    },
    "messages.FeaturedStickersNotModified": {
      "desc": "Featured stickers haven't changed",
      "params": {
        "count": "Total number of featured stickers"
      }
    },
    "messages.ForumTopics": {
      "desc": "Contains information about multiple forum topics",
      "params": {
        "chats": "Related chats",
        "count": "Total number of topics matching query; may be more than the topics contained in topics, in which case pagination is required.",
        "flags": "Flags, see TL conditional fields",
        "messages": "Related messages (contains the messages mentioned by forumTopic.top_message).",
        "order_by_create_date": "Whether the returned topics are ordered by creation date; if set, pagination by offset_date should use forumTopic.date; otherwise topics are ordered by the last message date, so paginate by the date of the message referenced by forumTopic.top_message.",
        "pts": "Event count after generation",
        "topics": "Forum topics",
        "users": "Related users"
      }
    },
    "messages.FoundStickerSets": {
      "desc": "Found stickersets",
      "params": {
        "hash": "Hash for pagination, for more info click here",
        "sets": "Found stickersets"
      }
    },
    "messages.FoundStickerSetsNotModified": {
      "desc": "No further results were found",
      "params": {}
    },
    "messages.HighScores": {
      "desc": "Highscores in a game",
      "params": {
        "scores": "Highscores",
        "users": "Users, associated to the highscores"
      }
    },
    "messages.HistoryImport": {
      "desc": "ID of a specific chat import session, click here for more info \u00bb.",
      "params": {
        "id": "History import ID"
      }
    },
    "messages.HistoryImportParsed": {
      "desc": "Contains information about a chat export file generated by a foreign chat app, click here for more info.\nIf neither the pm or group flags are set, the specified chat export was generated from a chat of unknown type.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "group": "The chat export file was generated from a group chat.",
        "pm": "The chat export file was generated from a private chat.",
        "title": "Title of the chat."
      }
    },
    "messages.InactiveChats": {
      "desc": "Inactive chat list",
      "params": {
        "chats": "Chat list",
        "dates": "When was the chat last active",
        "users": "Users mentioned in the chat list"
      }
    },
    "messages.InvitedUsers": {
      "desc": "{schema}",
      "params": {
        "missing_invitees": "",
        "updates": ""
      }
    },
    "messages.MessageEditData": {
      "desc": "Message edit data for media",
      "params": {
        "caption": "Media caption, if the specified media's caption can be edited",
        "flags": "Flags, see TL conditional fields"
      }
    },
    "messages.MessageReactionsList": {
      "desc": "List of peers that reacted to a specific message",
      "params": {
        "chats": "Mentioned chats",
        "count": "Total number of reactions matching query",
        "flags": "Flags, see TL conditional fields",
        "next_offset": "If set, indicates the next offset to use to load more results by invoking messages.getMessageReactionsList.",
        "reactions": "List of peers that reacted to a specific message",
        "users": "Mentioned users"
      }
    },
    "messages.MessageViews": {
      "desc": "View, forward counter + info about replies",
      "params": {
        "chats": "Chats mentioned in constructor",
        "users": "Users mentioned in constructor",
        "views": "View, forward counter + info about replies"
      }
    },
    "messages.Messages": {
      "desc": "Full list of messages with auxiliary data.",
      "params": {
        "chats": "List of chats mentioned in dialogs",
        "messages": "List of messages",
        "users": "List of users mentioned in messages and chats"
      }
    },
    "messages.MessagesNotModified": {
      "desc": "No new messages matching the query were found",
      "params": {
        "count": "Number of results found server-side by the given query"
      }
    },
    "messages.MessagesSlice": {
      "desc": "Incomplete list of messages and auxiliary data.",
      "params": {
        "chats": "List of chats mentioned in messages",
        "count": "Total number of messages in the list",
        "flags": "Flags, see TL conditional fields",
        "inexact": "If set, indicates that the results may be inexact",
        "messages": "List of messages",
        "next_rate": "Rate to use in the offset_rate parameter in the next call to messages.searchGlobal",
        "offset_id_offset": "Indicates the absolute position of messages[0] within the total result set with count count. This is useful, for example, if the result was fetched using offset_id, and we need to display a progress/total counter (like photo 134 of 200, for all media in a chat, we could simply use photo ${offset_id_offset} of ${count}.",
        "users": "List of users mentioned in messages and chats"
      }
    },
    "messages.MyStickers": {
      "desc": "{schema}",
      "params": {
        "count": "",
        "sets": ""
      }
    },
    "messages.PeerDialogs": {
      "desc": "Dialog info of multiple peers",
      "params": {
        "chats": "Chats",
        "dialogs": "Dialog info",
        "messages": "Messages mentioned in dialog info",
        "state": "Current update state of dialog",
        "users": "Users"
      }
    },
    "messages.PeerSettings": {
      "desc": "Peer settings",
      "params": {
        "chats": "Mentioned chats",
        "settings": "Peer settings",
        "users": "Mentioned users"
      }
    },
    "messages.QuickReplies": {
      "desc": "{schema}",
      "params": {
        "chats": "",
        "messages": "",
        "quick_replies": "",
        "users": ""
      }
    },
    "messages.QuickRepliesNotModified": {
      "desc": "{schema}",
      "params": {}
    },
    "messages.Reactions": {
      "desc": "List of message reactions",
      "params": {
        "hash": "Hash for pagination, for more info click here",
        "reactions": "Reactions"
      }
    },
    "messages.ReactionsNotModified": {
      "desc": "The server-side list of message reactions hasn't changed",
      "params": {}
    },
    "messages.RecentStickers": {
      "desc": "Recently used stickers",
      "params": {
        "dates": "When was each sticker last used",
        "hash": "Hash for pagination, for more info click here",
        "packs": "Emojis associated to stickers",
        "stickers": "Recent stickers"
      }
    },
    "messages.RecentStickersNotModified": {
      "desc": "No new recent sticker was found",
      "params": {}
    },
    "messages.SavedDialogs": {
      "desc": "Represents some saved message dialogs \u00bb.",
      "params": {
        "chats": "Mentioned chats",
        "dialogs": "Saved message dialogs \u00bb.",
        "messages": "List of last messages from each saved dialog",
        "users": "Mentioned users"
      }
    },
    "messages.SavedDialogsNotModified": {
      "desc": "The saved dialogs haven't changed",
      "params": {
        "count": "Number of saved dialogs found server-side by the query"
      }
    },
    "messages.SavedDialogsSlice": {
      "desc": "Incomplete list of saved message dialogs \u00bb with messages and auxiliary data.",
      "params": {
        "chats": "Mentioned chats",
        "count": "Total number of saved message dialogs",
        "dialogs": "List of saved message dialogs",
        "messages": "List of last messages from dialogs",
        "users": "Mentioned users"
      }
    },
    "messages.SavedGifs": {
      "desc": "Saved gifs",
      "params": {
        "gifs": "List of saved gifs",
        "hash": "Hash for pagination, for more info click here"
      }
    },
    "messages.SavedGifsNotModified": {
      "desc": "No new saved gifs were found",
      "params": {}
    },
    "messages.SavedReactionTags": {
      "desc": "{schema}",
      "params": {
        "hash": "Hash for pagination, for more info click here",
        "tags": ""
      }
    },
    "messages.SavedReactionTagsNotModified": {
      "desc": "{schema}",
      "params": {}
    },
    "messages.SearchCounter": {
      "desc": "Indicates how many results would be found by a messages.search call with the same parameters",
      "params": {
        "count": "Number of results that were found server-side",
        "filter": "Provided message filter",
        "flags": "Flags, see TL conditional fields",
        "inexact": "If set, the results may be inexact"
      }
    },
    "messages.SearchResultsCalendar": {
      "desc": "Information about found messages sent on a specific day",
      "params": {
        "chats": "Mentioned chats",
        "count": "Total number of results matching query",
        "flags": "Flags, see TL conditional fields",
        "inexact": "If set, indicates that the results may be inexact",
        "messages": "Messages",
        "min_date": "Starting timestamp of attached messages",
        "min_msg_id": "Ending timestamp of attached messages",
        "offset_id_offset": "Indicates the absolute position of messages[0] within the total result set with count count. This is useful, for example, if we need to display a progress/total counter (like photo 134 of 200, for all media in a chat, we could simply use photo ${offset_id_offset} of ${count}.",
        "periods": "Used to split the messages by days: multiple SearchResultsCalendarPeriod constructors are returned, each containing information about the first, last and total number of messages matching the filter that were sent on a specific day.  This information can be easily used to split the returned messages by day.",
        "users": "Mentioned users"
      }
    },
    "messages.SearchResultsPositions": {
      "desc": "Information about sparse positions of messages",
      "params": {
        "count": "Total number of found messages",
        "positions": "List of message positions"
      }
    },
    "messages.SentEncryptedFile": {
      "desc": "Message with a file enclosure sent to a protected chat",
      "params": {
        "date": "Sending date",
        "file": "Attached file"
      }
    },
    "messages.SentEncryptedMessage": {
      "desc": "Message without file attachments sent to an encrypted file.",
      "params": {
        "date": "Date of sending"
      }
    },
    "messages.SponsoredMessages": {
      "desc": "A set of sponsored messages associated to a channel",
      "params": {
        "chats": "Chats mentioned in the sponsored messages",
        "flags": "Flags, see TL conditional fields",
        "messages": "Sponsored messages",
        "posts_between": "If set, specifies the minimum number of messages between shown sponsored messages; otherwise, only one sponsored message must be shown after all ordinary messages.",
        "users": "Users mentioned in the sponsored messages"
      }
    },
    "messages.SponsoredMessagesEmpty": {
      "desc": "No sponsored messages are available.",
      "params": {}
    },
    "messages.StickerSet": {
      "desc": "Stickerset and stickers inside it",
      "params": {
        "documents": "Stickers in stickerset",
        "keywords": "Keywords for some or every sticker in the stickerset.",
        "packs": "Emoji info for stickers",
        "set": "The stickerset"
      }
    },
    "messages.StickerSetInstallResultArchive": {
      "desc": "The stickerset was installed, but since there are too many stickersets some were archived",
      "params": {
        "sets": "Archived stickersets"
      }
    },
    "messages.StickerSetInstallResultSuccess": {
      "desc": "The stickerset was installed successfully",
      "params": {}
    },
    "messages.StickerSetNotModified": {
      "desc": "The stickerset hasn't changed",
      "params": {}
    },
    "messages.Stickers": {
      "desc": "Found stickers",
      "params": {
        "hash": "Hash for pagination, for more info click here",
        "stickers": "Stickers"
      }
    },
    "messages.StickersNotModified": {
      "desc": "No new stickers were found for the given query",
      "params": {}
    },
    "messages.TranscribedAudio": {
      "desc": "Transcribed text from a voice message \u00bb",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "pending": "Whether the transcription is partial because audio transcription is still in progress, if set the user may receive further updateTranscribedAudio updates with the updated transcription.",
        "text": "Transcripted text",
        "transcription_id": "Transcription ID",
        "trial_remains_num": "For non-Premium users, this flag will be set, indicating the remaining transcriptions in the free trial period.",
        "trial_remains_until_date": "For non-Premium users, this flag will be set, indicating the date when the trial_remains_num counter will be reset to the maximum value of transcribe_audio_trial_weekly_number."
      }
    },
    "messages.TranslateResult": {
      "desc": "Translated text with entities",
      "params": {
        "result": "Text+entities, for each input message."
      }
    },
    "messages.VotesList": {
      "desc": "How users voted in a poll",
      "params": {
        "chats": "Mentioned chats",
        "count": "Total number of votes for all options (or only for the chosen option, if provided to messages.getPollVotes)",
        "flags": "Flags, see TL conditional fields",
        "next_offset": "Offset to use with the next messages.getPollVotes request, empty string if no more results are available.",
        "users": "Info about users that voted in the poll",
        "votes": "Vote info for each user"
      }
    },
    "messages.WebPage": {
      "desc": "Represents an Instant View webpage.",
      "params": {
        "chats": "Chats mentioned in the webpage.",
        "users": "Users mentioned in the webpage.",
        "webpage": "The instant view webpage."
      }
    },
    "payments.BankCardData": {
      "desc": "Credit card info, provided by the card's bank(s)",
      "params": {
        "open_urls": "Info URL(s) provided by the card's bank(s)",
        "title": "Credit card title"
      }
    },
    "payments.CheckedGiftCode": {
      "desc": "Contains info about a Telegram Premium giftcode link.",
      "params": {
        "chats": "Mentioned chats",
        "date": "Creation date of the gift code.",
        "flags": "Flags, see TL conditional fields",
        "from_id": "The peer that created the gift code.",
        "giveaway_msg_id": "Message ID of the giveaway in the channel specified in from_id.",
        "months": "Duration in months of the gifted Telegram Premium subscription.",
        "to_id": "The destination user of the gift.",
        "used_date": "When was the giftcode imported, if it was imported.",
        "users": "Mentioned users",
        "via_giveaway": "Whether this giftcode was created by a giveaway."
      }
    },
    "payments.ExportedInvoice": {
      "desc": "Exported invoice deep link",
      "params": {
        "url": "Exported invoice deep link"
      }
    },
    "payments.GiveawayInfo": {
      "desc": "Contains info about an ongoing giveaway.",
      "params": {
        "admin_disallowed_chat_id": "If set, the current user can't participate in the giveaway, because they are an administrator in one of the channels (ID specified in this flag) that created the giveaway.",
        "disallowed_country": "If set, the current user can't participate in this giveaway, because their phone number is from the specified disallowed country (specified as a two-letter ISO 3166-1 alpha-2 country code).",
        "flags": "Flags, see TL conditional fields",
        "joined_too_early_date": "The current user can't participate in the giveaway, because they were already a member of the channel when the giveaway started, and the only_new_subscribers was set when starting the giveaway.",
        "participating": "The current user is participating in the giveaway.",
        "preparing_results": "If set, the giveaway has ended and the results are being prepared.",
        "start_date": "When was the giveaway started"
      }
    },
    "payments.GiveawayInfoResults": {
      "desc": "A giveaway has ended.",
      "params": {
        "activated_count": "Number of winners, which activated their gift codes.",
        "finish_date": "End date of the giveaway. May be bigger than the end date specified in parameters of the giveaway.",
        "flags": "Flags, see TL conditional fields",
        "gift_code_slug": "If we're one of the winners of this giveaway, contains the Premium gift code, see here \u00bb for more info on the full giveaway flow.",
        "refunded": "Whether the giveaway was canceled and was fully refunded.",
        "start_date": "Start date of the giveaway",
        "winner": "Whether we're one of the winners of this giveaway.",
        "winners_count": "Number of winners in the giveaway"
      }
    },
    "payments.PaymentForm": {
      "desc": "Payment form",
      "params": {
        "additional_methods": "Additional payment methods",
        "bot_id": "Bot ID",
        "can_save_credentials": "Whether the user can choose to save credentials.",
        "description": "Description",
        "flags": "Flags, see TL conditional fields",
        "form_id": "Form ID",
        "invoice": "Invoice",
        "native_params": "Contains information about the payment provider, if available, to support it natively without the need for opening the URL.A JSON object that can contain the following fields:- apple_pay_merchant_id: Apple Pay merchant ID- google_pay_public_key: Google Pay public key- need_country: True, if the user country must be provided,- need_zip: True, if the user ZIP/postal code must be provided,- need_cardholder_name: True, if the cardholder name must be provided",
        "native_provider": "Payment provider name.One of the following:- stripe",
        "password_missing": "Indicates that the user can save payment credentials, but only after setting up a 2FA password (currently the account doesn't have a 2FA password)",
        "photo": "Product photo",
        "provider_id": "Payment provider ID.",
        "saved_credentials": "Contains information about saved card credentials",
        "saved_info": "Saved server-side order information",
        "title": "Form title",
        "url": "Payment form URL",
        "users": "Users"
      }
    },
    "payments.PaymentFormStars": {
      "desc": "{schema}",
      "params": {
        "bot_id": "",
        "description": "",
        "flags": "Flags, see TL conditional fields",
        "form_id": "",
        "invoice": "",
        "photo": "",
        "title": "",
        "users": ""
      }
    },
    "payments.PaymentReceipt": {
      "desc": "Receipt",
      "params": {
        "bot_id": "Bot ID",
        "credentials_title": "Payment credential name",
        "currency": "Three-letter ISO 4217 currency code",
        "date": "Date of generation",
        "description": "Description",
        "flags": "Flags, see TL conditional fields",
        "info": "Info",
        "invoice": "Invoice",
        "photo": "Photo",
        "provider_id": "Provider ID",
        "shipping": "Selected shipping option",
        "tip_amount": "Tipped amount",
        "title": "Title",
        "total_amount": "Total amount in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).",
        "users": "Users"
      }
    },
    "payments.PaymentReceiptStars": {
      "desc": "{schema}",
      "params": {
        "bot_id": "",
        "currency": "",
        "date": "",
        "description": "",
        "flags": "Flags, see TL conditional fields",
        "invoice": "",
        "photo": "",
        "title": "",
        "total_amount": "",
        "transaction_id": "",
        "users": ""
      }
    },
    "payments.PaymentResult": {
      "desc": "Payment result",
      "params": {
        "updates": "Info about the payment"
      }
    },
    "payments.PaymentVerificationNeeded": {
      "desc": "Payment was not successful, additional verification is needed",
      "params": {
        "url": "URL for additional payment credentials verification"
      }
    },
    "payments.SavedInfo": {
      "desc": "Saved server-side order information",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "has_saved_credentials": "Whether the user has some saved payment credentials",
        "saved_info": "Saved server-side order information"
      }
    },
    "payments.StarsStatus": {
      "desc": "{schema}",
      "params": {
        "balance": "",
        "chats": "",
        "flags": "Flags, see TL conditional fields",
        "history": "",
        "next_offset": "",
        "users": ""
      }
    },
    "payments.ValidatedRequestedInfo": {
      "desc": "Validated user-provided info",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "id": "ID",
        "shipping_options": "Shipping options"
      }
    },
    "phone.ExportedGroupCallInvite": {
      "desc": "An invite to a group call or livestream",
      "params": {
        "link": "Invite link"
      }
    },
    "phone.GroupCall": {
      "desc": "Contains info about a group call, and partial info about its participants.",
      "params": {
        "call": "Info about the group call",
        "chats": "Chats mentioned in the participants vector",
        "participants": "A partial list of participants.",
        "participants_next_offset": "Next offset to use when fetching the remaining participants using phone.getGroupParticipants",
        "users": "Users mentioned in the participants vector"
      }
    },
    "phone.GroupCallStreamChannels": {
      "desc": "Info about RTMP streams in a group call or livestream",
      "params": {
        "channels": "RTMP streams"
      }
    },
    "phone.GroupCallStreamRtmpUrl": {
      "desc": "RTMP URL and stream key to be used in streaming software",
      "params": {
        "key": "Stream key",
        "url": "RTMP URL"
      }
    },
    "phone.GroupParticipants": {
      "desc": "Info about the participants of a group call or livestream",
      "params": {
        "chats": "Mentioned chats",
        "count": "Number of participants",
        "next_offset": "If not empty, the specified list of participants is partial, and more participants can be fetched specifying this parameter as offset in phone.getGroupParticipants.",
        "participants": "List of participants",
        "users": "Mentioned users",
        "version": "Version info"
      }
    },
    "phone.JoinAsPeers": {
      "desc": "A list of peers that can be used to join a group call, presenting yourself as a specific user/channel.",
      "params": {
        "chats": "Chats mentioned in the peers vector",
        "peers": "Peers",
        "users": "Users mentioned in the peers vector"
      }
    },
    "phone.PhoneCall": {
      "desc": "A VoIP phone call",
      "params": {
        "phone_call": "The VoIP phone call",
        "users": "VoIP phone call participants"
      }
    },
    "photos.Photo": {
      "desc": "Photo with auxiliary data.",
      "params": {
        "photo": "Photo",
        "users": "Users"
      }
    },
    "photos.Photos": {
      "desc": "Full list of photos with auxiliary data.",
      "params": {
        "photos": "List of photos",
        "users": "List of mentioned users"
      }
    },
    "photos.PhotosSlice": {
      "desc": "Incomplete list of photos with auxiliary data.",
      "params": {
        "count": "Total number of photos",
        "photos": "List of photos",
        "users": "List of mentioned users"
      }
    },
    "premium.BoostsList": {
      "desc": "List of boosts that were applied to a peer by multiple users.",
      "params": {
        "boosts": "Boosts",
        "count": "Total number of results",
        "flags": "Flags, see TL conditional fields",
        "next_offset": "Offset that can be used for pagination.",
        "users": "Mentioned users"
      }
    },
    "premium.BoostsStatus": {
      "desc": "Contains info about the current boost status of a peer.",
      "params": {
        "boost_url": "Boost deep link \u00bb that can be used to boost the chat.",
        "boosts": "Total number of boosts acquired so far.",
        "current_level_boosts": "The number of boosts acquired so far in the current level.",
        "flags": "Flags, see TL conditional fields",
        "gift_boosts": "The number of boosts acquired from created Telegram Premium gift codes and giveaways; only returned to channel admins.",
        "level": "The current boost level of the channel.",
        "my_boost": "Whether we're currently boosting this channel, my_boost_slots will also be set.",
        "my_boost_slots": "Indicates which of our boost slots we've assigned to this peer (populated if my_boost is set).",
        "next_level_boosts": "Total number of boosts needed to reach the next level; if absent, the next level isn't available.",
        "premium_audience": "Only returned to channel admins: contains the approximated number of Premium users subscribed to the channel, related to the total number of subscribers.",
        "prepaid_giveaways": "A list of prepaid giveaways available for the chat; only returned to channel admins."
      }
    },
    "premium.MyBoosts": {
      "desc": "A list of peers we are currently boosting, and how many boost slots we have left.",
      "params": {
        "chats": "Referenced chats",
        "my_boosts": "Info about boosted peers and remaining boost slots.",
        "users": "Referenced users"
      }
    },
    "smsjobs.EligibleToJoin": {
      "desc": "{schema}",
      "params": {
        "monthly_sent_sms": "",
        "terms_url": ""
      }
    },
    "smsjobs.Status": {
      "desc": "{schema}",
      "params": {
        "allow_international": "",
        "flags": "Flags, see TL conditional fields",
        "last_gift_slug": "",
        "recent_remains": "",
        "recent_sent": "",
        "recent_since": "",
        "terms_url": "",
        "total_sent": "",
        "total_since": ""
      }
    },
    "stats.BroadcastRevenueStats": {
      "desc": "{schema}",
      "params": {
        "balances": "",
        "revenue_graph": "",
        "top_hours_graph": "",
        "usd_rate": ""
      }
    },
    "stats.BroadcastRevenueTransactions": {
      "desc": "{schema}",
      "params": {
        "count": "",
        "transactions": ""
      }
    },
    "stats.BroadcastRevenueWithdrawalUrl": {
      "desc": "{schema}",
      "params": {
        "url": ""
      }
    },
    "stats.BroadcastStats": {
      "desc": "Channel statistics.",
      "params": {
        "enabled_notifications": "Percentage of subscribers with enabled notifications",
        "followers": "Follower count change for period in consideration",
        "followers_graph": "Followers growth graph (relative subscriber count)",
        "growth_graph": "Channel growth graph (absolute subscriber count)",
        "interactions_graph": "Interactions graph (absolute)",
        "iv_interactions_graph": "IV interactions graph (absolute)",
        "languages_graph": "Subscriber language graph (pie chart)",
        "mute_graph": "Muted users graph (relative)",
        "new_followers_by_source_graph": "New followers by source graph (absolute)",
        "period": "Period in consideration",
        "reactions_by_emotion_graph": "A graph containing the number of reactions on posts categorized by emotion",
        "reactions_per_post": "total_reactions/postcount, for posts posted during the period in consideration. Note that in this case, current refers to the period in consideration (min_date till max_date), and prev refers to the previous period ((min_date - (max_date - min_date)) till min_date)",
        "reactions_per_story": "total_reactions/storycount, for posts posted during the period in consideration. Note that in this case, current refers to the period in consideration (min_date till max_date), and prev refers to the previous period ((min_date - (max_date - min_date)) till min_date)",
        "recent_posts_interactions": "Detailed statistics about number of views and shares of recently sent messages and stories",
        "shares_per_post": "total_sharecount/postcount, for posts posted during the period in consideration. Note that in this case, current refers to the period in consideration (min_date till max_date), and prev refers to the previous period ((min_date - (max_date - min_date)) till min_date)",
        "shares_per_story": "total_shares/storycount, for posts posted during the period in consideration. Note that in this case, current refers to the period in consideration (min_date till max_date), and prev refers to the previous period ((min_date - (max_date - min_date)) till min_date)",
        "story_interactions_graph": "A graph containing the number of story views and shares",
        "story_reactions_by_emotion_graph": "A graph containing the number of reactions on stories categorized by emotion",
        "top_hours_graph": "Views per hour graph (absolute)",
        "views_by_source_graph": "Views by source graph (absolute)",
        "views_per_post": "total_viewcount/postcount, for posts posted during the period in consideration. Note that in this case, current refers to the period in consideration (min_date till max_date), and prev refers to the previous period ((min_date - (max_date - min_date)) till min_date).",
        "views_per_story": "total_views/storycount, for posts posted during the period in consideration. Note that in this case, current refers to the period in consideration (min_date till max_date), and prev refers to the previous period ((min_date - (max_date - min_date)) till min_date)"
      }
    },
    "stats.MegagroupStats": {
      "desc": "Supergroup statistics",
      "params": {
        "actions_graph": "Group activity graph (deleted, modified messages, blocked users)",
        "growth_graph": "Supergroup growth graph (absolute subscriber count)",
        "languages_graph": "Subscriber language graph (pie chart)",
        "members": "Member count change for period in consideration",
        "members_graph": "Members growth (relative subscriber count)",
        "messages": "Message number change for period in consideration",
        "messages_graph": "Message activity graph (stacked bar graph, message type)",
        "new_members_by_source_graph": "New members by source graph",
        "period": "Period in consideration",
        "posters": "Number of users that posted messages, for range in consideration",
        "top_admins": "Info about most active group admins",
        "top_hours_graph": "Activity per hour graph (absolute)",
        "top_inviters": "Info about most active group inviters",
        "top_posters": "Info about most active group members",
        "users": "Info about users mentioned in statistics",
        "viewers": "Number of users that viewed messages, for range in consideration",
        "weekdays_graph": "Activity per day of week graph (absolute)"
      }
    },
    "stats.MessageStats": {
      "desc": "Message statistics",
      "params": {
        "reactions_by_emotion_graph": "A graph containing the number of reactions on stories categorized by emotion",
        "views_graph": "Message view graph"
      }
    },
    "stats.PublicForwards": {
      "desc": "Contains info about the forwards of a story as a message to public chats and reposts by public channels.",
      "params": {
        "chats": "Mentioned chats",
        "count": "Total number of results",
        "flags": "Flags, see TL conditional fields",
        "forwards": "Info about the forwards of a story.",
        "next_offset": "Offset used for pagination.",
        "users": "Mentioned users"
      }
    },
    "stats.StoryStats": {
      "desc": "Contains statistics about a story.",
      "params": {
        "reactions_by_emotion_graph": "A bar graph containing the number of story reactions categorized by \"emotion\" (i.e. Positive, Negative, Other, etc...)",
        "views_graph": "A graph containing the number of story views and shares"
      }
    },
    "stickers.SuggestedShortName": {
      "desc": "A suggested short name for a stickerpack",
      "params": {
        "short_name": "Suggested short name"
      }
    },
    "storage.FileGif": {
      "desc": "GIF image. MIME type: image/gif.",
      "params": {}
    },
    "storage.FileJpeg": {
      "desc": "JPEG image. MIME type: image/jpeg.",
      "params": {}
    },
    "storage.FileMov": {
      "desc": "Quicktime video. MIME type: video/quicktime.",
      "params": {}
    },
    "storage.FileMp3": {
      "desc": "Mp3 audio. MIME type: audio/mpeg.",
      "params": {}
    },
    "storage.FileMp4": {
      "desc": "MPEG-4 video. MIME type: video/mp4.",
      "params": {}
    },
    "storage.FilePartial": {
      "desc": "Part of a bigger file.",
      "params": {}
    },
    "storage.FilePdf": {
      "desc": "PDF document image. MIME type: application/pdf.",
      "params": {}
    },
    "storage.FilePng": {
      "desc": "PNG image. MIME type: image/png.",
      "params": {}
    },
    "storage.FileUnknown": {
      "desc": "Unknown type.",
      "params": {}
    },
    "storage.FileWebp": {
      "desc": "WEBP image. MIME type: image/webp.",
      "params": {}
    },
    "stories.AllStories": {
      "desc": "Full list of active (or active and hidden) stories.",
      "params": {
        "chats": "Mentioned chats",
        "count": "Total number of active (or active and hidden) stories",
        "flags": "Flags, see TL conditional fields",
        "has_more": "Whether more results can be fetched as described here \u00bb.",
        "peer_stories": "Stories",
        "state": "State to use for pagination",
        "stealth_mode": "Current stealth mode information",
        "users": "Mentioned users"
      }
    },
    "stories.AllStoriesNotModified": {
      "desc": "The list of active (or active and hidden) stories has not changed.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "state": "State to use to ask for updates",
        "stealth_mode": "Current stealth mode information"
      }
    },
    "stories.PeerStories": {
      "desc": "Active story list of a specific peer.",
      "params": {
        "chats": "Mentioned chats",
        "stories": "Stories",
        "users": "Mentioned users"
      }
    },
    "stories.Stories": {
      "desc": "List of stories",
      "params": {
        "chats": "Mentioned chats",
        "count": "Total number of stories that can be fetched",
        "flags": "Flags, see TL conditional fields",
        "pinned_to_top": "",
        "stories": "Stories",
        "users": "Mentioned users"
      }
    },
    "stories.StoryReactionsList": {
      "desc": "List of peers that reacted to or intercated with a specific story",
      "params": {
        "chats": "Mentioned chats",
        "count": "Total number of reactions matching query",
        "flags": "Flags, see TL conditional fields",
        "next_offset": "If set, indicates the next offset to use to load more results by invoking stories.getStoryReactionsList.",
        "reactions": "List of peers that reacted to or interacted with a specific story",
        "users": "Mentioned users"
      }
    },
    "stories.StoryViews": {
      "desc": "Reaction and view counters for a list of stories",
      "params": {
        "users": "Mentioned users",
        "views": "View date and reaction information of multiple stories"
      }
    },
    "stories.StoryViewsList": {
      "desc": "Reaction and view counters for a story",
      "params": {
        "chats": "Mentioned chats",
        "count": "Total number of results that can be fetched",
        "flags": "Flags, see TL conditional fields",
        "forwards_count": "Total number of story forwards/reposts",
        "next_offset": "Offset for pagination",
        "reactions_count": "Number of reactions that were added to the story",
        "users": "Mentioned users",
        "views": "Story view date and reaction information",
        "views_count": "Total number of story views"
      }
    },
    "updates.ChannelDifference": {
      "desc": "The new updates",
      "params": {
        "chats": "Chats",
        "final": "Whether there are more updates to be fetched using getDifference, starting from the provided pts",
        "flags": "Flags, see TL conditional fields",
        "new_messages": "New messages",
        "other_updates": "Other updates",
        "pts": "The PTS from which to start getting updates the next time",
        "timeout": "Clients are supposed to refetch the channel difference after timeout seconds have elapsed",
        "users": "Users"
      }
    },
    "updates.ChannelDifferenceEmpty": {
      "desc": "There are no new updates",
      "params": {
        "final": "Whether there are more updates that must be fetched (always false)",
        "flags": "Flags, see TL conditional fields",
        "pts": "The latest PTS",
        "timeout": "Clients are supposed to refetch the channel difference after timeout seconds have elapsed"
      }
    },
    "updates.ChannelDifferenceTooLong": {
      "desc": "The provided pts + limit < remote pts. Simply, there are too many updates to be fetched (more than limit), the client has to resolve the update gap in one of the following ways (assuming the existence of a persistent database to locally store messages):",
      "params": {
        "chats": "Chats from messages",
        "dialog": "Dialog containing the latest PTS that can be used to reset the channel state",
        "final": "Whether there are more updates that must be fetched (always false)",
        "flags": "Flags, see TL conditional fields",
        "messages": "The latest messages",
        "timeout": "Clients are supposed to refetch the channel difference after timeout seconds have elapsed",
        "users": "Users from messages"
      }
    },
    "updates.Difference": {
      "desc": "Full list of occurred events.",
      "params": {
        "chats": "List of chats mentioned in events",
        "new_encrypted_messages": "List of new encrypted secret chat messages",
        "new_messages": "List of new messages",
        "other_updates": "List of updates",
        "state": "Current state",
        "users": "List of users mentioned in events"
      }
    },
    "updates.DifferenceEmpty": {
      "desc": "No events.",
      "params": {
        "date": "Current date",
        "seq": "Number of sent updates"
      }
    },
    "updates.DifferenceSlice": {
      "desc": "Incomplete list of occurred events.",
      "params": {
        "chats": "List of chats mentioned in events",
        "intermediate_state": "Intermediary state",
        "new_encrypted_messages": "New messages from the encrypted event sequence",
        "new_messages": "List of new messages",
        "other_updates": "List of updates",
        "users": "List of users mentioned in events"
      }
    },
    "updates.DifferenceTooLong": {
      "desc": "The difference is too long, and the specified state must be used to refetch updates.",
      "params": {
        "pts": "The new state to use."
      }
    },
    "updates.State": {
      "desc": "Updates state.",
      "params": {
        "date": "Date of condition",
        "pts": "Number of events occurred in a text box",
        "qts": "Position in a sequence of updates in secret chats. For further details refer to article secret chats",
        "seq": "Number of sent updates",
        "unread_count": "Number of unread messages"
      }
    },
    "upload.CdnFile": {
      "desc": "Represent a chunk of a CDN file.",
      "params": {
        "bytes": "The data"
      }
    },
    "upload.CdnFileReuploadNeeded": {
      "desc": "The file was cleared from the temporary RAM cache of the CDN and has to be re-uploaded.",
      "params": {
        "request_token": "Request token (see CDN)"
      }
    },
    "upload.File": {
      "desc": "File content.",
      "params": {
        "bytes": "Binary data, file content",
        "mtime": "Modification time",
        "type": "File type"
      }
    },
    "upload.FileCdnRedirect": {
      "desc": "The file must be downloaded from a CDN DC.",
      "params": {
        "dc_id": "CDN DC ID",
        "encryption_iv": "Encryption IV (see CDN files)",
        "encryption_key": "Encryption key (see CDN files)",
        "file_hashes": "File hashes (see CDN files)",
        "file_token": "File token (see CDN files)"
      }
    },
    "upload.WebFile": {
      "desc": "Represents a chunk of an HTTP webfile downloaded through telegram's secure MTProto servers",
      "params": {
        "bytes": "Data",
        "file_type": "File type",
        "mime_type": "Mime type",
        "mtime": "Modified time",
        "size": "File size"
      }
    },
    "users.UserFull": {
      "desc": "Full user information",
      "params": {
        "chats": "Mentioned chats",
        "full_user": "Full user information",
        "users": "Mentioned users"
      }
    }
  },
  "method": {
    "InitConnection": {
      "desc": "Initialize connection",
      "params": {
        "api_id": "Application identifier (see. App configuration)",
        "app_version": "Application version",
        "device_model": "Device model",
        "flags": "Flags, see TL conditional fields",
        "lang_code": "Code for the language used on the client, ISO 639-1 standard",
        "lang_pack": "Language pack to use",
        "params": "Additional initConnection parameters. For now, only the tz_offset field is supported, for specifying timezone offset in seconds.",
        "proxy": "Info about an MTProto proxy",
        "query": "The query itself",
        "system_lang_code": "Code for the language used on the device's OS, ISO 639-1 standard",
        "system_version": "Operation system version"
      }
    },
    "InvokeAfterMsg": {
      "desc": "Invokes a query after successful completion of one of the previous queries.",
      "params": {
        "msg_id": "Message identifier on which a current query depends",
        "query": "The query itself"
      }
    },
    "InvokeAfterMsgs": {
      "desc": "Invokes a query after a successful completion of previous queries",
      "params": {
        "msg_ids": "List of messages on which a current query depends",
        "query": "The query itself"
      }
    },
    "InvokeWithApnsSecret": {
      "desc": "{schema}",
      "params": {
        "nonce": "",
        "query": "",
        "secret": ""
      }
    },
    "InvokeWithBusinessConnection": {
      "desc": "{schema}",
      "params": {
        "connection_id": "",
        "query": ""
      }
    },
    "InvokeWithGooglePlayIntegrity": {
      "desc": "{schema}",
      "params": {
        "nonce": "",
        "query": "",
        "token": ""
      }
    },
    "InvokeWithLayer": {
      "desc": "Invoke the specified query using the specified API layer",
      "params": {
        "layer": "The layer to use",
        "query": "The query"
      }
    },
    "InvokeWithMessagesRange": {
      "desc": "Invoke with the given message range",
      "params": {
        "query": "Query",
        "range": "Message range"
      }
    },
    "InvokeWithTakeout": {
      "desc": "Invoke a method within a takeout session, see here \u00bb for more info.",
      "params": {
        "query": "Query",
        "takeout_id": "Takeout session ID \u00bb"
      }
    },
    "InvokeWithoutUpdates": {
      "desc": "Invoke a request without subscribing the used connection for updates (this is enabled by default for file queries).",
      "params": {
        "query": "The query"
      }
    },
    "account.AcceptAuthorization": {
      "desc": "Sends a Telegram Passport authorization form, effectively sharing data with the service",
      "params": {
        "bot_id": "Bot ID",
        "credentials": "Encrypted values",
        "public_key": "Service's public key",
        "scope": "Telegram Passport element types requested by the service",
        "value_hashes": "Types of values sent and their hashes"
      }
    },
    "account.CancelPasswordEmail": {
      "desc": "Cancel the code that was sent to verify an email to use as 2FA recovery method.",
      "params": {}
    },
    "account.ChangeAuthorizationSettings": {
      "desc": "Change settings related to a session.",
      "params": {
        "call_requests_disabled": "Whether to enable or disable receiving calls: if the flag is not set, the previous setting is not changed",
        "confirmed": "If set, confirms a newly logged in session \u00bb.",
        "encrypted_requests_disabled": "Whether to enable or disable receiving encrypted chats: if the flag is not set, the previous setting is not changed",
        "flags": "Flags, see TL conditional fields",
        "hash": "Session ID from the authorization constructor, fetchable using account.getAuthorizations"
      }
    },
    "account.ChangePhone": {
      "desc": "Change the phone number of the current account",
      "params": {
        "phone_code": "Phone code received when calling account.sendChangePhoneCode",
        "phone_code_hash": "Phone code hash received when calling account.sendChangePhoneCode",
        "phone_number": "New phone number"
      }
    },
    "account.CheckUsername": {
      "desc": "Validates a username and checks availability.",
      "params": {
        "username": "usernameAccepted characters: A-z (case-insensitive), 0-9 and underscores.Length: 5-32 characters."
      }
    },
    "account.ClearRecentEmojiStatuses": {
      "desc": "Clears list of recently used emoji statuses",
      "params": {}
    },
    "account.ConfirmPasswordEmail": {
      "desc": "Verify an email to use as 2FA recovery method.",
      "params": {
        "code": "The phone code that was received after setting a recovery email"
      }
    },
    "account.ConfirmPhone": {
      "desc": "Confirm a phone number to cancel account deletion, for more info click here \u00bb",
      "params": {
        "phone_code": "SMS code, for more info click here \u00bb",
        "phone_code_hash": "Phone code hash, for more info click here \u00bb"
      }
    },
    "account.CreateBusinessChatLink": {
      "desc": "{schema}",
      "params": {
        "link": ""
      }
    },
    "account.CreateTheme": {
      "desc": "Create a theme",
      "params": {
        "document": "Theme file",
        "flags": "Flags, see TL conditional fields",
        "settings": "Theme settings, multiple values can be provided for the different base themes (day/night mode, etc).",
        "slug": "Unique theme ID used to generate theme deep links, can be empty to autogenerate a random ID.",
        "title": "Theme name"
      }
    },
    "account.DeclinePasswordReset": {
      "desc": "Abort a pending 2FA password reset, see here for more info \u00bb",
      "params": {}
    },
    "account.DeleteAccount": {
      "desc": "Delete the user's account from the telegram servers.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "password": "2FA password: this field can be omitted even for accounts with 2FA enabled: in this case account account deletion will be delayed by 7 days as specified in the docs \u00bb",
        "reason": "Why is the account being deleted, can be empty"
      }
    },
    "account.DeleteAutoSaveExceptions": {
      "desc": "Clear all peer-specific autosave settings.",
      "params": {}
    },
    "account.DeleteBusinessChatLink": {
      "desc": "{schema}",
      "params": {
        "slug": ""
      }
    },
    "account.DeleteSecureValue": {
      "desc": "Delete stored Telegram Passport documents, for more info see the passport docs \u00bb",
      "params": {
        "types": "Document types to delete"
      }
    },
    "account.DisablePeerConnectedBot": {
      "desc": "{schema}",
      "params": {
        "peer": ""
      }
    },
    "account.EditBusinessChatLink": {
      "desc": "{schema}",
      "params": {
        "link": "",
        "slug": ""
      }
    },
    "account.FinishTakeoutSession": {
      "desc": "Terminate a takeout session, see here \u00bb for more info.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "success": "Data exported successfully"
      }
    },
    "account.GetAccountTTL": {
      "desc": "Get days to live of account",
      "params": {}
    },
    "account.GetAllSecureValues": {
      "desc": "Get all saved Telegram Passport documents, for more info see the passport docs \u00bb",
      "params": {}
    },
    "account.GetAuthorizationForm": {
      "desc": "Returns a Telegram Passport authorization form for sharing data with a service",
      "params": {
        "bot_id": "User identifier of the service's bot",
        "public_key": "Service's public key",
        "scope": "Telegram Passport element types requested by the service"
      }
    },
    "account.GetAuthorizations": {
      "desc": "Get logged-in sessions",
      "params": {}
    },
    "account.GetAutoDownloadSettings": {
      "desc": "Get media autodownload settings",
      "params": {}
    },
    "account.GetAutoSaveSettings": {
      "desc": "Get autosave settings",
      "params": {}
    },
    "account.GetBotBusinessConnection": {
      "desc": "{schema}",
      "params": {
        "connection_id": ""
      }
    },
    "account.GetBusinessChatLinks": {
      "desc": "{schema}",
      "params": {}
    },
    "account.GetChannelDefaultEmojiStatuses": {
      "desc": "Get a list of default suggested channel emoji statuses.",
      "params": {
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the account.emojiStatuses.hash field returned by a previous call to the method, or pass 0 if this is the first call."
      }
    },
    "account.GetChannelRestrictedStatusEmojis": {
      "desc": "Returns fetch the full list of custom emoji IDs \u00bb that cannot be used in channel emoji statuses \u00bb.",
      "params": {
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the emojiList.hash field returned by a previous call to the method, or pass 0 if this is the first call."
      }
    },
    "account.GetChatThemes": {
      "desc": "Get all available chat themes \u00bb.",
      "params": {
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the account.themes.hash field returned by a previous call to the method, or pass 0 if this is the first call."
      }
    },
    "account.GetConnectedBots": {
      "desc": "{schema}",
      "params": {}
    },
    "account.GetContactSignUpNotification": {
      "desc": "Whether the user will receive notifications when contacts sign up",
      "params": {}
    },
    "account.GetContentSettings": {
      "desc": "Get sensitive content settings",
      "params": {}
    },
    "account.GetDefaultBackgroundEmojis": {
      "desc": "Get a set of suggested custom emoji stickers that can be used in an accent color pattern.",
      "params": {
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the emojiList.hash field returned by a previous call to the method, or pass 0 if this is the first call."
      }
    },
    "account.GetDefaultEmojiStatuses": {
      "desc": "Get a list of default suggested emoji statuses",
      "params": {
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the account.emojiStatuses.hash field returned by a previous call to the method, or pass 0 if this is the first call."
      }
    },
    "account.GetDefaultGroupPhotoEmojis": {
      "desc": "Get a set of suggested custom emoji stickers that can be used as group picture",
      "params": {
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the emojiList.hash field returned by a previous call to the method, or pass 0 if this is the first call."
      }
    },
    "account.GetDefaultProfilePhotoEmojis": {
      "desc": "Get a set of suggested custom emoji stickers that can be used as profile picture",
      "params": {
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the emojiList.hash field returned by a previous call to the method, or pass 0 if this is the first call."
      }
    },
    "account.GetGlobalPrivacySettings": {
      "desc": "Get global privacy settings",
      "params": {}
    },
    "account.GetMultiWallPapers": {
      "desc": "Get info about multiple wallpapers",
      "params": {
        "wallpapers": "Wallpapers to fetch info about"
      }
    },
    "account.GetNotifyExceptions": {
      "desc": "Returns list of chats with non-default notification settings",
      "params": {
        "compare_sound": "If set, chats with non-default sound will be returned",
        "compare_stories": "If set, chats with non-default notification settings for stories will be returned",
        "flags": "Flags, see TL conditional fields",
        "peer": "If specified, only chats of the specified category will be returned"
      }
    },
    "account.GetNotifySettings": {
      "desc": "Gets current notification settings for a given user/group, from all users/all groups.",
      "params": {
        "peer": "Notification source"
      }
    },
    "account.GetPassword": {
      "desc": "Obtain configuration for two-factor authorization with password",
      "params": {}
    },
    "account.GetPasswordSettings": {
      "desc": "Get private info associated to the password info (recovery email, telegram passport info & so on)",
      "params": {
        "password": "The password (see SRP)"
      }
    },
    "account.GetPrivacy": {
      "desc": "Get privacy settings of current account",
      "params": {
        "key": "Peer category whose privacy settings should be fetched"
      }
    },
    "account.GetReactionsNotifySettings": {
      "desc": "{schema}",
      "params": {}
    },
    "account.GetRecentEmojiStatuses": {
      "desc": "Get recently used emoji statuses",
      "params": {
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the account.emojiStatuses.hash field returned by a previous call to the method, or pass 0 if this is the first call."
      }
    },
    "account.GetSavedRingtones": {
      "desc": "Fetch saved notification sounds",
      "params": {
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the account.savedRingtones.hash field returned by a previous call to the method, or pass 0 if this is the first call."
      }
    },
    "account.GetSecureValue": {
      "desc": "Get saved Telegram Passport document, for more info see the passport docs \u00bb",
      "params": {
        "types": "Requested value types"
      }
    },
    "account.GetTheme": {
      "desc": "Get theme information",
      "params": {
        "format": "Theme format, a string that identifies the theming engines supported by the client",
        "theme": "Theme"
      }
    },
    "account.GetThemes": {
      "desc": "Get installed themes",
      "params": {
        "format": "Theme format, a string that identifies the theming engines supported by the client",
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the account.themes.hash field returned by a previous call to the method, or pass 0 if this is the first call."
      }
    },
    "account.GetTmpPassword": {
      "desc": "Get temporary payment password",
      "params": {
        "password": "SRP password parameters",
        "period": "Time during which the temporary password will be valid, in seconds; should be between 60 and 86400"
      }
    },
    "account.GetWallPaper": {
      "desc": "Get info about a certain wallpaper",
      "params": {
        "wallpaper": "The wallpaper to get info about"
      }
    },
    "account.GetWallPapers": {
      "desc": "Returns a list of available wallpapers.",
      "params": {
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the account.wallPapers.hash field returned by a previous call to the method, or pass 0 if this is the first call."
      }
    },
    "account.GetWebAuthorizations": {
      "desc": "Get web login widget authorizations",
      "params": {}
    },
    "account.InitTakeoutSession": {
      "desc": "Initialize a takeout session, see here \u00bb for more info.",
      "params": {
        "contacts": "Whether to export contacts",
        "file_max_size": "Maximum size of files to export",
        "files": "Whether to export files",
        "flags": "Flags, see TL conditional fields",
        "message_channels": "Whether to export messages in channels",
        "message_chats": "Whether to export messages in basic groups",
        "message_megagroups": "Whether to export messages in supergroups",
        "message_users": "Whether to export messages in private chats"
      }
    },
    "account.InstallTheme": {
      "desc": "Install a theme",
      "params": {
        "base_theme": "Indicates a basic theme provided by all clients",
        "dark": "Whether to install the dark version",
        "flags": "Flags, see TL conditional fields",
        "format": "Theme format, a string that identifies the theming engines supported by the client",
        "theme": "Theme to install"
      }
    },
    "account.InstallWallPaper": {
      "desc": "Install wallpaper",
      "params": {
        "settings": "Wallpaper settings",
        "wallpaper": "Wallpaper to install"
      }
    },
    "account.InvalidateSignInCodes": {
      "desc": "Invalidate the specified login codes, see here \u00bb for more info.",
      "params": {
        "codes": "The login codes to invalidate."
      }
    },
    "account.RegisterDevice": {
      "desc": "Register device to receive PUSH notifications",
      "params": {
        "app_sandbox": "If (boolTrue) is transmitted, a sandbox-certificate will be used during transmission.",
        "flags": "Flags, see TL conditional fields",
        "no_muted": "Avoid receiving (silent and invisible background) notifications. Useful to save battery.",
        "other_uids": "List of user identifiers of other users currently using the client",
        "secret": "For FCM and APNS VoIP, optional encryption key used to encrypt push notifications",
        "token": "Device token, see PUSH updates for the possible values.",
        "token_type": "Device token type, see PUSH updates for the possible values."
      }
    },
    "account.ReorderUsernames": {
      "desc": "Reorder usernames associated with the currently logged-in user.",
      "params": {
        "order": "The new order for active usernames. All active usernames must be specified."
      }
    },
    "account.ReportPeer": {
      "desc": "Report a peer for violation of telegram's Terms of Service",
      "params": {
        "message": "Comment for report moderation",
        "peer": "The peer to report",
        "reason": "The reason why this peer is being reported"
      }
    },
    "account.ReportProfilePhoto": {
      "desc": "Report a profile photo of a dialog",
      "params": {
        "message": "Comment for report moderation",
        "peer": "The dialog",
        "photo_id": "Dialog photo ID",
        "reason": "Report reason"
      }
    },
    "account.ResendPasswordEmail": {
      "desc": "Resend the code to verify an email to use as 2FA recovery method.",
      "params": {}
    },
    "account.ResetAuthorization": {
      "desc": "Log out an active authorized session by its hash",
      "params": {
        "hash": "Session hash"
      }
    },
    "account.ResetNotifySettings": {
      "desc": "Resets all notification settings from users and groups.",
      "params": {}
    },
    "account.ResetPassword": {
      "desc": "Initiate a 2FA password reset: can only be used if the user is already logged-in, see here for more info \u00bb",
      "params": {}
    },
    "account.ResetWallPapers": {
      "desc": "Delete all installed wallpapers, reverting to the default wallpaper set.",
      "params": {}
    },
    "account.ResetWebAuthorization": {
      "desc": "Log out an active web telegram login session",
      "params": {
        "hash": "Session hash"
      }
    },
    "account.ResetWebAuthorizations": {
      "desc": "Reset all active web telegram login sessions",
      "params": {}
    },
    "account.ResolveBusinessChatLink": {
      "desc": "{schema}",
      "params": {
        "slug": ""
      }
    },
    "account.SaveAutoDownloadSettings": {
      "desc": "Change media autodownload settings",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "high": "Whether to save media in the high data usage preset",
        "low": "Whether to save media in the low data usage preset",
        "settings": "Media autodownload settings"
      }
    },
    "account.SaveAutoSaveSettings": {
      "desc": "Modify autosave settings",
      "params": {
        "broadcasts": "Whether the new settings should affect all channels",
        "chats": "Whether the new settings should affect all groups",
        "flags": "Flags, see TL conditional fields",
        "peer": "Whether the new settings should affect a specific peer",
        "settings": "The new autosave settings",
        "users": "Whether the new settings should affect all private chats"
      }
    },
    "account.SaveRingtone": {
      "desc": "Save or remove saved notification sound.",
      "params": {
        "id": "Notification sound uploaded using account.uploadRingtone",
        "unsave": "Whether to add or delete the notification sound"
      }
    },
    "account.SaveSecureValue": {
      "desc": "Securely save Telegram Passport document, for more info see the passport docs \u00bb",
      "params": {
        "secure_secret_id": "Passport secret hash, for more info see the passport docs \u00bb",
        "value": "Secure value, for more info see the passport docs \u00bb"
      }
    },
    "account.SaveTheme": {
      "desc": "Save a theme",
      "params": {
        "theme": "Theme to save",
        "unsave": "Unsave"
      }
    },
    "account.SaveWallPaper": {
      "desc": "Install/uninstall wallpaper",
      "params": {
        "settings": "Wallpaper settings",
        "unsave": "Uninstall wallpaper?",
        "wallpaper": "Wallpaper to install or uninstall"
      }
    },
    "account.SendChangePhoneCode": {
      "desc": "Verify a new phone number to associate to the current account",
      "params": {
        "phone_number": "New phone number",
        "settings": "Phone code settings"
      }
    },
    "account.SendConfirmPhoneCode": {
      "desc": "Send confirmation code to cancel account deletion, for more info click here \u00bb",
      "params": {
        "hash": "The hash from the service notification, for more info click here \u00bb",
        "settings": "Phone code settings"
      }
    },
    "account.SendVerifyEmailCode": {
      "desc": "Send an email verification code.",
      "params": {
        "email": "The email where to send the code.",
        "purpose": "Verification purpose."
      }
    },
    "account.SendVerifyPhoneCode": {
      "desc": "Send the verification phone code for telegram passport.",
      "params": {
        "phone_number": "The phone number to verify",
        "settings": "Phone code settings"
      }
    },
    "account.SetAccountTTL": {
      "desc": "Set account self-destruction period",
      "params": {
        "ttl": "Time to live in days"
      }
    },
    "account.SetAuthorizationTTL": {
      "desc": "Set time-to-live of current session",
      "params": {
        "authorization_ttl_days": "Time-to-live of current session in days"
      }
    },
    "account.SetContactSignUpNotification": {
      "desc": "Toggle contact sign up notifications",
      "params": {
        "silent": "Whether to disable contact sign up notifications"
      }
    },
    "account.SetContentSettings": {
      "desc": "Set sensitive content settings (for viewing or hiding NSFW content)",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "sensitive_enabled": "Enable NSFW content"
      }
    },
    "account.SetGlobalPrivacySettings": {
      "desc": "Set global privacy settings",
      "params": {
        "settings": "Global privacy settings"
      }
    },
    "account.SetPrivacy": {
      "desc": "Change privacy settings of current account",
      "params": {
        "key": "New privacy rule",
        "rules": "Peers to which the privacy rule will apply."
      }
    },
    "account.SetReactionsNotifySettings": {
      "desc": "{schema}",
      "params": {
        "settings": ""
      }
    },
    "account.ToggleConnectedBotPaused": {
      "desc": "{schema}",
      "params": {
        "paused": "",
        "peer": ""
      }
    },
    "account.ToggleSponsoredMessages": {
      "desc": "{schema}",
      "params": {
        "enabled": ""
      }
    },
    "account.ToggleUsername": {
      "desc": "Activate or deactivate a purchased fragment.com username associated to the currently logged-in user.",
      "params": {
        "active": "Whether to activate or deactivate it",
        "username": "Username"
      }
    },
    "account.UnregisterDevice": {
      "desc": "Deletes a device by its token, stops sending PUSH-notifications to it.",
      "params": {
        "other_uids": "List of user identifiers of other users currently using the client",
        "token": "Device token, see PUSH updates for the possible values.",
        "token_type": "Device token type, see PUSH updates for the possible values."
      }
    },
    "account.UpdateBirthday": {
      "desc": "{schema}",
      "params": {
        "birthday": "",
        "flags": "Flags, see TL conditional fields"
      }
    },
    "account.UpdateBusinessAwayMessage": {
      "desc": "{schema}",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "message": ""
      }
    },
    "account.UpdateBusinessGreetingMessage": {
      "desc": "{schema}",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "message": ""
      }
    },
    "account.UpdateBusinessIntro": {
      "desc": "{schema}",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "intro": ""
      }
    },
    "account.UpdateBusinessLocation": {
      "desc": "{schema}",
      "params": {
        "address": "",
        "flags": "Flags, see TL conditional fields",
        "geo_point": ""
      }
    },
    "account.UpdateBusinessWorkHours": {
      "desc": "{schema}",
      "params": {
        "business_work_hours": "",
        "flags": "Flags, see TL conditional fields"
      }
    },
    "account.UpdateColor": {
      "desc": "Update the accent color and background custom emoji \u00bb of the current account.",
      "params": {
        "background_emoji_id": "Custom emoji ID used in the accent color pattern.",
        "color": "ID of the accent color palette \u00bb to use (not RGB24, see here \u00bb for more info).",
        "flags": "Flags, see TL conditional fields",
        "for_profile": "Whether to change the accent color emoji pattern of the profile page; otherwise, the accent color and emoji pattern of messages will be changed."
      }
    },
    "account.UpdateConnectedBot": {
      "desc": "{schema}",
      "params": {
        "bot": "",
        "can_reply": "",
        "deleted": "",
        "flags": "Flags, see TL conditional fields",
        "recipients": ""
      }
    },
    "account.UpdateDeviceLocked": {
      "desc": "When client-side passcode lock feature is enabled, will not show message texts in incoming PUSH notifications.",
      "params": {
        "period": "Inactivity period after which to start hiding message texts in PUSH notifications."
      }
    },
    "account.UpdateEmojiStatus": {
      "desc": "Set an emoji status",
      "params": {
        "emoji_status": "Emoji status to set"
      }
    },
    "account.UpdateNotifySettings": {
      "desc": "Edits notification settings from a given user/group, from all users/all groups.",
      "params": {
        "peer": "Notification source",
        "settings": "Notification settings"
      }
    },
    "account.UpdatePasswordSettings": {
      "desc": "Set a new 2FA password",
      "params": {
        "new_settings": "The new password (see SRP)",
        "password": "The old password (see SRP)"
      }
    },
    "account.UpdatePersonalChannel": {
      "desc": "{schema}",
      "params": {
        "channel": ""
      }
    },
    "account.UpdateProfile": {
      "desc": "Updates user profile.",
      "params": {
        "about": "New bio",
        "first_name": "New user first name",
        "flags": "Flags, see TL conditional fields",
        "last_name": "New user last name"
      }
    },
    "account.UpdateStatus": {
      "desc": "Updates online user status.",
      "params": {
        "offline": "If (boolTrue) is transmitted, user status will change to (userStatusOffline)."
      }
    },
    "account.UpdateTheme": {
      "desc": "Update theme",
      "params": {
        "document": "Theme file",
        "flags": "Flags, see TL conditional fields",
        "format": "Theme format, a string that identifies the theming engines supported by the client",
        "settings": "Theme settings",
        "slug": "Unique theme ID",
        "theme": "Theme to update",
        "title": "Theme name"
      }
    },
    "account.UpdateUsername": {
      "desc": "Changes username for the current user.",
      "params": {
        "username": "username or empty string if username is to be removedAccepted characters: a-z (case-insensitive), 0-9 and underscores.Length: 5-32 characters."
      }
    },
    "account.UploadRingtone": {
      "desc": "Upload notification sound, use account.saveRingtone to convert it and add it to the list of saved notification sounds.",
      "params": {
        "file": "Notification sound",
        "file_name": "File name",
        "mime_type": "MIME type of file"
      }
    },
    "account.UploadTheme": {
      "desc": "Upload theme",
      "params": {
        "file": "Previously uploaded theme file with platform-specific colors for UI components, can be left unset when creating themes that only modify the wallpaper or accent colors.",
        "file_name": "File name",
        "flags": "Flags, see TL conditional fields",
        "mime_type": "MIME type, must be application/x-tgtheme-{format}, where format depends on the client",
        "thumb": "Thumbnail"
      }
    },
    "account.UploadWallPaper": {
      "desc": "Create and upload a new wallpaper",
      "params": {
        "file": "The JPG/PNG wallpaper",
        "flags": "Flags, see TL conditional fields",
        "for_chat": "Set this flag when uploading wallpapers to be passed to messages.setChatWallPaper.",
        "mime_type": "MIME type of uploaded wallpaper",
        "settings": "Wallpaper settings"
      }
    },
    "account.VerifyEmail": {
      "desc": "Verify an email address.",
      "params": {
        "purpose": "Verification purpose",
        "verification": "Email verification code or token"
      }
    },
    "account.VerifyPhone": {
      "desc": "Verify a phone number for telegram passport.",
      "params": {
        "phone_code": "Code received after the call to account.sendVerifyPhoneCode",
        "phone_code_hash": "Phone code hash received from the call to account.sendVerifyPhoneCode",
        "phone_number": "Phone number"
      }
    },
    "auth.AcceptLoginToken": {
      "desc": "Accept QR code login token, logging in the app that generated it.",
      "params": {
        "token": "Login token embedded in QR code, for more info, see login via QR code."
      }
    },
    "auth.BindTempAuthKey": {
      "desc": "Binds a temporary authorization key temp_auth_key_id to the permanent authorization key perm_auth_key_id. Each permanent key may only be bound to one temporary key at a time, binding a new temporary key overwrites the previous one.",
      "params": {
        "encrypted_message": "See Generating encrypted_message",
        "expires_at": "Unix timestamp to invalidate temporary key, see Binding message contents",
        "nonce": "Random long from Binding message contents",
        "perm_auth_key_id": "Permanent auth_key_id to bind to"
      }
    },
    "auth.CancelCode": {
      "desc": "Cancel the login verification code",
      "params": {
        "phone_code_hash": "Phone code hash from auth.sendCode",
        "phone_number": "Phone number"
      }
    },
    "auth.CheckPassword": {
      "desc": "Try logging to an account protected by a 2FA password.",
      "params": {
        "password": "The account's password (see SRP)"
      }
    },
    "auth.CheckRecoveryPassword": {
      "desc": "Check if the 2FA recovery code sent using auth.requestPasswordRecovery is valid, before passing it to auth.recoverPassword.",
      "params": {
        "code": "Code received via email"
      }
    },
    "auth.DropTempAuthKeys": {
      "desc": "Delete all temporary authorization keys except for the ones specified",
      "params": {
        "except_auth_keys": "The auth keys that shouldn't be dropped."
      }
    },
    "auth.ExportAuthorization": {
      "desc": "Returns data for copying authorization to another data-center.",
      "params": {
        "dc_id": "Number of a target data-center"
      }
    },
    "auth.ExportLoginToken": {
      "desc": "Generate a login token, for login via QR code.\nThe generated login token should be encoded using base64url, then shown as a tg://login?token=base64encodedtoken deep link \u00bb in the QR code.",
      "params": {
        "api_hash": "Application identifier hash (see. App configuration)",
        "api_id": "Application identifier (see. App configuration)",
        "except_ids": "List of already logged-in user IDs, to prevent logging in twice with the same user"
      }
    },
    "auth.ImportAuthorization": {
      "desc": "Logs in a user using a key transmitted from his native data-center.",
      "params": {
        "bytes": "Authorization key",
        "id": "User ID"
      }
    },
    "auth.ImportBotAuthorization": {
      "desc": "Login as a bot",
      "params": {
        "api_hash": "Application identifier hash (see. App configuration)",
        "api_id": "Application identifier (see. App configuration)",
        "bot_auth_token": "Bot token (see bots)",
        "flags": "Reserved for future use"
      }
    },
    "auth.ImportLoginToken": {
      "desc": "Login using a redirected login token, generated in case of DC mismatch during QR code login.",
      "params": {
        "token": "Login token"
      }
    },
    "auth.ImportWebTokenAuthorization": {
      "desc": "Login by importing an authorization token",
      "params": {
        "api_hash": "API hash",
        "api_id": "API ID",
        "web_auth_token": "The authorization token"
      }
    },
    "auth.LogOut": {
      "desc": "Logs out the user.",
      "params": {}
    },
    "auth.RecoverPassword": {
      "desc": "Reset the 2FA password using the recovery code sent using auth.requestPasswordRecovery.",
      "params": {
        "code": "Code received via email",
        "flags": "Flags, see TL conditional fields",
        "new_settings": "New password"
      }
    },
    "auth.ReportMissingCode": {
      "desc": "{schema}",
      "params": {
        "mnc": "",
        "phone_code_hash": "",
        "phone_number": ""
      }
    },
    "auth.RequestFirebaseSms": {
      "desc": "Request an SMS code via Firebase.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "ios_push_secret": "Secret token received via an apple push notification",
        "phone_code_hash": "Phone code hash returned by auth.sendCode",
        "phone_number": "Phone number",
        "play_integrity_token": "",
        "safety_net_token": "On Android, a JWS object obtained as described in the auth documentation \u00bb"
      }
    },
    "auth.RequestPasswordRecovery": {
      "desc": "Request recovery code of a 2FA password, only for accounts with a recovery email configured.",
      "params": {}
    },
    "auth.ResendCode": {
      "desc": "Resend the login code via another medium, the phone code type is determined by the return value of the previous auth.sendCode/auth.resendCode: see login for more info.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "phone_code_hash": "The phone code hash obtained from auth.sendCode",
        "phone_number": "The phone number",
        "reason": ""
      }
    },
    "auth.ResetAuthorizations": {
      "desc": "Terminates all user's authorized sessions except for the current one.",
      "params": {}
    },
    "auth.ResetLoginEmail": {
      "desc": "Reset the login email \u00bb.",
      "params": {
        "phone_code_hash": "Phone code hash, obtained as described in the documentation \u00bb",
        "phone_number": "Phone number of the account"
      }
    },
    "auth.SendCode": {
      "desc": "Send the verification code for login",
      "params": {
        "api_hash": "Application secret hash (see App configuration)",
        "api_id": "Application identifier (see App configuration)",
        "phone_number": "Phone number in international format",
        "settings": "Settings for the code type to send"
      }
    },
    "auth.SignIn": {
      "desc": "Signs in a user with a validated phone number.",
      "params": {
        "email_verification": "Email verification code or token",
        "flags": "Flags, see TL conditional fields",
        "phone_code": "Valid numerical code from the SMS-message",
        "phone_code_hash": "SMS-message ID, obtained from auth.sendCode",
        "phone_number": "Phone number in the international format"
      }
    },
    "auth.SignUp": {
      "desc": "Registers a validated phone number in the system.",
      "params": {
        "first_name": "New user first name",
        "flags": "Flags, see TL conditional fields",
        "last_name": "New user last name",
        "no_joined_notifications": "",
        "phone_code_hash": "SMS-message ID",
        "phone_number": "Phone number in the international format"
      }
    },
    "bots.AllowSendMessage": {
      "desc": "Allow the specified bot to send us messages",
      "params": {
        "bot": "The bot"
      }
    },
    "bots.AnswerWebhookJSONQuery": {
      "desc": "Answers a custom query; for bots only",
      "params": {
        "data": "JSON-serialized answer to the query",
        "query_id": "Identifier of a custom query"
      }
    },
    "bots.CanSendMessage": {
      "desc": "Check whether the specified bot can send us messages",
      "params": {
        "bot": "The bot"
      }
    },
    "bots.GetBotCommands": {
      "desc": "Obtain a list of bot commands for the specified bot scope and language code",
      "params": {
        "lang_code": "Language code",
        "scope": "Command scope"
      }
    },
    "bots.GetBotInfo": {
      "desc": "Get localized name, about text and description of a bot (or of the current account, if called by a bot).",
      "params": {
        "bot": "If called by a user, must contain the peer of a bot we own.",
        "flags": "Flags, see TL conditional fields",
        "lang_code": "Language code, if left empty this method will return the fallback about text and description."
      }
    },
    "bots.GetBotMenuButton": {
      "desc": "Gets the menu button action for a given user or for all users, previously set using bots.setBotMenuButton; users can see this information in the botInfo constructor.",
      "params": {
        "user_id": "User ID or empty for the default menu button."
      }
    },
    "bots.InvokeWebViewCustomMethod": {
      "desc": "Send a custom request from a mini bot app, triggered by a web_app_invoke_custom_method event \u00bb.",
      "params": {
        "bot": "Identifier of the bot associated to the mini bot app",
        "custom_method": "Identifier of the custom method to invoke",
        "params": "Method parameters"
      }
    },
    "bots.ReorderUsernames": {
      "desc": "Reorder usernames associated to a bot we own.",
      "params": {
        "bot": "The bot",
        "order": "The new order for active usernames. All active usernames must be specified."
      }
    },
    "bots.ResetBotCommands": {
      "desc": "Clear bot commands for the specified bot scope and language code",
      "params": {
        "lang_code": "Language code",
        "scope": "Command scope"
      }
    },
    "bots.SendCustomRequest": {
      "desc": "Sends a custom request; for bots only",
      "params": {
        "custom_method": "The method name",
        "params": "JSON-serialized method parameters"
      }
    },
    "bots.SetBotBroadcastDefaultAdminRights": {
      "desc": "Set the default suggested admin rights for bots being added as admins to channels, see here for more info on how to handle them \u00bb.",
      "params": {
        "admin_rights": "Admin rights"
      }
    },
    "bots.SetBotCommands": {
      "desc": "Set bot command list",
      "params": {
        "commands": "Bot commands",
        "lang_code": "Language code",
        "scope": "Command scope"
      }
    },
    "bots.SetBotGroupDefaultAdminRights": {
      "desc": "Set the default suggested admin rights for bots being added as admins to groups, see here for more info on how to handle them \u00bb.",
      "params": {
        "admin_rights": "Admin rights"
      }
    },
    "bots.SetBotInfo": {
      "desc": "Set localized name, about text and description of a bot (or of the current account, if called by a bot).",
      "params": {
        "about": "New about text",
        "bot": "If called by a user, must contain the peer of a bot we own.",
        "description": "New description",
        "flags": "Flags, see TL conditional fields",
        "lang_code": "Language code, if left empty update the fallback about text and description",
        "name": "New bot name"
      }
    },
    "bots.SetBotMenuButton": {
      "desc": "Sets the menu button action \u00bb for a given user or for all users",
      "params": {
        "button": "Bot menu button action",
        "user_id": "User ID"
      }
    },
    "bots.ToggleUsername": {
      "desc": "Activate or deactivate a purchased fragment.com username associated to a bot we own.",
      "params": {
        "active": "Whether to activate or deactivate it",
        "bot": "The bot",
        "username": "Username"
      }
    },
    "channels.CheckUsername": {
      "desc": "Check if a username is free and can be assigned to a channel/supergroup",
      "params": {
        "channel": "The channel/supergroup that will assigned the specified username",
        "username": "The username to check"
      }
    },
    "channels.ClickSponsoredMessage": {
      "desc": "Informs the server that the user has either:",
      "params": {
        "channel": "Channel where the sponsored message was posted",
        "random_id": "Message ID"
      }
    },
    "channels.ConvertToGigagroup": {
      "desc": "Convert a supergroup to a gigagroup, when requested by channel suggestions.",
      "params": {
        "channel": "The supergroup to convert"
      }
    },
    "channels.CreateChannel": {
      "desc": "Create a supergroup/channel.",
      "params": {
        "about": "Channel description",
        "address": "Geogroup address, see here \u00bb for more info on geogroups.",
        "broadcast": "Whether to create a channel",
        "flags": "Flags, see TL conditional fields",
        "for_import": "Whether the supergroup is being created to import messages from a foreign chat service using messages.initHistoryImport",
        "forum": "Whether to create a forum",
        "geo_point": "Geogroup location, see here \u00bb for more info on geogroups.",
        "megagroup": "Whether to create a supergroup",
        "title": "Channel title",
        "ttl_period": "Time-to-live of all messages that will be sent in the supergroup: once message.date+message.ttl_period === time(), the message will be deleted on the server, and must be deleted locally as well. You can use messages.setDefaultHistoryTTL to edit this value later."
      }
    },
    "channels.CreateForumTopic": {
      "desc": "Create a forum topic; requires manage_topics rights.",
      "params": {
        "channel": "The forum",
        "flags": "Flags, see TL conditional fields",
        "icon_color": "If no custom emoji icon is specified, specifies the color of the fallback topic icon (RGB), one of 0x6FB9F0, 0xFFD67E, 0xCB86DB, 0x8EEE98, 0xFF93B2, or 0xFB6F5F.",
        "icon_emoji_id": "ID of the custom emoji used as topic icon. Telegram Premium users can use any custom emoji, other users can only use the custom emojis contained in the inputStickerSetEmojiDefaultTopicIcons emoji pack.",
        "random_id": "Unique client message ID to prevent duplicate sending of the same event",
        "send_as": "Create the topic as the specified peer",
        "title": "Topic title (maximum UTF-8 length: 128)"
      }
    },
    "channels.DeactivateAllUsernames": {
      "desc": "Disable all purchased usernames of a supergroup or channel",
      "params": {
        "channel": "Supergroup or channel"
      }
    },
    "channels.DeleteChannel": {
      "desc": "Delete a channel/supergroup",
      "params": {
        "channel": "Channel/supergroup to delete"
      }
    },
    "channels.DeleteHistory": {
      "desc": "Delete the history of a supergroup",
      "params": {
        "channel": "Supergroup whose history must be deleted",
        "flags": "Flags, see TL conditional fields",
        "for_everyone": "Whether the history should be deleted for everyone",
        "max_id": "ID of message up to which the history must be deleted"
      }
    },
    "channels.DeleteMessages": {
      "desc": "Delete messages in a channel/supergroup",
      "params": {
        "channel": "Channel/supergroup",
        "id": "IDs of messages to delete"
      }
    },
    "channels.DeleteParticipantHistory": {
      "desc": "Delete all messages sent by a specific participant of a given supergroup",
      "params": {
        "channel": "Supergroup",
        "participant": "The participant whose messages should be deleted"
      }
    },
    "channels.DeleteTopicHistory": {
      "desc": "Delete message history of a forum topic",
      "params": {
        "channel": "Forum",
        "top_msg_id": "Topic ID"
      }
    },
    "channels.EditAdmin": {
      "desc": "Modify the admin rights of a user in a supergroup/channel.",
      "params": {
        "admin_rights": "The admin rights",
        "channel": "The supergroup/channel.",
        "rank": "Indicates the role (rank) of the admin in the group: just an arbitrary string",
        "user_id": "The ID of the user whose admin rights should be modified"
      }
    },
    "channels.EditBanned": {
      "desc": "Ban/unban/kick a user in a supergroup/channel.",
      "params": {
        "banned_rights": "The banned rights",
        "channel": "The supergroup/channel.",
        "participant": "Participant to ban"
      }
    },
    "channels.EditCreator": {
      "desc": "Transfer channel ownership",
      "params": {
        "channel": "Channel",
        "password": "2FA password of account",
        "user_id": "New channel owner"
      }
    },
    "channels.EditForumTopic": {
      "desc": "Edit forum topic; requires manage_topics rights.",
      "params": {
        "channel": "Supergroup",
        "closed": "If present, will update the open/closed status of the topic.",
        "flags": "Flags, see TL conditional fields",
        "hidden": "If present, will hide/unhide the topic (only valid for the \"General\" topic, id=1).",
        "icon_emoji_id": "If present, updates the custom emoji used as topic icon. Telegram Premium users can use any custom emoji, other users can only use the custom emojis contained in the inputStickerSetEmojiDefaultTopicIcons emoji pack. Pass 0 to switch to the fallback topic icon.",
        "title": "If present, will update the topic title (maximum UTF-8 length: 128).",
        "topic_id": "Topic ID"
      }
    },
    "channels.EditLocation": {
      "desc": "Edit location of geogroup, see here \u00bb for more info on geogroups.",
      "params": {
        "address": "Address string",
        "channel": "Geogroup",
        "geo_point": "New geolocation"
      }
    },
    "channels.EditPhoto": {
      "desc": "Change the photo of a channel/supergroup",
      "params": {
        "channel": "Channel/supergroup whose photo should be edited",
        "photo": "New photo"
      }
    },
    "channels.EditTitle": {
      "desc": "Edit the name of a channel/supergroup",
      "params": {
        "channel": "Channel/supergroup",
        "title": "New name"
      }
    },
    "channels.ExportMessageLink": {
      "desc": "Get link and embed info of a message in a channel/supergroup",
      "params": {
        "channel": "Channel",
        "flags": "Flags, see TL conditional fields",
        "grouped": "Whether to include other grouped media (for albums)",
        "id": "Message ID",
        "thread": "Whether to also include a thread ID, if available, inside of the link"
      }
    },
    "channels.GetAdminLog": {
      "desc": "Get the admin log of a channel/supergroup",
      "params": {
        "admins": "Only show events from these admins",
        "channel": "Channel",
        "events_filter": "Event filter",
        "flags": "Flags, see TL conditional fields",
        "limit": "Maximum number of results to return, see pagination",
        "max_id": "Maximum ID of message to return (see pagination)",
        "min_id": "Minimum ID of message to return (see pagination)",
        "q": "Search query, can be empty"
      }
    },
    "channels.GetAdminedPublicChannels": {
      "desc": "Get channels/supergroups/geogroups we're admin in. Usually called when the user exceeds the limit for owned public channels/supergroups/geogroups, and the user is given the choice to remove one of his channels/supergroups/geogroups.",
      "params": {
        "by_location": "Get geogroups",
        "check_limit": "If set and the user has reached the limit of owned public channels/supergroups/geogroups, instead of returning the channel list one of the specified errors will be returned.Useful to check if a new public channel can indeed be created, even before asking the user to enter a channel username to use in channels.checkUsername/channels.updateUsername.",
        "flags": "Flags, see TL conditional fields",
        "for_personal": ""
      }
    },
    "channels.GetChannelRecommendations": {
      "desc": "Obtain a list of similarly themed public channels, selected based on similarities in their subscriber bases.",
      "params": {
        "channel": "The method will return channels related to the passed channel.",
        "flags": "Flags, see TL conditional fields"
      }
    },
    "channels.GetChannels": {
      "desc": "Get info about channels/supergroups",
      "params": {
        "id": "IDs of channels/supergroups to get info about"
      }
    },
    "channels.GetForumTopics": {
      "desc": "Get topics of a forum",
      "params": {
        "channel": "Supergroup",
        "flags": "Flags, see TL conditional fields",
        "limit": "Maximum number of results to return, see pagination. For optimal performance, the number of returned topics is chosen by the server and can be smaller than the specified limit.",
        "offset_date": "Offsets for pagination, for more info click here, date of the last message of the last found topic. Use 0 or any date in the future to get results from the last topic.",
        "offset_id": "Offsets for pagination, for more info click here, ID of the last message of the last found topic (or initially 0).",
        "offset_topic": "Offsets for pagination, for more info click here, ID of the last found topic (or initially 0).",
        "q": "Search query"
      }
    },
    "channels.GetForumTopicsByID": {
      "desc": "Get forum topics by their ID",
      "params": {
        "channel": "Forum",
        "topics": "Topic IDs"
      }
    },
    "channels.GetFullChannel": {
      "desc": "Get full info about a supergroup, gigagroup or channel",
      "params": {
        "channel": "The channel, supergroup or gigagroup to get info about"
      }
    },
    "channels.GetGroupsForDiscussion": {
      "desc": "Get all groups that can be used as discussion groups.",
      "params": {}
    },
    "channels.GetInactiveChannels": {
      "desc": "Get inactive channels and supergroups",
      "params": {}
    },
    "channels.GetLeftChannels": {
      "desc": "Get a list of channels/supergroups we left, requires a takeout session, see here \u00bb for more info.",
      "params": {
        "offset": "Offset for pagination"
      }
    },
    "channels.GetMessages": {
      "desc": "Get channel/supergroup messages",
      "params": {
        "channel": "Channel/supergroup",
        "id": "IDs of messages to get"
      }
    },
    "channels.GetParticipant": {
      "desc": "Get info about a channel/supergroup participant",
      "params": {
        "channel": "Channel/supergroup",
        "participant": "Participant to get info about"
      }
    },
    "channels.GetParticipants": {
      "desc": "Get the participants of a supergroup/channel",
      "params": {
        "channel": "Channel",
        "filter": "Which participant types to fetch",
        "hash": "Hash",
        "limit": "Limit",
        "offset": "Offset"
      }
    },
    "channels.GetSendAs": {
      "desc": "Obtains a list of peers that can be used to send messages in a specific group",
      "params": {
        "peer": "The group where we intend to send messages"
      }
    },
    "channels.GetSponsoredMessages": {
      "desc": "Get a list of sponsored messages",
      "params": {
        "channel": "Peer"
      }
    },
    "channels.InviteToChannel": {
      "desc": "Invite users to a channel/supergroup",
      "params": {
        "channel": "Channel/supergroup",
        "users": "Users to invite"
      }
    },
    "channels.JoinChannel": {
      "desc": "Join a channel/supergroup",
      "params": {
        "channel": "Channel/supergroup to join"
      }
    },
    "channels.LeaveChannel": {
      "desc": "Leave a channel/supergroup",
      "params": {
        "channel": "Channel/supergroup to leave"
      }
    },
    "channels.ReadHistory": {
      "desc": "Mark channel/supergroup history as read",
      "params": {
        "channel": "Channel/supergroup",
        "max_id": "ID of message up to which messages should be marked as read"
      }
    },
    "channels.ReadMessageContents": {
      "desc": "Mark channel/supergroup message contents as read",
      "params": {
        "channel": "Channel/supergroup",
        "id": "IDs of messages whose contents should be marked as read"
      }
    },
    "channels.ReorderPinnedForumTopics": {
      "desc": "Reorder pinned forum topics",
      "params": {
        "channel": "Supergroup ID",
        "flags": "Flags, see TL conditional fields",
        "force": "If not set, the order of only the topics present both server-side and in order will be changed (i.e. mentioning topics not pinned server-side in order will not pin them, and not mentioning topics pinned server-side will not unpin them).  If set, the entire server-side pinned topic list will be replaced with order (i.e. mentioning topics not pinned server-side in order will pin them, and not mentioning topics pinned server-side will unpin them)",
        "order": "Topic IDs \u00bb"
      }
    },
    "channels.ReorderUsernames": {
      "desc": "Reorder active usernames",
      "params": {
        "channel": "The supergroup or channel",
        "order": "The new order for active usernames. All active usernames must be specified."
      }
    },
    "channels.ReportAntiSpamFalsePositive": {
      "desc": "Report a native antispam false positive",
      "params": {
        "channel": "Supergroup ID",
        "msg_id": "Message ID that was mistakenly deleted by the native antispam system, taken from the admin log"
      }
    },
    "channels.ReportSpam": {
      "desc": "Reports some messages from a user in a supergroup as spam; requires administrator rights in the supergroup",
      "params": {
        "channel": "Supergroup",
        "id": "IDs of spam messages",
        "participant": "Participant whose messages should be reported"
      }
    },
    "channels.ReportSponsoredMessage": {
      "desc": "{schema}",
      "params": {
        "channel": "",
        "option": "",
        "random_id": ""
      }
    },
    "channels.RestrictSponsoredMessages": {
      "desc": "{schema}",
      "params": {
        "channel": "",
        "restricted": ""
      }
    },
    "channels.SearchPosts": {
      "desc": "{schema}",
      "params": {
        "hashtag": "",
        "limit": "Maximum number of results to return, see pagination",
        "offset_id": "Offsets for pagination, for more info click here",
        "offset_peer": "",
        "offset_rate": ""
      }
    },
    "channels.SetBoostsToUnblockRestrictions": {
      "desc": "{schema}",
      "params": {
        "boosts": "",
        "channel": ""
      }
    },
    "channels.SetDiscussionGroup": {
      "desc": "Associate a group to a channel as discussion group for that channel",
      "params": {
        "broadcast": "Channel",
        "group": "Discussion group to associate to the channel"
      }
    },
    "channels.SetEmojiStickers": {
      "desc": "{schema}",
      "params": {
        "channel": "",
        "stickerset": ""
      }
    },
    "channels.SetStickers": {
      "desc": "Associate a stickerset to the supergroup",
      "params": {
        "channel": "Supergroup",
        "stickerset": "The stickerset to associate"
      }
    },
    "channels.ToggleAntiSpam": {
      "desc": "Enable or disable the native antispam system.",
      "params": {
        "channel": "Supergroup ID. The specified supergroup must have at least telegram_antispam_group_size_min members to enable antispam functionality, as specified by the client configuration parameters.",
        "enabled": "Enable or disable the native antispam system."
      }
    },
    "channels.ToggleForum": {
      "desc": "Enable or disable forum functionality in a supergroup.",
      "params": {
        "channel": "Supergroup ID",
        "enabled": "Enable or disable forum functionality"
      }
    },
    "channels.ToggleJoinRequest": {
      "desc": "Set whether all users should request admin approval to join the group \u00bb.",
      "params": {
        "channel": "Group",
        "enabled": "Toggle"
      }
    },
    "channels.ToggleJoinToSend": {
      "desc": "Set whether all users should join a discussion group in order to comment on a post \u00bb",
      "params": {
        "channel": "Discussion group",
        "enabled": "Toggle"
      }
    },
    "channels.ToggleParticipantsHidden": {
      "desc": "Hide or display the participants list in a supergroup.",
      "params": {
        "channel": "Supergroup ID",
        "enabled": "If true, will hide the participants list; otherwise will unhide it."
      }
    },
    "channels.TogglePreHistoryHidden": {
      "desc": "Hide/unhide message history for new channel/supergroup users",
      "params": {
        "channel": "Channel/supergroup",
        "enabled": "Hide/unhide"
      }
    },
    "channels.ToggleSignatures": {
      "desc": "Enable/disable message signatures in channels",
      "params": {
        "channel": "Channel",
        "enabled": "Value"
      }
    },
    "channels.ToggleSlowMode": {
      "desc": "Toggle supergroup slow mode: if enabled, users will only be able to send one message every seconds seconds",
      "params": {
        "channel": "The supergroup",
        "seconds": "Users will only be able to send one message every seconds seconds, 0 to disable the limitation"
      }
    },
    "channels.ToggleUsername": {
      "desc": "Activate or deactivate a purchased fragment.com username associated to a supergroup or channel we own.",
      "params": {
        "active": "Whether to activate or deactivate the username",
        "channel": "Supergroup or channel",
        "username": "Username"
      }
    },
    "channels.ToggleViewForumAsMessages": {
      "desc": "Users may also choose to display messages from all topics of a forum as if they were sent to a normal group, using a \"View as messages\" setting in the local client: this setting only affects the current account, and is synced to other logged in sessions using this method.",
      "params": {
        "channel": "The forum",
        "enabled": "The new value of the view_forum_as_messages flag."
      }
    },
    "channels.UpdateColor": {
      "desc": "Update the accent color and background custom emoji \u00bb of a channel.",
      "params": {
        "background_emoji_id": "Custom emoji ID used in the accent color pattern.",
        "channel": "Channel whose accent color should be changed.",
        "color": "ID of the accent color palette \u00bb to use (not RGB24, see here \u00bb for more info); if not set, the default palette is used.",
        "flags": "Flags, see TL conditional fields",
        "for_profile": "Whether to change the accent color emoji pattern of the profile page; otherwise, the accent color and emoji pattern of messages will be changed."
      }
    },
    "channels.UpdateEmojiStatus": {
      "desc": "Set an emoji status for a channel.",
      "params": {
        "channel": "The channel, must have at least channel_emoji_status_level_min boosts.",
        "emoji_status": "Emoji status to set"
      }
    },
    "channels.UpdatePinnedForumTopic": {
      "desc": "Pin or unpin forum topics",
      "params": {
        "channel": "Supergroup ID",
        "pinned": "Whether to pin or unpin the topic",
        "topic_id": "Forum topic ID"
      }
    },
    "channels.UpdateUsername": {
      "desc": "Change or remove the username of a supergroup/channel",
      "params": {
        "channel": "Channel",
        "username": "New username, pass an empty string to remove the username"
      }
    },
    "channels.ViewSponsoredMessage": {
      "desc": "Mark a specific sponsored message as read",
      "params": {
        "channel": "Peer",
        "random_id": "Message ID"
      }
    },
    "chatlists.CheckChatlistInvite": {
      "desc": "Obtain information about a chat folder deep link \u00bb.",
      "params": {
        "slug": "slug obtained from the chat folder deep link \u00bb"
      }
    },
    "chatlists.DeleteExportedInvite": {
      "desc": "Delete a previously created chat folder deep link \u00bb.",
      "params": {
        "chatlist": "The related folder",
        "slug": "slug obtained from the chat folder deep link \u00bb."
      }
    },
    "chatlists.EditExportedInvite": {
      "desc": "Edit a chat folder deep link \u00bb.",
      "params": {
        "chatlist": "Folder ID",
        "flags": "Flags, see TL conditional fields",
        "peers": "If set, changes the list of peers shared with the link",
        "slug": "slug obtained from the chat folder deep link \u00bb.",
        "title": "If set, sets a new name for the link"
      }
    },
    "chatlists.ExportChatlistInvite": {
      "desc": "Export a folder \u00bb, creating a chat folder deep link \u00bb.",
      "params": {
        "chatlist": "The folder to export",
        "peers": "The list of channels, group and supergroups to share with the link. Basic groups will automatically be converted to supergroups when invoking the method.",
        "title": "An optional name for the link"
      }
    },
    "chatlists.GetChatlistUpdates": {
      "desc": "Fetch new chats associated with an imported chat folder deep link \u00bb. Must be invoked at most every chatlist_update_period seconds (as per the related client configuration parameter \u00bb).",
      "params": {
        "chatlist": "The folder"
      }
    },
    "chatlists.GetExportedInvites": {
      "desc": "List all chat folder deep links \u00bb associated to a folder",
      "params": {
        "chatlist": "The folder"
      }
    },
    "chatlists.GetLeaveChatlistSuggestions": {
      "desc": "Returns identifiers of pinned or always included chats from a chat folder imported using a chat folder deep link \u00bb, which are suggested to be left when the chat folder is deleted.",
      "params": {
        "chatlist": "Folder ID"
      }
    },
    "chatlists.HideChatlistUpdates": {
      "desc": "Dismiss new pending peers recently added to a chat folder deep link \u00bb.",
      "params": {
        "chatlist": "The folder"
      }
    },
    "chatlists.JoinChatlistInvite": {
      "desc": "Import a chat folder deep link \u00bb, joining some or all the chats in the folder.",
      "params": {
        "peers": "List of new chats to join, fetched using chatlists.checkChatlistInvite and filtered as specified in the documentation \u00bb.",
        "slug": "slug obtained from a chat folder deep link \u00bb."
      }
    },
    "chatlists.JoinChatlistUpdates": {
      "desc": "Join channels and supergroups recently added to a chat folder deep link \u00bb.",
      "params": {
        "chatlist": "The folder",
        "peers": "List of new chats to join, fetched using chatlists.getChatlistUpdates and filtered as specified in the documentation \u00bb."
      }
    },
    "chatlists.LeaveChatlist": {
      "desc": "Delete a folder imported using a chat folder deep link \u00bb",
      "params": {
        "chatlist": "Folder ID",
        "peers": "Also leave the specified channels and groups"
      }
    },
    "contacts.AcceptContact": {
      "desc": "If the add contact action bar is active, add that user as contact",
      "params": {
        "id": "The user to add as contact"
      }
    },
    "contacts.AddContact": {
      "desc": "Add an existing telegram user as contact.",
      "params": {
        "add_phone_privacy_exception": "Allow the other user to see our phone number?",
        "first_name": "First name",
        "flags": "Flags, see TL conditional fields",
        "id": "Telegram ID of the other user",
        "last_name": "Last name",
        "phone": "User's phone number, may be omitted to simply add the user to the contact list, without a phone number."
      }
    },
    "contacts.Block": {
      "desc": "Adds a peer to a blocklist, see here \u00bb for more info.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "id": "Peer",
        "my_stories_from": "Whether the peer should be added to the story blocklist; if not set, the peer will be added to the main blocklist, see here \u00bb for more info."
      }
    },
    "contacts.BlockFromReplies": {
      "desc": "Stop getting notifications about discussion replies of a certain user in @replies",
      "params": {
        "delete_history": "Whether to delete all @replies messages from this user as well",
        "delete_message": "Whether to delete the specified message as well",
        "flags": "Flags, see TL conditional fields",
        "msg_id": "ID of the message in the @replies chat",
        "report_spam": "Whether to also report this user for spam"
      }
    },
    "contacts.DeleteByPhones": {
      "desc": "Delete contacts by phone number",
      "params": {
        "phones": "Phone numbers"
      }
    },
    "contacts.DeleteContacts": {
      "desc": "Deletes several contacts from the list.",
      "params": {
        "id": "User ID list"
      }
    },
    "contacts.EditCloseFriends": {
      "desc": "Edit the close friends list, see here \u00bb for more info.",
      "params": {
        "id": "Full list of user IDs of close friends, see here for more info."
      }
    },
    "contacts.ExportContactToken": {
      "desc": "Generates a temporary profile link for the currently logged-in user.",
      "params": {}
    },
    "contacts.GetBirthdays": {
      "desc": "{schema}",
      "params": {}
    },
    "contacts.GetBlocked": {
      "desc": "Returns the list of blocked users.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "limit": "The number of list elements to be returned",
        "my_stories_from": "Whether to fetch the story blocklist; if not set, will fetch the main blocklist. See here \u00bb for differences between the two.",
        "offset": "The number of list elements to be skipped"
      }
    },
    "contacts.GetContactIDs": {
      "desc": "Get the telegram IDs of all contacts.\nReturns an array of Telegram user IDs for all contacts (0 if a contact does not have an associated Telegram account or have hidden their account using privacy settings).",
      "params": {
        "hash": "Hash for pagination, for more info click here"
      }
    },
    "contacts.GetContacts": {
      "desc": "Returns the current user's contact list.",
      "params": {
        "hash": "Hash for pagination, for more info click here.Note that the hash is computed using the usual algorithm, passing to the algorithm first the previously returned contacts.contacts.saved_count field, then max 100000 sorted user IDs from the contact list, including the ID of the currently logged in user if it is saved as a contact. Example: tdlib implementation."
      }
    },
    "contacts.GetLocated": {
      "desc": "Get users and geochats near you, see here \u00bb for more info.",
      "params": {
        "background": "While the geolocation of the current user is public, clients should update it in the background every half-an-hour or so, while setting this flag. Do this only if the new location is more than 1 KM away from the previous one, or if the previous location is unknown.",
        "flags": "Flags, see TL conditional fields",
        "geo_point": "Geolocation",
        "self_expires": "If set, the geolocation of the current user will be public for the specified number of seconds; pass 0x7fffffff to disable expiry, 0 to make the current geolocation private; if the flag isn't set, no changes will be applied."
      }
    },
    "contacts.GetSaved": {
      "desc": "Get all contacts, requires a takeout session, see here \u00bb for more info.",
      "params": {}
    },
    "contacts.GetStatuses": {
      "desc": "Use this method to obtain the online statuses of all contacts with an accessible Telegram account.",
      "params": {}
    },
    "contacts.GetTopPeers": {
      "desc": "Get most used peers",
      "params": {
        "bots_inline": "Most used inline bots",
        "bots_pm": "Most used bots",
        "channels": "Most frequently visited channels",
        "correspondents": "Users we've chatted most frequently with",
        "flags": "Flags, see TL conditional fields",
        "forward_chats": "Chats to which the users often forwards messages to",
        "forward_users": "Users to which the users often forwards messages to",
        "groups": "Often-opened groups and supergroups",
        "hash": "Hash for pagination, for more info click here",
        "limit": "Maximum number of results to return, see pagination",
        "offset": "Offset for pagination",
        "phone_calls": "Most frequently called users"
      }
    },
    "contacts.ImportContactToken": {
      "desc": "Obtain user info from a temporary profile link.",
      "params": {
        "token": "The token extracted from the temporary profile link."
      }
    },
    "contacts.ImportContacts": {
      "desc": "Imports contacts: saves a full list on the server, adds already registered contacts to the contact list, returns added contacts and their info.",
      "params": {
        "contacts": "List of contacts to import"
      }
    },
    "contacts.ResetSaved": {
      "desc": "Removes all contacts without an associated Telegram account.",
      "params": {}
    },
    "contacts.ResetTopPeerRating": {
      "desc": "Reset rating of top peer",
      "params": {
        "category": "Top peer category",
        "peer": "Peer whose rating should be reset"
      }
    },
    "contacts.ResolvePhone": {
      "desc": "Resolve a phone number to get user info, if their privacy settings allow it.",
      "params": {
        "phone": "Phone number in international format, possibly obtained from a phone number deep link."
      }
    },
    "contacts.ResolveUsername": {
      "desc": "Resolve a @username to get peer info",
      "params": {
        "username": "@username to resolve"
      }
    },
    "contacts.Search": {
      "desc": "Returns users found by username substring.",
      "params": {
        "limit": "Maximum number of users to be returned",
        "q": "Target substring"
      }
    },
    "contacts.SetBlocked": {
      "desc": "Replace the contents of an entire blocklist, see here for more info \u00bb.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "id": "Full content of the blocklist.",
        "limit": "Maximum number of results to return, see pagination",
        "my_stories_from": "Whether to edit the story blocklist; if not set, will edit the main blocklist. See here \u00bb for differences between the two."
      }
    },
    "contacts.ToggleTopPeers": {
      "desc": "Enable/disable top peers",
      "params": {
        "enabled": "Enable/disable"
      }
    },
    "contacts.Unblock": {
      "desc": "Deletes a peer from a blocklist, see here \u00bb for more info.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "id": "Peer",
        "my_stories_from": "Whether the peer should be removed from the story blocklist; if not set, the peer will be removed from the main blocklist, see here \u00bb for more info."
      }
    },
    "folders.EditPeerFolders": {
      "desc": "Edit peers in peer folder",
      "params": {
        "folder_peers": "New peer list"
      }
    },
    "fragment.GetCollectibleInfo": {
      "desc": "{schema}",
      "params": {
        "collectible": ""
      }
    },
    "help.AcceptTermsOfService": {
      "desc": "Accept the new terms of service",
      "params": {
        "id": "ID of terms of service"
      }
    },
    "help.DismissSuggestion": {
      "desc": "Dismiss a suggestion, see here for more info \u00bb.",
      "params": {
        "peer": "In the case of pending suggestions in channels, the channel ID.",
        "suggestion": "Suggestion, see here for more info \u00bb."
      }
    },
    "help.EditUserInfo": {
      "desc": "Internal use",
      "params": {
        "entities": "Message entities for styled text",
        "message": "Message",
        "user_id": "User"
      }
    },
    "help.GetAppConfig": {
      "desc": "Get app-specific configuration, see client configuration for more info on the result.",
      "params": {
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the help.appConfig.hash field returned by a previous call to the method, or pass 0 if this is the first call."
      }
    },
    "help.GetAppUpdate": {
      "desc": "Returns information on update availability for the current application.",
      "params": {
        "source": "Source"
      }
    },
    "help.GetCdnConfig": {
      "desc": "Get configuration for CDN file downloads.",
      "params": {}
    },
    "help.GetConfig": {
      "desc": "Returns current configuration, including data center configuration.",
      "params": {}
    },
    "help.GetCountriesList": {
      "desc": "Get name, ISO code, localized name and phone codes/patterns of all available countries",
      "params": {
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the help.countriesList.hash field returned by a previous call to the method, or pass 0 if this is the first call.",
        "lang_code": "Language code of the current user"
      }
    },
    "help.GetDeepLinkInfo": {
      "desc": "Get info about an unsupported deep link, see here for more info \u00bb.",
      "params": {
        "path": "Path component of a tg: link"
      }
    },
    "help.GetInviteText": {
      "desc": "Returns localized text of a text message with an invitation.",
      "params": {}
    },
    "help.GetNearestDc": {
      "desc": "Returns info on data center nearest to the user.",
      "params": {}
    },
    "help.GetPassportConfig": {
      "desc": "Get passport configuration",
      "params": {
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the help.passportConfig.hash field returned by a previous call to the method, or pass 0 if this is the first call."
      }
    },
    "help.GetPeerColors": {
      "desc": "Get the set of accent color palettes \u00bb that can be used for message accents.",
      "params": {
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the help.peerColors.hash field returned by a previous call to the method, or pass 0 if this is the first call."
      }
    },
    "help.GetPeerProfileColors": {
      "desc": "Get the set of accent color palettes \u00bb that can be used in profile page backgrounds.",
      "params": {
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the help.peerColors.hash field returned by a previous call to the method, or pass 0 if this is the first call."
      }
    },
    "help.GetPremiumPromo": {
      "desc": "Get Telegram Premium promotion information",
      "params": {}
    },
    "help.GetPromoData": {
      "desc": "Get MTProxy/Public Service Announcement information",
      "params": {}
    },
    "help.GetRecentMeUrls": {
      "desc": "Get recently used t.me links.",
      "params": {
        "referer": "Referrer"
      }
    },
    "help.GetSupport": {
      "desc": "Returns the support user for the \"ask a question\" feature.",
      "params": {}
    },
    "help.GetSupportName": {
      "desc": "Get localized name of the telegram support user",
      "params": {}
    },
    "help.GetTermsOfServiceUpdate": {
      "desc": "Look for updates of telegram's terms of service",
      "params": {}
    },
    "help.GetTimezonesList": {
      "desc": "{schema}",
      "params": {
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the help.timezonesList.hash field returned by a previous call to the method, or pass 0 if this is the first call."
      }
    },
    "help.GetUserInfo": {
      "desc": "Can only be used by TSF members to obtain internal information.",
      "params": {
        "user_id": "User ID"
      }
    },
    "help.HidePromoData": {
      "desc": "Hide MTProxy/Public Service Announcement information",
      "params": {
        "peer": "Peer to hide"
      }
    },
    "help.SaveAppLog": {
      "desc": "Saves logs of application on the server.",
      "params": {
        "events": "List of input events"
      }
    },
    "help.SetBotUpdatesStatus": {
      "desc": "Informs the server about the number of pending bot updates if they haven't been processed for a long time; for bots only",
      "params": {
        "message": "Error message, if present",
        "pending_updates_count": "Number of pending updates"
      }
    },
    "langpack.GetDifference": {
      "desc": "Get new strings in language pack",
      "params": {
        "from_version": "Previous localization pack version",
        "lang_code": "Language code",
        "lang_pack": "Language pack"
      }
    },
    "langpack.GetLangPack": {
      "desc": "Get localization pack strings",
      "params": {
        "lang_code": "Language code",
        "lang_pack": "Language pack name, usually obtained from a language pack link"
      }
    },
    "langpack.GetLanguage": {
      "desc": "Get information about a language in a localization pack",
      "params": {
        "lang_code": "Language code",
        "lang_pack": "Language pack name, usually obtained from a language pack link"
      }
    },
    "langpack.GetLanguages": {
      "desc": "Get information about all languages in a localization pack",
      "params": {
        "lang_pack": "Language pack"
      }
    },
    "langpack.GetStrings": {
      "desc": "Get strings from a language pack",
      "params": {
        "keys": "Strings to get",
        "lang_code": "Language code",
        "lang_pack": "Language pack name, usually obtained from a language pack link"
      }
    },
    "messages.AcceptEncryption": {
      "desc": "Confirms creation of a secret chat",
      "params": {
        "g_b": "B = g ^ b mod p, see Wikipedia",
        "key_fingerprint": "64-bit fingerprint of the received key",
        "peer": "Secret chat ID"
      }
    },
    "messages.AcceptUrlAuth": {
      "desc": "Use this to accept a Seamless Telegram Login authorization request, for more info click here \u00bb",
      "params": {
        "button_id": "ID of the login button",
        "flags": "Flags, see TL conditional fields",
        "msg_id": "Message ID of the message with the login button",
        "peer": "The location of the message",
        "url": "URL used for link URL authorization, click here for more info \u00bb",
        "write_allowed": "Set this flag to allow the bot to send messages to you (if requested)"
      }
    },
    "messages.AddChatUser": {
      "desc": "Adds a user to a chat and sends a service message on it.",
      "params": {
        "chat_id": "Chat ID",
        "fwd_limit": "Number of last messages to be forwarded",
        "user_id": "User ID to be added"
      }
    },
    "messages.CheckChatInvite": {
      "desc": "Check the validity of a chat invite link and get basic info about it",
      "params": {
        "hash": "Invite hash from chat invite deep link \u00bb."
      }
    },
    "messages.CheckHistoryImport": {
      "desc": "Obtains information about a chat export file, generated by a foreign chat app, click here for more info about imported chats \u00bb.",
      "params": {
        "import_head": "Beginning of the message file; up to 100 lines."
      }
    },
    "messages.CheckHistoryImportPeer": {
      "desc": "Check whether chat history exported from another chat app can be imported into a specific Telegram chat, click here for more info \u00bb.",
      "params": {
        "peer": "The chat where we want to import history \u00bb."
      }
    },
    "messages.CheckQuickReplyShortcut": {
      "desc": "{schema}",
      "params": {
        "shortcut": ""
      }
    },
    "messages.ClearAllDrafts": {
      "desc": "Clear all drafts.",
      "params": {}
    },
    "messages.ClearRecentReactions": {
      "desc": "Clear recently used message reactions",
      "params": {}
    },
    "messages.ClearRecentStickers": {
      "desc": "Clear recent stickers",
      "params": {
        "attached": "Set this flag to clear the list of stickers recently attached to photo or video files",
        "flags": "Flags, see TL conditional fields"
      }
    },
    "messages.CreateChat": {
      "desc": "Creates a new chat.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "title": "Chat name",
        "ttl_period": "Time-to-live of all messages that will be sent in the chat: once message.date+message.ttl_period === time(), the message will be deleted on the server, and must be deleted locally as well. You can use messages.setDefaultHistoryTTL to edit this value later.",
        "users": "List of user IDs to be invited"
      }
    },
    "messages.DeleteChat": {
      "desc": "Delete a chat",
      "params": {
        "chat_id": "Chat ID"
      }
    },
    "messages.DeleteChatUser": {
      "desc": "Deletes a user from a chat and sends a service message on it.",
      "params": {
        "chat_id": "Chat ID",
        "flags": "Flags, see TL conditional fields",
        "revoke_history": "Remove the entire chat history of the specified user in this chat.",
        "user_id": "User ID to be deleted"
      }
    },
    "messages.DeleteExportedChatInvite": {
      "desc": "Delete a chat invite",
      "params": {
        "link": "Invite link",
        "peer": "Peer"
      }
    },
    "messages.DeleteFactCheck": {
      "desc": "{schema}",
      "params": {
        "msg_id": "",
        "peer": ""
      }
    },
    "messages.DeleteHistory": {
      "desc": "Deletes communication history.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "just_clear": "Just clear history for the current user, without actually removing messages for every chat user",
        "max_date": "Delete all messages older than this UNIX timestamp",
        "max_id": "Maximum ID of message to delete",
        "min_date": "Delete all messages newer than this UNIX timestamp",
        "peer": "User or chat, communication history of which will be deleted",
        "revoke": "Whether to delete the message history for all chat participants"
      }
    },
    "messages.DeleteMessages": {
      "desc": "Deletes messages by their identifiers.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "id": "Message ID list",
        "revoke": "Whether to delete messages for all participants of the chat"
      }
    },
    "messages.DeletePhoneCallHistory": {
      "desc": "Delete the entire phone call history.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "revoke": "Whether to remove phone call history for participants as well"
      }
    },
    "messages.DeleteQuickReplyMessages": {
      "desc": "{schema}",
      "params": {
        "id": "",
        "shortcut_id": ""
      }
    },
    "messages.DeleteQuickReplyShortcut": {
      "desc": "{schema}",
      "params": {
        "shortcut_id": ""
      }
    },
    "messages.DeleteRevokedExportedChatInvites": {
      "desc": "Delete all revoked chat invites",
      "params": {
        "admin_id": "ID of the admin that originally generated the revoked chat invites",
        "peer": "Chat"
      }
    },
    "messages.DeleteSavedHistory": {
      "desc": "Deletes messages forwarded from a specific peer to saved messages \u00bb.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "max_date": "Delete all messages older than this UNIX timestamp",
        "max_id": "Maximum ID of message to delete",
        "min_date": "Delete all messages newer than this UNIX timestamp",
        "peer": "Peer, whose messages will be deleted from saved messages \u00bb"
      }
    },
    "messages.DeleteScheduledMessages": {
      "desc": "Delete scheduled messages",
      "params": {
        "id": "Scheduled message IDs",
        "peer": "Peer"
      }
    },
    "messages.DiscardEncryption": {
      "desc": "Cancels a request for creation and/or delete info on secret chat.",
      "params": {
        "chat_id": "Secret chat ID",
        "delete_history": "Whether to delete the entire chat history for the other user as well",
        "flags": "Flags, see TL conditional fields"
      }
    },
    "messages.EditChatAbout": {
      "desc": "Edit the description of a group/supergroup/channel.",
      "params": {
        "about": "The new description",
        "peer": "The group/supergroup/channel."
      }
    },
    "messages.EditChatAdmin": {
      "desc": "Make a user admin in a basic group.",
      "params": {
        "chat_id": "The ID of the group",
        "is_admin": "Whether to make them admin",
        "user_id": "The user to make admin"
      }
    },
    "messages.EditChatDefaultBannedRights": {
      "desc": "Edit the default banned rights of a channel/supergroup/group.",
      "params": {
        "banned_rights": "The new global rights",
        "peer": "The peer"
      }
    },
    "messages.EditChatPhoto": {
      "desc": "Changes chat photo and sends a service message on it",
      "params": {
        "chat_id": "Chat ID",
        "photo": "Photo to be set"
      }
    },
    "messages.EditChatTitle": {
      "desc": "Changes chat name and sends a service message on it.",
      "params": {
        "chat_id": "Chat ID",
        "title": "New chat name, different from the old one"
      }
    },
    "messages.EditExportedChatInvite": {
      "desc": "Edit an exported chat invite",
      "params": {
        "expire_date": "New expiration date",
        "flags": "Flags, see TL conditional fields",
        "link": "Invite link",
        "peer": "Chat",
        "request_needed": "Whether admin confirmation is required before admitting each separate user into the chat",
        "revoked": "Whether to revoke the chat invite",
        "title": "Description of the invite link, visible only to administrators",
        "usage_limit": "Maximum number of users that can join using this link"
      }
    },
    "messages.EditFactCheck": {
      "desc": "{schema}",
      "params": {
        "msg_id": "",
        "peer": "",
        "text": ""
      }
    },
    "messages.EditInlineBotMessage": {
      "desc": "Edit an inline bot message",
      "params": {
        "entities": "Message entities for styled text",
        "flags": "Flags, see TL conditional fields",
        "id": "Sent inline message ID",
        "invert_media": "If set, any eventual webpage preview will be shown on top of the message instead of at the bottom.",
        "media": "Media",
        "message": "Message",
        "no_webpage": "Disable webpage preview",
        "reply_markup": "Reply markup for inline keyboards"
      }
    },
    "messages.EditMessage": {
      "desc": "Edit message",
      "params": {
        "entities": "Message entities for styled text",
        "flags": "Flags, see TL conditional fields",
        "id": "ID of the message to edit",
        "invert_media": "If set, any eventual webpage preview will be shown on top of the message instead of at the bottom.",
        "media": "New attached media",
        "message": "New message",
        "no_webpage": "Disable webpage preview",
        "peer": "Where was the message sent",
        "quick_reply_shortcut_id": "",
        "reply_markup": "Reply markup for inline keyboards",
        "schedule_date": "Scheduled message date for scheduled messages"
      }
    },
    "messages.EditQuickReplyShortcut": {
      "desc": "{schema}",
      "params": {
        "shortcut": "",
        "shortcut_id": ""
      }
    },
    "messages.ExportChatInvite": {
      "desc": "Export an invite link for a chat",
      "params": {
        "expire_date": "Expiration date",
        "flags": "Flags, see TL conditional fields",
        "legacy_revoke_permanent": "Legacy flag, reproducing legacy behavior of this method: if set, revokes all previous links before creating a new one. Kept for bot API BC, should not be used by modern clients.",
        "peer": "Chat",
        "request_needed": "Whether admin confirmation is required before admitting each separate user into the chat",
        "title": "Description of the invite link, visible only to administrators",
        "usage_limit": "Maximum number of users that can join using this link"
      }
    },
    "messages.FaveSticker": {
      "desc": "Mark or unmark a sticker as favorite",
      "params": {
        "id": "Sticker in question",
        "unfave": "Whether to add or remove a sticker from favorites"
      }
    },
    "messages.ForwardMessages": {
      "desc": "Forwards messages by their IDs.",
      "params": {
        "background": "Whether to send the message in background",
        "drop_author": "Whether to forward messages without quoting the original author",
        "drop_media_captions": "Whether to strip captions from media",
        "flags": "Flags, see TL conditional fields",
        "from_peer": "Source of messages",
        "id": "IDs of messages",
        "noforwards": "Only for bots, disallows further re-forwarding and saving of the messages, even if the destination chat doesn't have content protection enabled",
        "quick_reply_shortcut": "",
        "random_id": "Random ID to prevent resending of messages",
        "schedule_date": "Scheduled message date for scheduled messages",
        "send_as": "Forward the messages as the specified peer",
        "silent": "Whether to send messages silently (no notification will be triggered on the destination clients)",
        "to_peer": "Destination peer",
        "top_msg_id": "Destination forum topic",
        "with_my_score": "When forwarding games, whether to include your score in the game"
      }
    },
    "messages.GetAdminsWithInvites": {
      "desc": "Get info about chat invites generated by admins.",
      "params": {
        "peer": "Chat"
      }
    },
    "messages.GetAllDrafts": {
      "desc": "Return all message drafts.\nReturns all the latest updateDraftMessage updates related to all chats with drafts.",
      "params": {}
    },
    "messages.GetAllStickers": {
      "desc": "Get all installed stickers",
      "params": {
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the messages.allStickers.hash field returned by a previous call to the method, or pass 0 if this is the first call."
      }
    },
    "messages.GetArchivedStickers": {
      "desc": "Get all archived stickers",
      "params": {
        "emojis": "Get custom emoji stickers",
        "flags": "Flags, see TL conditional fields",
        "limit": "Maximum number of results to return, see pagination",
        "masks": "Get mask stickers",
        "offset_id": "Offsets for pagination, for more info click here"
      }
    },
    "messages.GetAttachMenuBot": {
      "desc": "Returns attachment menu entry for a bot mini app that can be launched from the attachment menu \u00bb",
      "params": {
        "bot": "Bot ID"
      }
    },
    "messages.GetAttachMenuBots": {
      "desc": "Returns installed attachment menu bot mini apps \u00bb",
      "params": {
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the attachMenuBots.hash field returned by a previous call to the method, or pass 0 if this is the first call."
      }
    },
    "messages.GetAttachedStickers": {
      "desc": "Get stickers attached to a photo or video",
      "params": {
        "media": "Stickered media"
      }
    },
    "messages.GetAvailableEffects": {
      "desc": "{schema}",
      "params": {
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the messages.availableEffects.hash field returned by a previous call to the method, or pass 0 if this is the first call."
      }
    },
    "messages.GetAvailableReactions": {
      "desc": "Obtain available message reactions \u00bb",
      "params": {
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the messages.availableReactions.hash field returned by a previous call to the method, or pass 0 if this is the first call."
      }
    },
    "messages.GetBotApp": {
      "desc": "Obtain information about a direct link Mini App",
      "params": {
        "app": "Bot app information obtained from a Direct Mini App deep link \u00bb.",
        "hash": "Hash for pagination, for more info click here"
      }
    },
    "messages.GetBotCallbackAnswer": {
      "desc": "Press an inline callback button and get a callback answer from the bot",
      "params": {
        "data": "Callback data",
        "flags": "Flags, see TL conditional fields",
        "game": "Whether this is a \"play game\" button",
        "msg_id": "ID of the Message with the inline keyboard",
        "password": "For buttons requiring you to verify your identity with your 2FA password, the SRP payload generated using SRP.",
        "peer": "Where was the inline keyboard sent"
      }
    },
    "messages.GetChatInviteImporters": {
      "desc": "Get info about the users that joined the chat using a specific chat invite",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "limit": "Maximum number of results to return, see pagination",
        "link": "Invite link",
        "offset_date": "Offsets for pagination, for more info click here",
        "offset_user": "User ID for pagination: if set, offset_date must also be set.",
        "peer": "Chat",
        "q": "Search for a user in the pending join requests \u00bb list: only available when the requested flag is set, cannot be used together with a specific link.",
        "requested": "If set, only returns info about users with pending join requests \u00bb"
      }
    },
    "messages.GetChats": {
      "desc": "Returns chat basic info on their IDs.",
      "params": {
        "id": "List of chat IDs"
      }
    },
    "messages.GetCommonChats": {
      "desc": "Get chats in common with a user",
      "params": {
        "limit": "Maximum number of results to return, see pagination",
        "max_id": "Maximum ID of chat to return (see pagination)",
        "user_id": "User ID"
      }
    },
    "messages.GetCustomEmojiDocuments": {
      "desc": "Fetch custom emoji stickers \u00bb.",
      "params": {
        "document_id": "Custom emoji IDs from a messageEntityCustomEmoji."
      }
    },
    "messages.GetDefaultHistoryTTL": {
      "desc": "Gets the default value of the Time-To-Live setting, applied to all new chats.",
      "params": {}
    },
    "messages.GetDefaultTagReactions": {
      "desc": "Fetch a default recommended list of saved message tag reactions.",
      "params": {
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the messages.reactions.hash field returned by a previous call to the method, or pass 0 if this is the first call."
      }
    },
    "messages.GetDhConfig": {
      "desc": "Returns configuration parameters for Diffie-Hellman key generation. Can also return a random sequence of bytes of required length.",
      "params": {
        "random_length": "Length of the required random sequence",
        "version": "Value of the version parameter from messages.dhConfig, available at the client"
      }
    },
    "messages.GetDialogFilters": {
      "desc": "Get folders",
      "params": {}
    },
    "messages.GetDialogUnreadMarks": {
      "desc": "Get dialogs manually marked as unread",
      "params": {}
    },
    "messages.GetDialogs": {
      "desc": "Returns the current user dialog list.",
      "params": {
        "exclude_pinned": "Exclude pinned dialogs",
        "flags": "Flags, see TL conditional fields",
        "folder_id": "Peer folder ID, for more info click here",
        "hash": "Hash for pagination, for more info click here",
        "limit": "Number of list elements to be returned",
        "offset_date": "Offsets for pagination, for more info click here",
        "offset_id": "Offsets for pagination, for more info click here (top_message ID used for pagination)",
        "offset_peer": "Offset peer for pagination"
      }
    },
    "messages.GetDiscussionMessage": {
      "desc": "Get discussion message from the associated discussion group of a channel to show it on top of the comment section, without actually joining the group",
      "params": {
        "msg_id": "Message ID",
        "peer": "Channel ID"
      }
    },
    "messages.GetDocumentByHash": {
      "desc": "Get a document by its SHA256 hash, mainly used for gifs",
      "params": {
        "mime_type": "Mime type",
        "sha256": "SHA256 of file",
        "size": "Size of the file in bytes"
      }
    },
    "messages.GetEmojiGroups": {
      "desc": "Represents a list of emoji categories, to be used when selecting custom emojis.",
      "params": {
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the messages.emojiGroups.hash field returned by a previous call to the method, or pass 0 if this is the first call."
      }
    },
    "messages.GetEmojiKeywords": {
      "desc": "Get localized emoji keywords \u00bb.",
      "params": {
        "lang_code": "Language code"
      }
    },
    "messages.GetEmojiKeywordsDifference": {
      "desc": "Get changed emoji keywords \u00bb.",
      "params": {
        "from_version": "Previous stored emoji keyword list version",
        "lang_code": "Language code"
      }
    },
    "messages.GetEmojiKeywordsLanguages": {
      "desc": "Obtain a list of related languages that must be used when fetching emoji keyword lists \u00bb.",
      "params": {
        "lang_codes": "The user's language codes"
      }
    },
    "messages.GetEmojiProfilePhotoGroups": {
      "desc": "Represents a list of emoji categories, to be used when selecting custom emojis to set as profile picture.",
      "params": {
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the messages.emojiGroups.hash field returned by a previous call to the method, or pass 0 if this is the first call."
      }
    },
    "messages.GetEmojiStatusGroups": {
      "desc": "Represents a list of emoji categories, to be used when selecting custom emojis to set as custom emoji status.",
      "params": {
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the messages.emojiGroups.hash field returned by a previous call to the method, or pass 0 if this is the first call."
      }
    },
    "messages.GetEmojiStickerGroups": {
      "desc": "{schema}",
      "params": {
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the messages.emojiGroups.hash field returned by a previous call to the method, or pass 0 if this is the first call."
      }
    },
    "messages.GetEmojiStickers": {
      "desc": "Gets the list of currently installed custom emoji stickersets.",
      "params": {
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the messages.allStickers.hash field returned by a previous call to the method, or pass 0 if this is the first call."
      }
    },
    "messages.GetEmojiURL": {
      "desc": "Returns an HTTP URL which can be used to automatically log in into translation platform and suggest new emoji keywords \u00bb. The URL will be valid for 30 seconds after generation.",
      "params": {
        "lang_code": "Language code for which the emoji keywords will be suggested"
      }
    },
    "messages.GetExportedChatInvite": {
      "desc": "Get info about a chat invite",
      "params": {
        "link": "Invite link",
        "peer": "Chat"
      }
    },
    "messages.GetExportedChatInvites": {
      "desc": "Get info about the chat invites of a specific chat",
      "params": {
        "admin_id": "Whether to only fetch chat invites from this admin",
        "flags": "Flags, see TL conditional fields",
        "limit": "Maximum number of results to return, see pagination",
        "offset_date": "Offsets for pagination, for more info click here",
        "offset_link": "Offsets for pagination, for more info click here",
        "peer": "Chat",
        "revoked": "Whether to fetch revoked chat invites"
      }
    },
    "messages.GetExtendedMedia": {
      "desc": "Get information about extended media",
      "params": {
        "id": "Message IDs",
        "peer": "Peer"
      }
    },
    "messages.GetFactCheck": {
      "desc": "{schema}",
      "params": {
        "msg_id": "",
        "peer": ""
      }
    },
    "messages.GetFavedStickers": {
      "desc": "Get faved stickers",
      "params": {
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the messages.favedStickers.hash field returned by a previous call to the method, or pass 0 if this is the first call."
      }
    },
    "messages.GetFeaturedEmojiStickers": {
      "desc": "Gets featured custom emoji stickersets.",
      "params": {
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the messages.featuredStickers.hash field returned by a previous call to the method, or pass 0 if this is the first call."
      }
    },
    "messages.GetFeaturedStickers": {
      "desc": "Get featured stickers",
      "params": {
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the messages.featuredStickers.hash field returned by a previous call to the method, or pass 0 if this is the first call."
      }
    },
    "messages.GetFullChat": {
      "desc": "Get full info about a basic group.",
      "params": {
        "chat_id": "Basic group ID."
      }
    },
    "messages.GetGameHighScores": {
      "desc": "Get highscores of a game",
      "params": {
        "id": "ID of message with game media attachment",
        "peer": "Where was the game sent",
        "user_id": "Get high scores made by a certain user"
      }
    },
    "messages.GetHistory": {
      "desc": "Returns the conversation history with one interlocutor / within a chat",
      "params": {
        "add_offset": "Number of list elements to be skipped, negative values are also accepted.",
        "hash": "Result hash",
        "limit": "Number of results to return",
        "max_id": "If a positive value was transferred, the method will return only messages with IDs less than max_id",
        "min_id": "If a positive value was transferred, the method will return only messages with IDs more than min_id",
        "offset_date": "Only return messages sent before the specified date",
        "offset_id": "Only return messages starting from the specified message ID",
        "peer": "Target peer"
      }
    },
    "messages.GetInlineBotResults": {
      "desc": "Query an inline bot",
      "params": {
        "bot": "The bot to query",
        "flags": "Flags, see TL conditional fields",
        "geo_point": "The geolocation, if requested",
        "offset": "The offset within the results, will be passed directly as-is to the bot.",
        "peer": "The currently opened chat",
        "query": "The query"
      }
    },
    "messages.GetInlineGameHighScores": {
      "desc": "Get highscores of a game sent using an inline bot",
      "params": {
        "id": "ID of inline message",
        "user_id": "Get high scores of a certain user"
      }
    },
    "messages.GetMaskStickers": {
      "desc": "Get installed mask stickers",
      "params": {
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the messages.allStickers.hash field returned by a previous call to the method, or pass 0 if this is the first call."
      }
    },
    "messages.GetMessageEditData": {
      "desc": "Find out if a media message's caption can be edited",
      "params": {
        "id": "ID of message",
        "peer": "Peer where the media was sent"
      }
    },
    "messages.GetMessageReactionsList": {
      "desc": "Get message reaction list, along with the sender of each reaction.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "id": "Message ID",
        "limit": "Maximum number of results to return, see pagination",
        "offset": "Offset for pagination (taken from the next_offset field of the returned messages.MessageReactionsList); empty in the first request.",
        "peer": "Peer",
        "reaction": "Get only reactions of this type"
      }
    },
    "messages.GetMessageReadParticipants": {
      "desc": "Get which users read a specific message: only available for groups and supergroups with less than chat_read_mark_size_threshold members, read receipts will be stored for chat_read_mark_expire_period seconds after the message was sent, see client configuration for more info \u00bb.",
      "params": {
        "msg_id": "Message ID",
        "peer": "Dialog"
      }
    },
    "messages.GetMessages": {
      "desc": "Returns the list of messages by their IDs.",
      "params": {
        "id": "Message ID list"
      }
    },
    "messages.GetMessagesReactions": {
      "desc": "Get message reactions \u00bb",
      "params": {
        "id": "Message IDs",
        "peer": "Peer"
      }
    },
    "messages.GetMessagesViews": {
      "desc": "Get and increase the view counter of a message sent or forwarded from a channel",
      "params": {
        "id": "ID of message",
        "increment": "Whether to mark the message as viewed and increment the view counter",
        "peer": "Peer where the message was found"
      }
    },
    "messages.GetMyStickers": {
      "desc": "{schema}",
      "params": {
        "limit": "Maximum number of results to return, see pagination",
        "offset_id": "Offsets for pagination, for more info click here"
      }
    },
    "messages.GetOldFeaturedStickers": {
      "desc": "Method for fetching previously featured stickers",
      "params": {
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the messages.featuredStickers.hash field returned by a previous call to the method, or pass 0 if this is the first call.",
        "limit": "Maximum number of results to return, see pagination",
        "offset": "Offset"
      }
    },
    "messages.GetOnlines": {
      "desc": "Get count of online users in a chat",
      "params": {
        "peer": "The chat"
      }
    },
    "messages.GetOutboxReadDate": {
      "desc": "{schema}",
      "params": {
        "msg_id": "",
        "peer": ""
      }
    },
    "messages.GetPeerDialogs": {
      "desc": "Get dialog info of specified peers",
      "params": {
        "peers": "Peers"
      }
    },
    "messages.GetPeerSettings": {
      "desc": "Get peer settings",
      "params": {
        "peer": "The peer"
      }
    },
    "messages.GetPinnedDialogs": {
      "desc": "Get pinned dialogs",
      "params": {
        "folder_id": "Peer folder ID, for more info click here"
      }
    },
    "messages.GetPinnedSavedDialogs": {
      "desc": "Get pinned saved dialogs, see here \u00bb for more info.",
      "params": {}
    },
    "messages.GetPollResults": {
      "desc": "Get poll results",
      "params": {
        "msg_id": "Message ID of poll message",
        "peer": "Peer where the poll was found"
      }
    },
    "messages.GetPollVotes": {
      "desc": "Get poll results for non-anonymous polls",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "id": "Message ID",
        "limit": "Number of results to return",
        "offset": "Offset for results, taken from the next_offset field of messages.votesList, initially an empty string. Note: if no more results are available, the method call will return an empty next_offset; thus, avoid providing the next_offset returned in messages.votesList if it is empty, to avoid an infinite loop.",
        "option": "Get only results for the specified poll option",
        "peer": "Chat where the poll was sent"
      }
    },
    "messages.GetQuickReplies": {
      "desc": "{schema}",
      "params": {
        "hash": "Hash for pagination, for more info click here"
      }
    },
    "messages.GetQuickReplyMessages": {
      "desc": "{schema}",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "hash": "Hash for pagination, for more info click here",
        "id": "",
        "shortcut_id": ""
      }
    },
    "messages.GetRecentLocations": {
      "desc": "Get live location history of a certain user",
      "params": {
        "hash": "Hash for pagination, for more info click here",
        "limit": "Maximum number of results to return, see pagination",
        "peer": "User"
      }
    },
    "messages.GetRecentReactions": {
      "desc": "Get recently used message reactions",
      "params": {
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the messages.reactions.hash field returned by a previous call to the method, or pass 0 if this is the first call.",
        "limit": "Maximum number of results to return, see pagination"
      }
    },
    "messages.GetRecentStickers": {
      "desc": "Get recent stickers",
      "params": {
        "attached": "Get stickers recently attached to photo or video files",
        "flags": "Flags, see TL conditional fields",
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the messages.recentStickers.hash field returned by a previous call to the method, or pass 0 if this is the first call."
      }
    },
    "messages.GetReplies": {
      "desc": "Get messages in a reply thread",
      "params": {
        "add_offset": "Offsets for pagination, for more info click here",
        "hash": "Hash for pagination, for more info click here",
        "limit": "Maximum number of results to return, see pagination",
        "max_id": "If a positive value was transferred, the method will return only messages with ID smaller than max_id",
        "min_id": "If a positive value was transferred, the method will return only messages with ID bigger than min_id",
        "msg_id": "Message ID",
        "offset_date": "Offsets for pagination, for more info click here",
        "offset_id": "Offsets for pagination, for more info click here",
        "peer": "Peer"
      }
    },
    "messages.GetSavedDialogs": {
      "desc": "Returns the current saved dialog list, see here \u00bb for more info.",
      "params": {
        "exclude_pinned": "Exclude pinned dialogs",
        "flags": "Flags, see TL conditional fields",
        "hash": "Hash for pagination, for more info click here",
        "limit": "Number of list elements to be returned",
        "offset_date": "Offsets for pagination, for more info click here",
        "offset_id": "Offsets for pagination, for more info click here (top_message ID used for pagination)",
        "offset_peer": "Offset peer for pagination"
      }
    },
    "messages.GetSavedGifs": {
      "desc": "Get saved GIFs.",
      "params": {
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the messages.savedGifs.hash field returned by a previous call to the method, or pass 0 if this is the first call."
      }
    },
    "messages.GetSavedHistory": {
      "desc": "Returns saved messages \u00bb forwarded from a specific peer",
      "params": {
        "add_offset": "Number of list elements to be skipped, negative values are also accepted.",
        "hash": "Result hash",
        "limit": "Number of results to return",
        "max_id": "If a positive value was transferred, the method will return only messages with IDs less than max_id",
        "min_id": "If a positive value was transferred, the method will return only messages with IDs more than min_id",
        "offset_date": "Only return messages sent before the specified date",
        "offset_id": "Only return messages starting from the specified message ID",
        "peer": "Target peer"
      }
    },
    "messages.GetSavedReactionTags": {
      "desc": "Fetch the full list of saved message tags created by the user.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the messages.savedReactionTags.hash field returned by a previous call to the method, or pass 0 if this is the first call.",
        "peer": "If set, returns tags only used in the specified saved message dialog."
      }
    },
    "messages.GetScheduledHistory": {
      "desc": "Get scheduled messages",
      "params": {
        "hash": "Hash for pagination, for more info click here",
        "peer": "Peer"
      }
    },
    "messages.GetScheduledMessages": {
      "desc": "Get scheduled messages",
      "params": {
        "id": "IDs of scheduled messages",
        "peer": "Peer"
      }
    },
    "messages.GetSearchCounters": {
      "desc": "Get the number of results that would be found by a messages.search call with the same parameters",
      "params": {
        "filters": "Search filters",
        "flags": "Flags, see TL conditional fields",
        "peer": "Peer where to search",
        "saved_peer_id": "Search within the saved message dialog \u00bb with this ID.",
        "top_msg_id": "If set, consider only messages within the specified forum topic"
      }
    },
    "messages.GetSearchResultsCalendar": {
      "desc": "Returns information about the next messages of the specified type in the chat split by days.",
      "params": {
        "filter": "Message filter, inputMessagesFilterEmpty, inputMessagesFilterMyMentions filters are not supported by this method.",
        "flags": "Flags, see TL conditional fields",
        "offset_date": "Offsets for pagination, for more info click here",
        "offset_id": "Offsets for pagination, for more info click here",
        "peer": "Peer where to search",
        "saved_peer_id": "Search within the saved message dialog \u00bb with this ID."
      }
    },
    "messages.GetSearchResultsPositions": {
      "desc": "Returns sparse positions of messages of the specified type in the chat to be used for shared media scroll implementation.",
      "params": {
        "filter": "Message filter, inputMessagesFilterEmpty, inputMessagesFilterMyMentions filters are not supported by this method.",
        "flags": "Flags, see TL conditional fields",
        "limit": "Maximum number of results to return, see pagination",
        "offset_id": "Offsets for pagination, for more info click here",
        "peer": "Peer where to search",
        "saved_peer_id": "Search within the saved message dialog \u00bb with this ID."
      }
    },
    "messages.GetSplitRanges": {
      "desc": "Get message ranges for saving the user's chat history",
      "params": {}
    },
    "messages.GetStickerSet": {
      "desc": "Get info about a stickerset",
      "params": {
        "hash": "Hash for pagination, for more info click here",
        "stickerset": "Stickerset"
      }
    },
    "messages.GetStickers": {
      "desc": "Get stickers by emoji",
      "params": {
        "emoticon": "The emoji",
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the messages.stickers.hash field returned by a previous call to the method, or pass 0 if this is the first call."
      }
    },
    "messages.GetSuggestedDialogFilters": {
      "desc": "Get suggested folders",
      "params": {}
    },
    "messages.GetTopReactions": {
      "desc": "Got popular message reactions",
      "params": {
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the messages.reactions.hash field returned by a previous call to the method, or pass 0 if this is the first call.",
        "limit": "Maximum number of results to return, see pagination"
      }
    },
    "messages.GetUnreadMentions": {
      "desc": "Get unread messages where we were mentioned",
      "params": {
        "add_offset": "Offsets for pagination, for more info click here",
        "flags": "Flags, see TL conditional fields",
        "limit": "Maximum number of results to return, see pagination",
        "max_id": "Maximum message ID to return, see pagination",
        "min_id": "Minimum message ID to return, see pagination",
        "offset_id": "Offsets for pagination, for more info click here",
        "peer": "Peer where to look for mentions",
        "top_msg_id": "If set, considers only messages within the specified forum topic"
      }
    },
    "messages.GetUnreadReactions": {
      "desc": "Get unread reactions to messages you sent",
      "params": {
        "add_offset": "Offsets for pagination, for more info click here",
        "flags": "Flags, see TL conditional fields",
        "limit": "Maximum number of results to return, see pagination",
        "max_id": "Only return reactions for messages up until this message ID",
        "min_id": "Only return reactions for messages starting from this message ID",
        "offset_id": "Offsets for pagination, for more info click here",
        "peer": "Peer",
        "top_msg_id": "If set, considers only reactions to messages within the specified forum topic"
      }
    },
    "messages.GetWebPage": {
      "desc": "Get instant view page",
      "params": {
        "hash": "Hash for pagination, for more info click here",
        "url": "URL of IV page to fetch"
      }
    },
    "messages.GetWebPagePreview": {
      "desc": "Get preview of webpage",
      "params": {
        "entities": "Message entities for styled text",
        "flags": "Flags, see TL conditional fields",
        "message": "Message from which to extract the preview"
      }
    },
    "messages.HideAllChatJoinRequests": {
      "desc": "Dismiss or approve all join requests related to a specific chat or channel.",
      "params": {
        "approved": "Whether to dismiss or approve all chat join requests \u00bb",
        "flags": "Flags, see TL conditional fields",
        "link": "Only dismiss or approve join requests \u00bb initiated using this invite link",
        "peer": "The chat or channel"
      }
    },
    "messages.HideChatJoinRequest": {
      "desc": "Dismiss or approve a chat join request related to a specific chat or channel.",
      "params": {
        "approved": "Whether to dismiss or approve the chat join request \u00bb",
        "flags": "Flags, see TL conditional fields",
        "peer": "The chat or channel",
        "user_id": "The user whose join request \u00bb should be dismissed or approved"
      }
    },
    "messages.HidePeerSettingsBar": {
      "desc": "Should be called after the user hides the report spam/add as contact bar of a new chat, effectively prevents the user from executing the actions specified in the action bar \u00bb.",
      "params": {
        "peer": "Peer"
      }
    },
    "messages.ImportChatInvite": {
      "desc": "Import a chat invite and join a private chat/supergroup/channel",
      "params": {
        "hash": "hash from a chat invite deep link"
      }
    },
    "messages.InitHistoryImport": {
      "desc": "Import chat history from a foreign chat app into a specific Telegram chat, click here for more info about imported chats \u00bb.",
      "params": {
        "file": "File with messages to import.",
        "media_count": "Number of media files associated with the chat that will be uploaded using messages.uploadImportedMedia.",
        "peer": "The Telegram chat where the history should be imported."
      }
    },
    "messages.InstallStickerSet": {
      "desc": "Install a stickerset",
      "params": {
        "archived": "Whether to archive stickerset",
        "stickerset": "Stickerset to install"
      }
    },
    "messages.MarkDialogUnread": {
      "desc": "Manually mark dialog as unread",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "peer": "Dialog",
        "unread": "Mark as unread/read"
      }
    },
    "messages.MigrateChat": {
      "desc": "Turn a basic group into a supergroup",
      "params": {
        "chat_id": "Basic group to migrate"
      }
    },
    "messages.ProlongWebView": {
      "desc": "Indicate to the server (from the user side) that the user is still using a web app.",
      "params": {
        "bot": "Bot that owns the web app",
        "flags": "Flags, see TL conditional fields",
        "peer": "Dialog where the web app was opened.",
        "query_id": "Web app interaction ID obtained from messages.requestWebView",
        "reply_to": "If set, indicates that the inline message that will be sent by the bot on behalf of the user once the web app interaction is terminated should be sent in reply to the specified message or story.",
        "send_as": "Open the web app as the specified peer",
        "silent": "Whether the inline message that will be sent by the bot on behalf of the user once the web app interaction is terminated should be sent silently (no notifications for the receivers)."
      }
    },
    "messages.RateTranscribedAudio": {
      "desc": "Rate transcribed voice message",
      "params": {
        "good": "Whether the transcription was correct",
        "msg_id": "Message ID",
        "peer": "Peer where the voice message was sent",
        "transcription_id": "Transcription ID"
      }
    },
    "messages.ReadDiscussion": {
      "desc": "Mark a thread as read",
      "params": {
        "msg_id": "ID of message that started the thread",
        "peer": "Group ID",
        "read_max_id": "ID up to which thread messages were read"
      }
    },
    "messages.ReadEncryptedHistory": {
      "desc": "Marks message history within a secret chat as read.",
      "params": {
        "max_date": "Maximum date value for received messages in history",
        "peer": "Secret chat ID"
      }
    },
    "messages.ReadFeaturedStickers": {
      "desc": "Mark new featured stickers as read",
      "params": {
        "id": "IDs of stickersets to mark as read"
      }
    },
    "messages.ReadHistory": {
      "desc": "Marks message history as read.",
      "params": {
        "max_id": "If a positive value is passed, only messages with identifiers less or equal than the given one will be read",
        "peer": "Target user or group"
      }
    },
    "messages.ReadMentions": {
      "desc": "Mark mentions as read",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "peer": "Dialog",
        "top_msg_id": "Mark as read only mentions within the specified forum topic"
      }
    },
    "messages.ReadMessageContents": {
      "desc": "Notifies the sender about the recipient having listened a voice message or watched a video.",
      "params": {
        "id": "Message ID list"
      }
    },
    "messages.ReadReactions": {
      "desc": "Mark message reactions \u00bb as read",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "peer": "Peer",
        "top_msg_id": "Mark as read only reactions to messages within the specified forum topic"
      }
    },
    "messages.ReceivedMessages": {
      "desc": "Confirms receipt of messages by a client, cancels PUSH-notification sending.",
      "params": {
        "max_id": "Maximum message ID available in a client."
      }
    },
    "messages.ReceivedQueue": {
      "desc": "Confirms receipt of messages in a secret chat by client, cancels push notifications.\nThe method returns a list of random_ids of messages for which push notifications were cancelled.",
      "params": {
        "max_qts": "Maximum qts value available at the client"
      }
    },
    "messages.ReorderPinnedDialogs": {
      "desc": "Reorder pinned dialogs",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "folder_id": "Peer folder ID, for more info click here",
        "force": "If set, dialogs pinned server-side but not present in the order field will be unpinned.",
        "order": "New dialog order"
      }
    },
    "messages.ReorderPinnedSavedDialogs": {
      "desc": "Reorder pinned saved message dialogs \u00bb.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "force": "If set, dialogs pinned server-side but not present in the order field will be unpinned.",
        "order": "New dialog order"
      }
    },
    "messages.ReorderQuickReplies": {
      "desc": "{schema}",
      "params": {
        "order": ""
      }
    },
    "messages.ReorderStickerSets": {
      "desc": "Reorder installed stickersets",
      "params": {
        "emojis": "Reorder custom emoji stickersets",
        "flags": "Flags, see TL conditional fields",
        "masks": "Reorder mask stickersets",
        "order": "New stickerset order by stickerset IDs"
      }
    },
    "messages.Report": {
      "desc": "Report a message in a chat for violation of telegram's Terms of Service",
      "params": {
        "id": "IDs of messages to report",
        "message": "Comment for report moderation",
        "peer": "Peer",
        "reason": "Why are these messages being reported"
      }
    },
    "messages.ReportEncryptedSpam": {
      "desc": "Report a secret chat for spam",
      "params": {
        "peer": "The secret chat to report"
      }
    },
    "messages.ReportReaction": {
      "desc": "Report a message reaction",
      "params": {
        "id": "Message ID",
        "peer": "Peer where the message was sent",
        "reaction_peer": "Peer that sent the reaction"
      }
    },
    "messages.ReportSpam": {
      "desc": "Report a new incoming chat for spam, if the peer settings of the chat allow us to do that",
      "params": {
        "peer": "Peer to report"
      }
    },
    "messages.RequestAppWebView": {
      "desc": "Open a bot mini app from a direct Mini App deep link, sending over user information after user confirmation.",
      "params": {
        "app": "The app obtained by invoking messages.getBotApp as specified in the direct Mini App deep link docs.",
        "flags": "Flags, see TL conditional fields",
        "peer": "If the client has clicked on the link in a Telegram chat, pass the chat's peer information; otherwise pass the bot's peer information, instead.",
        "platform": "Short name of the application; 0-64 English letters, digits, and underscores",
        "start_param": "If the startapp query string parameter is present in the direct Mini App deep link, pass it to start_param.",
        "theme_params": "Theme parameters \u00bb",
        "write_allowed": "Set this flag if the bot is asking permission to send messages to the user as specified in the direct Mini App deep link docs, and the user agreed."
      }
    },
    "messages.RequestEncryption": {
      "desc": "Sends a request to start a secret chat to the user.",
      "params": {
        "g_a": "A = g ^ a mod p, see Wikipedia",
        "random_id": "Unique client request ID required to prevent resending. This also doubles as the chat ID.",
        "user_id": "User ID"
      }
    },
    "messages.RequestSimpleWebView": {
      "desc": "Open a bot mini app.",
      "params": {
        "bot": "Bot that owns the mini app",
        "flags": "Flags, see TL conditional fields",
        "from_side_menu": "Set this flag if opening the Mini App from the installed side menu entry \u00bb or from a Mini App link \u00bb.",
        "from_switch_webview": "Whether the webapp was opened by clicking on the switch_webview button shown on top of the inline results list returned by messages.getInlineBotResults.",
        "platform": "Short name of the application; 0-64 English letters, digits, and underscores",
        "start_param": "Start parameter, if opening from a Mini App link \u00bb.",
        "theme_params": "Theme parameters \u00bb",
        "url": "Web app URL, if opening from a keyboard button or inline result"
      }
    },
    "messages.RequestUrlAuth": {
      "desc": "Get more info about a Seamless Telegram Login authorization request, for more info click here \u00bb",
      "params": {
        "button_id": "The ID of the button with the authorization request",
        "flags": "Flags, see TL conditional fields",
        "msg_id": "The message",
        "peer": "Peer where the message is located",
        "url": "URL used for link URL authorization, click here for more info \u00bb"
      }
    },
    "messages.RequestWebView": {
      "desc": "Open a bot mini app, sending over user information after user confirmation.",
      "params": {
        "bot": "Bot that owns the web app",
        "flags": "Flags, see TL conditional fields",
        "from_bot_menu": "Whether the webview was opened by clicking on the bot's menu button \u00bb.",
        "peer": "Dialog where the web app is being opened, and where the resulting message will be sent (see the docs for more info \u00bb).",
        "platform": "Short name of the application; 0-64 English letters, digits, and underscores",
        "reply_to": "If set, indicates that the inline message that will be sent by the bot on behalf of the user once the web app interaction is terminated should be sent in reply to the specified message or story.",
        "send_as": "Open the web app as the specified peer, sending the resulting the message as the specified peer.",
        "silent": "Whether the inline message that will be sent by the bot on behalf of the user once the web app interaction is terminated should be sent silently (no notifications for the receivers).",
        "start_param": "If the web app was opened from the attachment menu using a attachment menu deep link, start_param should contain the data from the startattach parameter.",
        "theme_params": "Theme parameters \u00bb",
        "url": "Web app URL"
      }
    },
    "messages.SaveDefaultSendAs": {
      "desc": "Change the default peer that should be used when sending messages, reactions, poll votes to a specific group",
      "params": {
        "peer": "Group",
        "send_as": "The default peer that should be used when sending messages to the group"
      }
    },
    "messages.SaveDraft": {
      "desc": "Save a message draft associated to a chat.",
      "params": {
        "entities": "Message entities for styled text",
        "flags": "Flags, see TL conditional fields",
        "invert_media": "If set, any eventual webpage preview will be shown on top of the message instead of at the bottom.",
        "media": "Attached media",
        "message": "The draft",
        "no_webpage": "Disable generation of the webpage preview",
        "peer": "Destination of the message that should be sent",
        "reply_to": "If set, indicates that the message should be sent in reply to the specified message or story."
      }
    },
    "messages.SaveGif": {
      "desc": "Add GIF to saved gifs list",
      "params": {
        "id": "GIF to save",
        "unsave": "Whether to remove GIF from saved gifs list"
      }
    },
    "messages.SaveRecentSticker": {
      "desc": "Add/remove sticker from recent stickers list",
      "params": {
        "attached": "Whether to add/remove stickers recently attached to photo or video files",
        "flags": "Flags, see TL conditional fields",
        "id": "Sticker",
        "unsave": "Whether to save or unsave the sticker"
      }
    },
    "messages.Search": {
      "desc": "Search for messages.",
      "params": {
        "add_offset": "Additional offset",
        "filter": "Filter to return only specified message types",
        "flags": "Flags, see TL conditional fields",
        "from_id": "Only return messages sent by the specified user ID",
        "hash": "Hash",
        "limit": "Number of results to return",
        "max_date": "If a positive value was transferred, only messages with a sending date smaller than the transferred one will be returned",
        "max_id": "Maximum message ID to return",
        "min_date": "If a positive value was transferred, only messages with a sending date bigger than the transferred one will be returned",
        "min_id": "Minimum message ID to return",
        "offset_id": "Only return messages starting from the specified message ID",
        "peer": "User or chat, histories with which are searched, or (inputPeerEmpty) constructor to search in all private chats and normal groups (not channels) \u00bb. Use messages.searchGlobal to search globally in all chats, groups, supergroups and channels.",
        "q": "Text search request",
        "saved_peer_id": "Search within the saved message dialog \u00bb with this ID.",
        "saved_reaction": "",
        "top_msg_id": "Thread ID"
      }
    },
    "messages.SearchCustomEmoji": {
      "desc": "Look for custom emojis associated to a UTF8 emoji",
      "params": {
        "emoticon": "The emoji",
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the emojiList.hash field returned by a previous call to the method, or pass 0 if this is the first call."
      }
    },
    "messages.SearchEmojiStickerSets": {
      "desc": "Search for custom emoji stickersets \u00bb",
      "params": {
        "exclude_featured": "Exclude featured stickersets from results",
        "flags": "Flags, see TL conditional fields",
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the messages.foundStickerSets.hash field returned by a previous call to the method, or pass 0 if this is the first call.",
        "q": "Query string"
      }
    },
    "messages.SearchGlobal": {
      "desc": "Search for messages and peers globally",
      "params": {
        "broadcasts_only": "",
        "filter": "Global search filter",
        "flags": "Flags, see TL conditional fields",
        "folder_id": "Peer folder ID, for more info click here",
        "limit": "Offsets for pagination, for more info click here",
        "max_date": "If a positive value was transferred, the method will return only messages with date smaller than max_date",
        "min_date": "If a positive value was specified, the method will return only messages with date bigger than min_date",
        "offset_id": "Offsets for pagination, for more info click here",
        "offset_peer": "Offsets for pagination, for more info click here",
        "offset_rate": "Initially 0, then set to the next_rate parameter of messages.messagesSlice",
        "q": "Query"
      }
    },
    "messages.SearchSentMedia": {
      "desc": "View and search recently sent media.\nThis method does not support pagination.",
      "params": {
        "filter": "Message filter",
        "limit": "Maximum number of results to return (max 100).",
        "q": "Optional search query"
      }
    },
    "messages.SearchStickerSets": {
      "desc": "Search for stickersets",
      "params": {
        "exclude_featured": "Exclude featured stickersets from results",
        "flags": "Flags, see TL conditional fields",
        "hash": "Hash for pagination, for more info click here.Note: the usual hash generation algorithm cannot be used in this case, please re-use the messages.foundStickerSets.hash field returned by a previous call to the method, or pass 0 if this is the first call.",
        "q": "Query string"
      }
    },
    "messages.SendBotRequestedPeer": {
      "desc": "Send one or more chosen peers, as requested by a keyboardButtonRequestPeer button.",
      "params": {
        "button_id": "The button_id field from the keyboardButtonRequestPeer constructor.",
        "msg_id": "ID of the message that contained the reply keyboard with the keyboardButtonRequestPeer button.",
        "peer": "The bot that sent the keyboardButtonRequestPeer button.",
        "requested_peers": "The chosen peers."
      }
    },
    "messages.SendEncrypted": {
      "desc": "Sends a text message to a secret chat.",
      "params": {
        "data": "TL-serialization of DecryptedMessage type, encrypted with a key that was created during chat initialization",
        "flags": "Flags, see TL conditional fields",
        "peer": "Secret chat ID",
        "random_id": "Unique client message ID, necessary to avoid message resending",
        "silent": "Send encrypted message without a notification"
      }
    },
    "messages.SendEncryptedFile": {
      "desc": "Sends a message with a file attachment to a secret chat",
      "params": {
        "data": "TL-serialization of DecryptedMessage type, encrypted with a key generated during chat initialization",
        "file": "File attachment for the secret chat",
        "flags": "Flags, see TL conditional fields",
        "peer": "Secret chat ID",
        "random_id": "Unique client message ID necessary to prevent message resending",
        "silent": "Whether to send the file without triggering a notification"
      }
    },
    "messages.SendEncryptedService": {
      "desc": "Sends a service message to a secret chat.",
      "params": {
        "data": "TL-serialization of  DecryptedMessage type, encrypted with a key generated during chat initialization",
        "peer": "Secret chat ID",
        "random_id": "Unique client message ID required to prevent message resending"
      }
    },
    "messages.SendInlineBotResult": {
      "desc": "Send a result obtained using messages.getInlineBotResults.",
      "params": {
        "background": "Whether to send the message in background",
        "clear_draft": "Whether to clear the draft",
        "flags": "Flags, see TL conditional fields",
        "hide_via": "Whether to hide the via @botname in the resulting message (only for bot usernames encountered in the config)",
        "id": "Result ID from messages.getInlineBotResults",
        "peer": "Destination",
        "query_id": "Query ID from messages.getInlineBotResults",
        "quick_reply_shortcut": "",
        "random_id": "Random ID to avoid resending the same query",
        "reply_to": "If set, indicates that the message should be sent in reply to the specified message or story.",
        "schedule_date": "Scheduled message date for scheduled messages",
        "send_as": "Send this message as the specified peer",
        "silent": "Whether to send the message silently (no notification will be triggered on the other client)"
      }
    },
    "messages.SendMedia": {
      "desc": "Send a media",
      "params": {
        "background": "Send message in background",
        "clear_draft": "Clear the draft",
        "effect": "",
        "entities": "Message entities for styled text",
        "flags": "Flags, see TL conditional fields",
        "invert_media": "If set, any eventual webpage preview will be shown on top of the message instead of at the bottom.",
        "media": "Attached media",
        "message": "Caption",
        "noforwards": "Only for bots, disallows forwarding and saving of the messages, even if the destination chat doesn't have content protection enabled",
        "peer": "Destination",
        "quick_reply_shortcut": "",
        "random_id": "Random ID to avoid resending the same message",
        "reply_markup": "Reply markup for bot keyboards",
        "reply_to": "If set, indicates that the message should be sent in reply to the specified message or story.",
        "schedule_date": "Scheduled message date for scheduled messages",
        "send_as": "Send this message as the specified peer",
        "silent": "Send message silently (no notification should be triggered)",
        "update_stickersets_order": "Whether to move used stickersets to top, see here for more info on this flag \u00bb"
      }
    },
    "messages.SendMessage": {
      "desc": "Sends a message to a chat",
      "params": {
        "background": "Send this message as background message",
        "clear_draft": "Clear the draft field",
        "effect": "",
        "entities": "Message entities for sending styled text",
        "flags": "Flags, see TL conditional fields",
        "invert_media": "If set, any eventual webpage preview will be shown on top of the message instead of at the bottom.",
        "message": "The message",
        "no_webpage": "Set this flag to disable generation of the webpage preview",
        "noforwards": "Only for bots, disallows forwarding and saving of the messages, even if the destination chat doesn't have content protection enabled",
        "peer": "The destination where the message will be sent",
        "quick_reply_shortcut": "",
        "random_id": "Unique client message ID required to prevent message resending",
        "reply_markup": "Reply markup for sending bot buttons",
        "reply_to": "If set, indicates that the message should be sent in reply to the specified message or story. Also used to quote other messages.",
        "schedule_date": "Scheduled message date for scheduled messages",
        "send_as": "Send this message as the specified peer",
        "silent": "Send this message silently (no notifications for the receivers)",
        "update_stickersets_order": "Whether to move used stickersets to top, see here for more info on this flag \u00bb"
      }
    },
    "messages.SendMultiMedia": {
      "desc": "Send an album or grouped media",
      "params": {
        "background": "Send in background?",
        "clear_draft": "Whether to clear drafts",
        "effect": "",
        "flags": "Flags, see TL conditional fields",
        "invert_media": "If set, any eventual webpage preview will be shown on top of the message instead of at the bottom.",
        "multi_media": "The medias to send: note that they must be separately uploaded using messages.uploadMedia first, using raw inputMediaUploaded* constructors is not supported.",
        "noforwards": "Only for bots, disallows forwarding and saving of the messages, even if the destination chat doesn't have content protection enabled",
        "peer": "The destination chat",
        "quick_reply_shortcut": "",
        "reply_to": "If set, indicates that the message should be sent in reply to the specified message or story.",
        "schedule_date": "Scheduled message date for scheduled messages",
        "send_as": "Send this message as the specified peer",
        "silent": "Whether to send the album silently (no notification triggered)",
        "update_stickersets_order": "Whether to move used stickersets to top, see here for more info on this flag \u00bb"
      }
    },
    "messages.SendQuickReplyMessages": {
      "desc": "{schema}",
      "params": {
        "id": "",
        "peer": "",
        "random_id": "",
        "shortcut_id": ""
      }
    },
    "messages.SendReaction": {
      "desc": "React to message.",
      "params": {
        "add_to_recent": "Whether to add this reaction to the recent reactions list \u00bb.",
        "big": "Whether a bigger and longer reaction should be shown",
        "flags": "Flags, see TL conditional fields",
        "msg_id": "Message ID to react to",
        "peer": "Peer",
        "reaction": "A list of reactions"
      }
    },
    "messages.SendScheduledMessages": {
      "desc": "Send scheduled messages right away",
      "params": {
        "id": "Scheduled message IDs",
        "peer": "Peer"
      }
    },
    "messages.SendScreenshotNotification": {
      "desc": "Notify the other user in a private chat that a screenshot of the chat was taken",
      "params": {
        "peer": "Other user",
        "random_id": "Random ID to avoid message resending",
        "reply_to": "Indicates the message that was screenshotted (the specified message ID can also be 0 to avoid indicating any specific message)."
      }
    },
    "messages.SendVote": {
      "desc": "Vote in a poll",
      "params": {
        "msg_id": "The message ID of the poll",
        "options": "The options that were chosen",
        "peer": "The chat where the poll was sent"
      }
    },
    "messages.SendWebViewData": {
      "desc": "Used by the user to relay data from an opened reply keyboard bot mini app to the bot that owns it.",
      "params": {
        "bot": "Bot that owns the web app",
        "button_text": "Text of the keyboardButtonSimpleWebView that was pressed to open the web app.",
        "data": "Data to relay to the bot, obtained from a web_app_data_send JS event.",
        "random_id": "Unique client message ID to prevent duplicate sending of the same event"
      }
    },
    "messages.SendWebViewResultMessage": {
      "desc": "Terminate webview interaction started with messages.requestWebView, sending the specified message to the chat on behalf of the user.",
      "params": {
        "bot_query_id": "Webview interaction ID obtained from messages.requestWebView",
        "result": "Message to send"
      }
    },
    "messages.SetBotCallbackAnswer": {
      "desc": "Set the callback answer to a user button press (bots only)",
      "params": {
        "alert": "Whether to show the message as a popup instead of a toast notification",
        "cache_time": "Cache validity",
        "flags": "Flags, see TL conditional fields",
        "message": "Popup to show",
        "query_id": "Query ID",
        "url": "URL to open"
      }
    },
    "messages.SetBotPrecheckoutResults": {
      "desc": "Once the user has confirmed their payment and shipping details, the bot receives an updateBotPrecheckoutQuery update.\nUse this method to respond to such pre-checkout queries.\nNote: Telegram must receive an answer within 10 seconds after the pre-checkout query was sent.",
      "params": {
        "error": "Required if the success isn't set. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. \"Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!\"). Telegram will display this message to the user.",
        "flags": "Flags, see TL conditional fields",
        "query_id": "Unique identifier for the query to be answered",
        "success": "Set this flag if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order, otherwise do not set it, and set the error field, instead"
      }
    },
    "messages.SetBotShippingResults": {
      "desc": "If you sent an invoice requesting a shipping address and the parameter is_flexible was specified, the bot will receive an updateBotShippingQuery update. Use this method to reply to shipping queries.",
      "params": {
        "error": "Error message in human readable form that explains why it is impossible to complete the order (e.g. \"Sorry, delivery to your desired address is unavailable\"). Telegram will display this message to the user.",
        "flags": "Flags, see TL conditional fields",
        "query_id": "Unique identifier for the query to be answered",
        "shipping_options": "A vector of available shipping options."
      }
    },
    "messages.SetChatAvailableReactions": {
      "desc": "Change the set of message reactions \u00bb that can be used in a certain group, supergroup or channel",
      "params": {
        "available_reactions": "Allowed reaction emojis",
        "flags": "Flags, see TL conditional fields",
        "peer": "Group where to apply changes",
        "reactions_limit": ""
      }
    },
    "messages.SetChatTheme": {
      "desc": "Change the chat theme of a certain chat",
      "params": {
        "emoticon": "Emoji, identifying a specific chat theme; a list of chat themes can be fetched using account.getChatThemes",
        "peer": "Private chat where to change theme"
      }
    },
    "messages.SetChatWallPaper": {
      "desc": "Set a custom wallpaper \u00bb in a specific private chat with another user.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "for_both": "Only for Premium users, sets the specified wallpaper for both users of the chat, without requiring confirmation from the other user.",
        "id": "If the wallpaper was obtained from a messageActionSetChatWallPaper service message, must contain the ID of that message.",
        "peer": "The private chat where the wallpaper will be set",
        "revert": "If we don't like the new wallpaper the other user of the chat has chosen for us using the for_both flag, we can re-set our previous wallpaper just on our side using this flag.",
        "settings": "Wallpaper settings, obtained as described in the wallpaper documentation \u00bb or from messageActionSetChatWallPaper.wallpaper.settings.",
        "wallpaper": "The wallpaper \u00bb, obtained as described in the wallpaper documentation \u00bb; must not be provided when installing a wallpaper obtained from a messageActionSetChatWallPaper service message (id must be provided, instead)."
      }
    },
    "messages.SetDefaultHistoryTTL": {
      "desc": "Changes the default value of the Time-To-Live setting, applied to all new chats.",
      "params": {
        "period": "The new default Time-To-Live of all messages sent in new chats."
      }
    },
    "messages.SetDefaultReaction": {
      "desc": "Change default emoji reaction to use in the quick reaction menu: the value is synced across devices and can be fetched using help.getConfig, reactions_default field.",
      "params": {
        "reaction": "New emoji reaction"
      }
    },
    "messages.SetEncryptedTyping": {
      "desc": "Send typing event by the current user to a secret chat.",
      "params": {
        "peer": "Secret chat ID",
        "typing": "Typing.Possible values:(boolTrue), if the user started typing and more than 5 seconds have passed since the last request(boolFalse), if the user stopped typing"
      }
    },
    "messages.SetGameScore": {
      "desc": "Use this method to set the score of the specified user in a game sent as a normal message (bots only).",
      "params": {
        "edit_message": "Set this flag if the game message should be automatically edited to include the current scoreboard",
        "flags": "Flags, see TL conditional fields",
        "force": "Set this flag if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters",
        "id": "Identifier of the sent message",
        "peer": "Unique identifier of target chat",
        "score": "New score",
        "user_id": "User identifier"
      }
    },
    "messages.SetHistoryTTL": {
      "desc": "Set maximum Time-To-Live of all messages in the specified chat",
      "params": {
        "peer": "The dialog",
        "period": "Automatically delete all messages sent in the chat after this many seconds"
      }
    },
    "messages.SetInlineBotResults": {
      "desc": "Answer an inline query, for bots only",
      "params": {
        "cache_time": "The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.",
        "flags": "Flags, see TL conditional fields",
        "gallery": "Set this flag if the results are composed of media files",
        "next_offset": "Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don't support pagination. Offset length can't exceed 64 bytes.",
        "private": "Set this flag if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query",
        "query_id": "Unique identifier for the answered query",
        "results": "Vector of results for the inline query",
        "switch_pm": "If passed, clients will display a button on top of the remaining inline result list with the specified text, that switches the user to a private chat with the bot and sends the bot a start message with a certain parameter.",
        "switch_webview": "If passed, clients will display a button on top of the remaining inline result list with the specified text, that switches the user to the specified inline mode mini app."
      }
    },
    "messages.SetInlineGameScore": {
      "desc": "Use this method to set the score of the specified user in a game sent as an inline message (bots only).",
      "params": {
        "edit_message": "Set this flag if the game message should be automatically edited to include the current scoreboard",
        "flags": "Flags, see TL conditional fields",
        "force": "Set this flag if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters",
        "id": "ID of the inline message",
        "score": "New score",
        "user_id": "User identifier"
      }
    },
    "messages.SetTyping": {
      "desc": "Sends a current user typing event (see SendMessageAction for all event types) to a conversation partner or group.",
      "params": {
        "action": "Type of action",
        "flags": "Flags, see TL conditional fields",
        "peer": "Target user or group",
        "top_msg_id": "Topic ID"
      }
    },
    "messages.StartBot": {
      "desc": "Start a conversation with a bot using a deep linking parameter",
      "params": {
        "bot": "The bot",
        "peer": "The chat where to start the bot, can be the bot's private chat or a group",
        "random_id": "Random ID to avoid resending the same message",
        "start_param": "Deep linking parameter"
      }
    },
    "messages.StartHistoryImport": {
      "desc": "Complete the history import process, importing all messages into the chat.\nTo be called only after initializing the import with messages.initHistoryImport and uploading all files using messages.uploadImportedMedia.",
      "params": {
        "import_id": "Identifier of a history import session, returned by messages.initHistoryImport.",
        "peer": "The Telegram chat where the messages should be imported, click here for more info \u00bb"
      }
    },
    "messages.ToggleBotInAttachMenu": {
      "desc": "Enable or disable web bot attachment menu \u00bb",
      "params": {
        "bot": "Bot ID",
        "enabled": "Toggle",
        "flags": "Flags, see TL conditional fields",
        "write_allowed": "Whether the user authorizes the bot to write messages to them, if requested by attachMenuBot.request_write_access"
      }
    },
    "messages.ToggleDialogFilterTags": {
      "desc": "{schema}",
      "params": {
        "enabled": ""
      }
    },
    "messages.ToggleDialogPin": {
      "desc": "Pin/unpin a dialog",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "peer": "The dialog to pin",
        "pinned": "Whether to pin or unpin the dialog"
      }
    },
    "messages.ToggleNoForwards": {
      "desc": "Enable or disable content protection on a channel or chat",
      "params": {
        "enabled": "Enable or disable content protection",
        "peer": "The chat or channel"
      }
    },
    "messages.TogglePeerTranslations": {
      "desc": "Show or hide the real-time chat translation popup for a certain chat",
      "params": {
        "disabled": "Whether to disable or enable the real-time chat translation popup",
        "flags": "Flags, see TL conditional fields",
        "peer": "The peer"
      }
    },
    "messages.ToggleSavedDialogPin": {
      "desc": "Pin or unpin a saved message dialog \u00bb.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "peer": "The dialog to pin",
        "pinned": "Whether to pin or unpin the dialog"
      }
    },
    "messages.ToggleStickerSets": {
      "desc": "Apply changes to multiple stickersets",
      "params": {
        "archive": "Archive the specified stickersets",
        "flags": "Flags, see TL conditional fields",
        "stickersets": "Stickersets to act upon",
        "unarchive": "Unarchive the specified stickersets",
        "uninstall": "Uninstall the specified stickersets"
      }
    },
    "messages.TranscribeAudio": {
      "desc": "Transcribe voice message",
      "params": {
        "msg_id": "Voice message ID",
        "peer": "Peer ID where the voice message was sent"
      }
    },
    "messages.TranslateText": {
      "desc": "Translate a given text.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "id": "A list of message IDs to translate",
        "peer": "If the text is a chat message, the peer ID",
        "text": "A list of styled messages to translate",
        "to_lang": "Two-letter ISO 639-1 language code of the language to which the message is translated"
      }
    },
    "messages.UninstallStickerSet": {
      "desc": "Uninstall a stickerset",
      "params": {
        "stickerset": "The stickerset to uninstall"
      }
    },
    "messages.UnpinAllMessages": {
      "desc": "Unpin all pinned messages",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "peer": "Chat where to unpin",
        "top_msg_id": "Forum topic where to unpin"
      }
    },
    "messages.UpdateDialogFilter": {
      "desc": "Update folder",
      "params": {
        "filter": "Folder info",
        "flags": "Flags, see TL conditional fields",
        "id": "Folder ID"
      }
    },
    "messages.UpdateDialogFiltersOrder": {
      "desc": "Reorder folders",
      "params": {
        "order": "New folder order"
      }
    },
    "messages.UpdatePinnedMessage": {
      "desc": "Pin a message",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "id": "The message to pin or unpin",
        "peer": "The peer where to pin the message",
        "pm_oneside": "Whether the message should only be pinned on the local side of a one-to-one chat",
        "silent": "Pin the message silently, without triggering a notification",
        "unpin": "Whether the message should unpinned or pinned"
      }
    },
    "messages.UpdateSavedReactionTag": {
      "desc": "Update the description of a saved message tag \u00bb.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "reaction": "Reaction associated to the tag",
        "title": "Tag description, max 12 UTF-8 characters; to remove the description call the method without setting this flag."
      }
    },
    "messages.UploadEncryptedFile": {
      "desc": "Upload encrypted file and associate it to a secret chat",
      "params": {
        "file": "The file",
        "peer": "The secret chat to associate the file to"
      }
    },
    "messages.UploadImportedMedia": {
      "desc": "Upload a media file associated with an imported chat, click here for more info \u00bb.",
      "params": {
        "file_name": "File name",
        "import_id": "Identifier of a history import session, returned by messages.initHistoryImport",
        "media": "Media metadata",
        "peer": "The Telegram chat where the media will be imported"
      }
    },
    "messages.UploadMedia": {
      "desc": "Upload a file and associate it to a chat (without actually sending it to the chat)",
      "params": {
        "business_connection_id": "",
        "flags": "Flags, see TL conditional fields",
        "media": "File uploaded in chunks as described in files \u00bb",
        "peer": "The chat, can be inputPeerEmpty for bots and inputPeerSelf for users."
      }
    },
    "payments.ApplyGiftCode": {
      "desc": "Apply a Telegram Premium giftcode \u00bb",
      "params": {
        "slug": "The code to apply"
      }
    },
    "payments.AssignAppStoreTransaction": {
      "desc": "Informs server about a purchase made through the App Store: for official applications only.",
      "params": {
        "purpose": "Payment purpose",
        "receipt": "Receipt"
      }
    },
    "payments.AssignPlayMarketTransaction": {
      "desc": "Informs server about a purchase made through the Play Store: for official applications only.",
      "params": {
        "purpose": "Payment purpose",
        "receipt": "Receipt"
      }
    },
    "payments.CanPurchasePremium": {
      "desc": "Checks whether Telegram Premium purchase is possible. Must be called before in-store Premium purchase, official apps only.",
      "params": {
        "purpose": "Payment purpose"
      }
    },
    "payments.CheckGiftCode": {
      "desc": "Obtain information about a Telegram Premium giftcode \u00bb",
      "params": {
        "slug": "The giftcode to check"
      }
    },
    "payments.ClearSavedInfo": {
      "desc": "Clear saved payment information",
      "params": {
        "credentials": "Remove saved payment credentials",
        "flags": "Flags, see TL conditional fields",
        "info": "Clear the last order settings saved by the user"
      }
    },
    "payments.ExportInvoice": {
      "desc": "Generate an invoice deep link",
      "params": {
        "invoice_media": "Invoice"
      }
    },
    "payments.GetBankCardData": {
      "desc": "Get info about a credit card",
      "params": {
        "number": "Credit card number"
      }
    },
    "payments.GetGiveawayInfo": {
      "desc": "Obtain information about a Telegram Premium giveaway \u00bb.",
      "params": {
        "msg_id": "Message ID of the messageActionGiveawayLaunch service message",
        "peer": "The peer where the giveaway was posted."
      }
    },
    "payments.GetPaymentForm": {
      "desc": "Get a payment form",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "invoice": "Invoice",
        "theme_params": "A JSON object with the following keys, containing color theme information (integers, RGB24) to pass to the payment provider, to apply in eventual verification pages: bg_color - Background color text_color - Text color hint_color - Hint text color link_color - Link color button_color - Button color button_text_color - Button text color"
      }
    },
    "payments.GetPaymentReceipt": {
      "desc": "Get payment receipt",
      "params": {
        "msg_id": "Message ID of receipt",
        "peer": "The peer where the payment receipt was sent"
      }
    },
    "payments.GetPremiumGiftCodeOptions": {
      "desc": "Obtain a list of Telegram Premium giveaway/gift code \u00bb options.",
      "params": {
        "boost_peer": "The channel that will start the giveaway",
        "flags": "Flags, see TL conditional fields"
      }
    },
    "payments.GetSavedInfo": {
      "desc": "Get saved payment information",
      "params": {}
    },
    "payments.GetStarsStatus": {
      "desc": "{schema}",
      "params": {
        "peer": ""
      }
    },
    "payments.GetStarsTopupOptions": {
      "desc": "{schema}",
      "params": {}
    },
    "payments.GetStarsTransactions": {
      "desc": "{schema}",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "inbound": "",
        "offset": "",
        "outbound": "",
        "peer": ""
      }
    },
    "payments.LaunchPrepaidGiveaway": {
      "desc": "Launch a prepaid giveaway \u00bb.",
      "params": {
        "giveaway_id": "The prepaid giveaway ID.",
        "peer": "The peer where to launch the giveaway.",
        "purpose": "Giveway parameters"
      }
    },
    "payments.RefundStarsCharge": {
      "desc": "{schema}",
      "params": {
        "charge_id": "",
        "user_id": ""
      }
    },
    "payments.SendPaymentForm": {
      "desc": "Send compiled payment form",
      "params": {
        "credentials": "Payment credentials",
        "flags": "Flags, see TL conditional fields",
        "form_id": "Form ID",
        "invoice": "Invoice",
        "requested_info_id": "ID of saved and validated order info",
        "shipping_option_id": "Chosen shipping option ID",
        "tip_amount": "Tip, in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)."
      }
    },
    "payments.SendStarsForm": {
      "desc": "{schema}",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "form_id": "",
        "invoice": ""
      }
    },
    "payments.ValidateRequestedInfo": {
      "desc": "Submit requested order information for validation",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "info": "Requested order information",
        "invoice": "Invoice",
        "save": "Save order information to re-use it for future orders"
      }
    },
    "phone.AcceptCall": {
      "desc": "Accept incoming call",
      "params": {
        "g_b": "Parameter for E2E encryption key exchange \u00bb",
        "peer": "The call to accept",
        "protocol": "Phone call settings"
      }
    },
    "phone.CheckGroupCall": {
      "desc": "Check whether the group call Server Forwarding Unit is currently receiving the streams with the specified WebRTC source IDs.\nReturns an intersection of the source IDs specified in sources, and the source IDs currently being forwarded by the SFU.",
      "params": {
        "call": "Group call",
        "sources": "Source IDs"
      }
    },
    "phone.ConfirmCall": {
      "desc": "Complete phone call E2E encryption key exchange \u00bb",
      "params": {
        "g_a": "Parameter for E2E encryption key exchange \u00bb",
        "key_fingerprint": "Key fingerprint",
        "peer": "The phone call",
        "protocol": "Phone call settings"
      }
    },
    "phone.CreateGroupCall": {
      "desc": "Create a group call or livestream",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "peer": "Associate the group call or livestream to the provided group/supergroup/channel",
        "random_id": "Unique client message ID required to prevent creation of duplicate group calls",
        "rtmp_stream": "Whether RTMP stream support should be enabled: only the group/supergroup/channel owner can use this flag.",
        "schedule_date": "For scheduled group call or livestreams, the absolute date when the group call will start",
        "title": "Call title"
      }
    },
    "phone.DiscardCall": {
      "desc": "Refuse or end running call",
      "params": {
        "connection_id": "Preferred libtgvoip relay ID",
        "duration": "Call duration",
        "flags": "Flags, see TL conditional fields",
        "peer": "The phone call",
        "reason": "Why was the call discarded",
        "video": "Whether this is a video call"
      }
    },
    "phone.DiscardGroupCall": {
      "desc": "Terminate a group call",
      "params": {
        "call": "The group call to terminate"
      }
    },
    "phone.EditGroupCallParticipant": {
      "desc": "Edit information about a given group call participant",
      "params": {
        "call": "The group call",
        "flags": "Flags, see TL conditional fields",
        "muted": "Whether to mute or unmute the specified participant",
        "participant": "The group call participant (can also be the user itself)",
        "presentation_paused": "Pause or resume the screen sharing stream",
        "raise_hand": "Raise or lower hand",
        "video_paused": "Pause or resume the video stream",
        "video_stopped": "Start or stop the video stream",
        "volume": "New volume"
      }
    },
    "phone.EditGroupCallTitle": {
      "desc": "Edit the title of a group call or livestream",
      "params": {
        "call": "Group call",
        "title": "New title"
      }
    },
    "phone.ExportGroupCallInvite": {
      "desc": "Get an invite link for a group call or livestream",
      "params": {
        "call": "The group call",
        "can_self_unmute": "For livestreams or muted group chats, if set, users that join using this link will be able to speak without explicitly requesting permission by (for example by raising their hand).",
        "flags": "Flags, see TL conditional fields"
      }
    },
    "phone.GetCallConfig": {
      "desc": "Get phone call configuration to be passed to libtgvoip's shared config",
      "params": {}
    },
    "phone.GetGroupCall": {
      "desc": "Get info about a group call",
      "params": {
        "call": "The group call",
        "limit": "Maximum number of results to return, see pagination"
      }
    },
    "phone.GetGroupCallJoinAs": {
      "desc": "Get a list of peers that can be used to join a group call, presenting yourself as a specific user/channel.",
      "params": {
        "peer": "The dialog whose group call or livestream we're trying to join"
      }
    },
    "phone.GetGroupCallStreamChannels": {
      "desc": "Get info about RTMP streams in a group call or livestream.\nThis method should be invoked to the same group/channel-related DC used for downloading livestream chunks.\nAs usual, the media DC is preferred, if available.",
      "params": {
        "call": "Group call or livestream"
      }
    },
    "phone.GetGroupCallStreamRtmpUrl": {
      "desc": "Get RTMP URL and stream key for RTMP livestreams. Can be used even before creating the actual RTMP livestream with phone.createGroupCall (the rtmp_stream flag must be set).",
      "params": {
        "peer": "Peer to livestream into",
        "revoke": "Whether to revoke the previous stream key or simply return the existing one"
      }
    },
    "phone.GetGroupParticipants": {
      "desc": "Get group call participants",
      "params": {
        "call": "Group call",
        "ids": "If specified, will fetch group participant info about the specified peers",
        "limit": "Maximum number of results to return, see pagination",
        "offset": "Offset for results, taken from the next_offset field of phone.groupParticipants, initially an empty string. Note: if no more results are available, the method call will return an empty next_offset; thus, avoid providing the next_offset returned in phone.groupParticipants if it is empty, to avoid an infinite loop.",
        "sources": "If specified, will fetch group participant info about the specified WebRTC source IDs"
      }
    },
    "phone.InviteToGroupCall": {
      "desc": "Invite a set of users to a group call.",
      "params": {
        "call": "The group call",
        "users": "The users to invite."
      }
    },
    "phone.JoinGroupCall": {
      "desc": "Join a group call",
      "params": {
        "call": "The group call",
        "flags": "Flags, see TL conditional fields",
        "invite_hash": "The invitation hash from the invite link \u00bb, if provided allows speaking in a livestream or muted group chat.",
        "join_as": "Join the group call, presenting yourself as the specified user/channel",
        "muted": "If set, the user will be muted by default upon joining.",
        "params": "WebRTC parameters",
        "video_stopped": "If set, the user's video will be disabled by default upon joining."
      }
    },
    "phone.JoinGroupCallPresentation": {
      "desc": "Start screen sharing in a call",
      "params": {
        "call": "The group call",
        "params": "WebRTC parameters"
      }
    },
    "phone.LeaveGroupCall": {
      "desc": "Leave a group call",
      "params": {
        "call": "The group call",
        "source": "Your source ID"
      }
    },
    "phone.LeaveGroupCallPresentation": {
      "desc": "Stop screen sharing in a group call",
      "params": {
        "call": "The group call"
      }
    },
    "phone.ReceivedCall": {
      "desc": "Optional: notify the server that the user is currently busy in a call: this will automatically refuse all incoming phone calls until the current phone call is ended.",
      "params": {
        "peer": "The phone call we're currently in"
      }
    },
    "phone.RequestCall": {
      "desc": "Start a telegram phone call",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "g_a_hash": "Parameter for E2E encryption key exchange \u00bb",
        "protocol": "Phone call settings",
        "random_id": "Random ID to avoid resending the same object",
        "user_id": "Destination of the phone call",
        "video": "Whether to start a video call"
      }
    },
    "phone.SaveCallDebug": {
      "desc": "Send phone call debug data to server",
      "params": {
        "debug": "Debug statistics obtained from libtgvoip",
        "peer": "Phone call"
      }
    },
    "phone.SaveCallLog": {
      "desc": "Save phone call debug information",
      "params": {
        "file": "Logs",
        "peer": "Phone call"
      }
    },
    "phone.SaveDefaultGroupCallJoinAs": {
      "desc": "Set the default peer that will be used to join a group call in a specific dialog.",
      "params": {
        "join_as": "The default peer that will be used to join group calls in this dialog, presenting yourself as a specific user/channel.",
        "peer": "The dialog"
      }
    },
    "phone.SendSignalingData": {
      "desc": "Send VoIP signaling data",
      "params": {
        "data": "Signaling payload",
        "peer": "Phone call"
      }
    },
    "phone.SetCallRating": {
      "desc": "Rate a call, returns info about the rating message sent to the official VoIP bot.",
      "params": {
        "comment": "An additional comment",
        "flags": "Flags, see TL conditional fields",
        "peer": "The call to rate",
        "rating": "Rating in 1-5 stars",
        "user_initiative": "Whether the user decided on their own initiative to rate the call"
      }
    },
    "phone.StartScheduledGroupCall": {
      "desc": "Start a scheduled group call.",
      "params": {
        "call": "The scheduled group call"
      }
    },
    "phone.ToggleGroupCallRecord": {
      "desc": "Start or stop recording a group call: the recorded audio and video streams will be automatically sent to Saved messages (the chat with ourselves).",
      "params": {
        "call": "The group call or livestream",
        "flags": "Flags, see TL conditional fields",
        "start": "Whether to start or stop recording",
        "title": "Recording title",
        "video": "Whether to also record video streams",
        "video_portrait": "If video stream recording is enabled, whether to record in portrait or landscape mode"
      }
    },
    "phone.ToggleGroupCallSettings": {
      "desc": "Change group call settings",
      "params": {
        "call": "Group call",
        "flags": "Flags, see TL conditional fields",
        "join_muted": "Whether all users will that join this group call are muted by default upon joining the group call",
        "reset_invite_hash": "Invalidate existing invite links"
      }
    },
    "phone.ToggleGroupCallStartSubscription": {
      "desc": "Subscribe or unsubscribe to a scheduled group call",
      "params": {
        "call": "Scheduled group call",
        "subscribed": "Enable or disable subscription"
      }
    },
    "photos.DeletePhotos": {
      "desc": "Deletes profile photos. The method returns a list of successfully deleted photo IDs.",
      "params": {
        "id": "Input photos to delete"
      }
    },
    "photos.GetUserPhotos": {
      "desc": "Returns the list of user photos.",
      "params": {
        "limit": "Number of list elements to be returned",
        "max_id": "If a positive value was transferred, the method will return only photos with IDs less than the set one. This parameter is often useful when refetching file references \u00bb, as in conjuction with limit=1 and offset=-1 the photo object with the id specified in max_id can be fetched.",
        "offset": "Number of list elements to be skipped",
        "user_id": "User ID"
      }
    },
    "photos.UpdateProfilePhoto": {
      "desc": "Installs a previously uploaded photo as a profile photo.",
      "params": {
        "bot": "Can contain info of a bot we own, to change the profile photo of that bot, instead of the current user.",
        "fallback": "If set, the chosen profile photo will be shown to users that can't display your main profile photo due to your privacy settings.",
        "flags": "Flags, see TL conditional fields",
        "id": "Input photo"
      }
    },
    "photos.UploadContactProfilePhoto": {
      "desc": "Upload a custom profile picture for a contact, or suggest a new profile picture to a contact.",
      "params": {
        "file": "Profile photo",
        "flags": "Flags, see TL conditional fields",
        "save": "If set, removes a previously set personal profile picture (does not affect suggested profile pictures, to remove them simply deleted the messageActionSuggestProfilePhoto service message with messages.deleteMessages).",
        "suggest": "If set, will send a messageActionSuggestProfilePhoto service message to user_id, suggesting them to use the specified profile picture; otherwise, will set a personal profile picture for the user (only visible to the current user).",
        "user_id": "The contact",
        "video": "Animated profile picture video",
        "video_emoji_markup": "Animated sticker profile picture, must contain either a videoSizeEmojiMarkup or a videoSizeStickerMarkup constructor.",
        "video_start_ts": "Floating point UNIX timestamp in seconds, indicating the frame of the video/sticker that should be used as static preview; can only be used if video or video_emoji_markup is set."
      }
    },
    "photos.UploadProfilePhoto": {
      "desc": "Updates current user profile photo.",
      "params": {
        "bot": "Can contain info of a bot we own, to change the profile photo of that bot, instead of the current user.",
        "fallback": "If set, the chosen profile photo will be shown to users that can't display your main profile photo due to your privacy settings.",
        "file": "Profile photo",
        "flags": "Flags, see TL conditional fields",
        "video": "Animated profile picture video",
        "video_emoji_markup": "Animated sticker profile picture, must contain either a videoSizeEmojiMarkup or a videoSizeStickerMarkup constructor.",
        "video_start_ts": "Floating point UNIX timestamp in seconds, indicating the frame of the video/sticker that should be used as static preview; can only be used if video or video_emoji_markup is set."
      }
    },
    "premium.ApplyBoost": {
      "desc": "Apply one or more boosts \u00bb to a peer.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "peer": "The peer to boost.",
        "slots": "Which boost slots to assign to this peer."
      }
    },
    "premium.GetBoostsList": {
      "desc": "Obtains info about the boosts that were applied to a certain channel (admins only)",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "gifts": "Whether to return only info about boosts received from gift codes and giveaways created by the channel \u00bb",
        "limit": "Maximum number of results to return, see pagination",
        "offset": "Offset for pagination, obtained from premium.boostsList.next_offset",
        "peer": "The channel"
      }
    },
    "premium.GetBoostsStatus": {
      "desc": "Gets the current number of boosts of a channel.",
      "params": {
        "peer": "The peer."
      }
    },
    "premium.GetMyBoosts": {
      "desc": "Obtain which peers are we currently boosting, and how many boost slots we have left.",
      "params": {}
    },
    "premium.GetUserBoosts": {
      "desc": "Returns the lists of boost that were applied to a channel by a specific user (admins only)",
      "params": {
        "peer": "The channel",
        "user_id": "The user"
      }
    },
    "smsjobs.FinishJob": {
      "desc": "{schema}",
      "params": {
        "error": "",
        "flags": "Flags, see TL conditional fields",
        "job_id": ""
      }
    },
    "smsjobs.GetSmsJob": {
      "desc": "{schema}",
      "params": {
        "job_id": ""
      }
    },
    "smsjobs.GetStatus": {
      "desc": "{schema}",
      "params": {}
    },
    "smsjobs.IsEligibleToJoin": {
      "desc": "{schema}",
      "params": {}
    },
    "smsjobs.Join": {
      "desc": "{schema}",
      "params": {}
    },
    "smsjobs.Leave": {
      "desc": "{schema}",
      "params": {}
    },
    "smsjobs.UpdateSettings": {
      "desc": "{schema}",
      "params": {
        "allow_international": "",
        "flags": "Flags, see TL conditional fields"
      }
    },
    "stats.GetBroadcastRevenueStats": {
      "desc": "{schema}",
      "params": {
        "channel": "",
        "dark": "",
        "flags": "Flags, see TL conditional fields"
      }
    },
    "stats.GetBroadcastRevenueTransactions": {
      "desc": "{schema}",
      "params": {
        "channel": "",
        "limit": "Maximum number of results to return, see pagination",
        "offset": ""
      }
    },
    "stats.GetBroadcastRevenueWithdrawalUrl": {
      "desc": "{schema}",
      "params": {
        "channel": "",
        "password": ""
      }
    },
    "stats.GetBroadcastStats": {
      "desc": "Get channel statistics",
      "params": {
        "channel": "The channel",
        "dark": "Whether to enable dark theme for graph colors",
        "flags": "Flags, see TL conditional fields"
      }
    },
    "stats.GetMegagroupStats": {
      "desc": "Get supergroup statistics",
      "params": {
        "channel": "Supergroup ID",
        "dark": "Whether to enable dark theme for graph colors",
        "flags": "Flags, see TL conditional fields"
      }
    },
    "stats.GetMessagePublicForwards": {
      "desc": "Obtains a list of messages, indicating to which other public channels was a channel message forwarded.\nWill return a list of messages with peer_id equal to the public channel to which this message was forwarded.",
      "params": {
        "channel": "Source channel",
        "limit": "Maximum number of results to return, see pagination",
        "msg_id": "Source message ID",
        "offset": "Offset for pagination, empty string on first call, then use the next_offset field of the returned constructor (if present, otherwise no more results are available)."
      }
    },
    "stats.GetMessageStats": {
      "desc": "Get message statistics",
      "params": {
        "channel": "Channel ID",
        "dark": "Whether to enable dark theme for graph colors",
        "flags": "Flags, see TL conditional fields",
        "msg_id": "Message ID"
      }
    },
    "stats.GetStoryPublicForwards": {
      "desc": "Obtain forwards of a story as a message to public chats and reposts by public channels.",
      "params": {
        "id": "Story ID",
        "limit": "Maximum number of results to return, see pagination",
        "offset": "Offset for pagination, from stats.PublicForwards.next_offset.",
        "peer": "Peer where the story was originally posted"
      }
    },
    "stats.GetStoryStats": {
      "desc": "Get statistics for a certain story.",
      "params": {
        "dark": "Whether to enable the dark theme for graph colors",
        "flags": "Flags, see TL conditional fields",
        "id": "Story ID",
        "peer": "The peer that posted the story"
      }
    },
    "stats.LoadAsyncGraph": {
      "desc": "Load channel statistics graph asynchronously",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "token": "Graph token from statsGraphAsync constructor",
        "x": "Zoom value, if required"
      }
    },
    "stickers.AddStickerToSet": {
      "desc": "Add a sticker to a stickerset, bots only. The sticker set must have been created by the bot.",
      "params": {
        "sticker": "The sticker",
        "stickerset": "The stickerset"
      }
    },
    "stickers.ChangeSticker": {
      "desc": "Update the keywords, emojis or mask coordinates of a sticker, bots only.",
      "params": {
        "emoji": "If set, updates the emoji list associated to the sticker",
        "flags": "Flags, see TL conditional fields",
        "keywords": "If set, updates the sticker keywords (separated by commas). Can't be provided for mask stickers.",
        "mask_coords": "If set, updates the mask coordinates",
        "sticker": "The sticker"
      }
    },
    "stickers.ChangeStickerPosition": {
      "desc": "Changes the absolute position of a sticker in the set to which it belongs; for bots only. The sticker set must have been created by the bot",
      "params": {
        "position": "The new position of the sticker, zero-based",
        "sticker": "The sticker"
      }
    },
    "stickers.CheckShortName": {
      "desc": "Check whether the given short name is available",
      "params": {
        "short_name": "Short name"
      }
    },
    "stickers.CreateStickerSet": {
      "desc": "Create a stickerset, bots only.",
      "params": {
        "emojis": "Whether this is a custom emoji stickerset.",
        "flags": "Flags, see TL conditional fields",
        "masks": "Whether this is a mask stickerset",
        "short_name": "Short name of sticker set, to be used in sticker deep links \u00bb. Can contain only english letters, digits and underscores. Must begin with a letter, can't contain consecutive underscores and, if called by a bot, must end in \"_by_<bot_username>\". <bot_username> is case insensitive. 1-64 characters.",
        "software": "Used when importing stickers using the sticker import SDKs, specifies the name of the software that created the stickers",
        "stickers": "Stickers",
        "text_color": "Whether the color of TGS custom emojis contained in this set should be changed to the text color when used in messages, the accent color if used as emoji status, white on chat photos, or another appropriate color based on context. For custom emoji stickersets only.",
        "thumb": "Thumbnail",
        "title": "Stickerset name, 1-64 chars",
        "user_id": "Stickerset owner"
      }
    },
    "stickers.DeleteStickerSet": {
      "desc": "Deletes a stickerset we created, bots only.",
      "params": {
        "stickerset": "Stickerset to delete"
      }
    },
    "stickers.RemoveStickerFromSet": {
      "desc": "Remove a sticker from the set where it belongs, bots only. The sticker set must have been created by the bot.",
      "params": {
        "sticker": "The sticker to remove"
      }
    },
    "stickers.RenameStickerSet": {
      "desc": "Renames a stickerset, bots only.",
      "params": {
        "stickerset": "Stickerset to rename",
        "title": "New stickerset title"
      }
    },
    "stickers.ReplaceSticker": {
      "desc": "{schema}",
      "params": {
        "new_sticker": "",
        "sticker": ""
      }
    },
    "stickers.SetStickerSetThumb": {
      "desc": "Set stickerset thumbnail",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "stickerset": "Stickerset",
        "thumb": "Thumbnail (only for normal stickersets, not custom emoji stickersets).",
        "thumb_document_id": "Only for custom emoji stickersets, ID of a custom emoji present in the set to use as thumbnail; pass 0 to fallback to the first custom emoji of the set."
      }
    },
    "stickers.SuggestShortName": {
      "desc": "Suggests a short name for a given stickerpack name",
      "params": {
        "title": "Sticker pack name"
      }
    },
    "stories.ActivateStealthMode": {
      "desc": "Activates stories stealth mode, see here \u00bb for more info.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "future": "Whether to hide future story views for the next stories_stealth_future_period seconds \u00bb, as specified by the client configuration.",
        "past": "Whether to erase views from any stories opened in the past stories_stealth_past_period seconds \u00bb, as specified by the client configuration."
      }
    },
    "stories.CanSendStory": {
      "desc": "Check whether we can post stories as the specified peer.",
      "params": {
        "peer": "The peer from which we wish to post stories."
      }
    },
    "stories.DeleteStories": {
      "desc": "Deletes some posted stories.",
      "params": {
        "id": "IDs of stories to delete.",
        "peer": "Channel/user from where to delete stories."
      }
    },
    "stories.EditStory": {
      "desc": "Edit an uploaded story",
      "params": {
        "caption": "If specified, replaces the story caption.",
        "entities": "Message entities for styled text in the caption, if allowed by the stories_entities client configuration parameter \u00bb.",
        "flags": "Flags, see TL conditional fields",
        "id": "ID of story to edit.",
        "media": "If specified, replaces the story media.",
        "media_areas": "Media areas associated to the story, see here \u00bb for more info.",
        "peer": "Peer where the story was posted.",
        "privacy_rules": "If specified, alters the privacy settings \u00bb of the story, changing who can or can't view the story."
      }
    },
    "stories.ExportStoryLink": {
      "desc": "Generate a story deep link for a specific story",
      "params": {
        "id": "Story ID",
        "peer": "Peer where the story was posted"
      }
    },
    "stories.GetAllReadPeerStories": {
      "desc": "Obtain the latest read story ID for all peers when first logging in, returned as a list of updateReadStories updates, see here \u00bb for more info.",
      "params": {}
    },
    "stories.GetAllStories": {
      "desc": "Fetch the List of active (or active and hidden) stories, see here \u00bb for more info on watching stories.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "hidden": "If set, fetches the hidden active story list, otherwise fetches the active story list, see here \u00bb for more info on the full flow.",
        "next": "If next and state are both set, uses the passed state to paginate to the next results; if neither state nor next are set, fetches the initial page; if state is set and next is not set, check for changes in the active/hidden peerset, see here \u00bb for more info on the full flow.",
        "state": "If next and state are both set, uses the passed state to paginate to the next results; if neither state nor next are set, fetches the initial page; if state is set and next is not set, check for changes in the active/hidden peerset, see here \u00bb for more info on the full flow."
      }
    },
    "stories.GetChatsToSend": {
      "desc": "Obtain a list of channels where the user can post stories",
      "params": {}
    },
    "stories.GetPeerMaxIDs": {
      "desc": "Get the IDs of the maximum read stories for a set of peers.",
      "params": {
        "id": "Peers"
      }
    },
    "stories.GetPeerStories": {
      "desc": "Fetch the full active story list of a specific peer.",
      "params": {
        "peer": "Peer whose stories should be fetched"
      }
    },
    "stories.GetPinnedStories": {
      "desc": "Fetch the stories pinned on a peer's profile.",
      "params": {
        "limit": "Maximum number of results to return, see pagination",
        "offset_id": "Offsets for pagination, for more info click here",
        "peer": "Peer whose pinned stories should be fetched"
      }
    },
    "stories.GetStoriesArchive": {
      "desc": "Fetch the story archive \u00bb of a peer we control.",
      "params": {
        "limit": "Maximum number of results to return, see pagination",
        "offset_id": "Offsets for pagination, for more info click here",
        "peer": "Peer whose archived stories should be fetched"
      }
    },
    "stories.GetStoriesByID": {
      "desc": "Obtain full info about a set of stories by their IDs.",
      "params": {
        "id": "Story IDs",
        "peer": "Peer where the stories were posted"
      }
    },
    "stories.GetStoriesViews": {
      "desc": "Obtain info about the view count, forward count, reactions and recent viewers of one or more stories.",
      "params": {
        "id": "Story IDs",
        "peer": "Peer whose stories should be fetched"
      }
    },
    "stories.GetStoryReactionsList": {
      "desc": "Get the reaction and interaction list of a story posted to a channel, along with the sender of each reaction.",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "forwards_first": "If set, returns forwards and reposts first, then reactions, then other views; otherwise returns interactions sorted just by interaction date.",
        "id": "Story ID",
        "limit": "Maximum number of results to return, see pagination",
        "offset": "Offset for pagination (taken from the next_offset field of the returned stories.StoryReactionsList); empty in the first request.",
        "peer": "Channel",
        "reaction": "Get only reactions of this type"
      }
    },
    "stories.GetStoryViewsList": {
      "desc": "Obtain the list of users that have viewed a specific story we posted",
      "params": {
        "flags": "Flags, see TL conditional fields",
        "forwards_first": "If set, returns forwards and reposts first, then reactions, then other views; otherwise returns interactions sorted just by interaction date.",
        "id": "Story ID",
        "just_contacts": "Whether to only fetch view reaction/views made by our contacts",
        "limit": "Maximum number of results to return, see pagination",
        "offset": "Offset for pagination, obtained from stories.storyViewsList.next_offset",
        "peer": "Peer where the story was posted",
        "q": "Search for specific peers",
        "reactions_first": "Whether to return storyView info about users that reacted to the story (i.e. if set, the server will first sort results by view date as usual, and then also additionally sort the list by putting storyViews with an associated reaction first in the list). Ignored if forwards_first is set."
      }
    },
    "stories.IncrementStoryViews": {
      "desc": "Increment the view counter of one or more stories.",
      "params": {
        "id": "IDs of the stories (maximum 200 at a time).",
        "peer": "Peer where the stories were posted."
      }
    },
    "stories.ReadStories": {
      "desc": "Mark all stories up to a certain ID as read, for a given peer; will emit an updateReadStories update to all logged-in sessions.",
      "params": {
        "max_id": "Mark all stories up to and including this ID as read",
        "peer": "The peer whose stories should be marked as read."
      }
    },
    "stories.Report": {
      "desc": "Report a story.",
      "params": {
        "id": "IDs of the stories to report.",
        "message": "Comment for report moderation",
        "peer": "The peer that uploaded the story.",
        "reason": "Why are these storeis being reported."
      }
    },
    "stories.SendReaction": {
      "desc": "React to a story.",
      "params": {
        "add_to_recent": "Whether to add this reaction to the recent reactions list \u00bb.",
        "flags": "Flags, see TL conditional fields",
        "peer": "The peer that sent the story",
        "reaction": "Reaction",
        "story_id": "ID of the story to react to"
      }
    },
    "stories.SendStory": {
      "desc": "Uploads a Telegram Story.",
      "params": {
        "caption": "Story caption.",
        "entities": "Message entities for styled text, if allowed by the stories_entities client configuration parameter \u00bb.",
        "flags": "Flags, see TL conditional fields",
        "fwd_from_id": "If set, indicates that this story is a repost of story with ID fwd_from_story posted by the peer in fwd_from_id.",
        "fwd_from_story": "If set, indicates that this story is a repost of story with ID fwd_from_story posted by the peer in fwd_from_id.",
        "fwd_modified": "Set this flag when reposting stories with fwd_from_id+fwd_from_id, if the media was modified before reposting.",
        "media": "The story media.",
        "media_areas": "Media areas associated to the story, see here \u00bb for more info.",
        "noforwards": "If set, disables forwards, screenshots, and downloads.",
        "peer": "The peer to send the story as.",
        "period": "Period after which the story is moved to archive (and to the profile if pinned is set), in seconds; must be one of 6 * 3600, 12 * 3600, 86400, or 2 * 86400 for Telegram Premium users, and 86400 otherwise.",
        "pinned": "Whether to add the story to the profile automatically upon expiration. If not set, the story will only be added to the archive, see here \u00bb for more info.",
        "privacy_rules": "Privacy rules for the story, indicating who can or can't view the story.",
        "random_id": "Unique client message ID required to prevent message resending."
      }
    },
    "stories.ToggleAllStoriesHidden": {
      "desc": "Hide the active stories of a specific peer, preventing them from being displayed on the action bar on the homescreen.",
      "params": {
        "hidden": "Whether to hide or unhide all active stories of the peer"
      }
    },
    "stories.TogglePeerStoriesHidden": {
      "desc": "Hide the active stories of a user, preventing them from being displayed on the action bar on the homescreen, see here \u00bb for more info.",
      "params": {
        "hidden": "Whether to hide or unhide stories.",
        "peer": "Peer whose stories should be (un)hidden."
      }
    },
    "stories.TogglePinned": {
      "desc": "Pin or unpin one or more stories",
      "params": {
        "id": "IDs of stories to pin or unpin",
        "peer": "Peer where to pin or unpin stories",
        "pinned": "Whether to pin or unpin the stories"
      }
    },
    "stories.TogglePinnedToTop": {
      "desc": "{schema}",
      "params": {
        "id": "",
        "peer": ""
      }
    },
    "updates.GetChannelDifference": {
      "desc": "Returns the difference between the current state of updates of a certain channel and transmitted.",
      "params": {
        "channel": "The channel",
        "filter": "Messsage filter",
        "flags": "Flags, see TL conditional fields",
        "force": "Set to true to skip some possibly unneeded updates and reduce server-side load",
        "limit": "How many updates to fetch, max 100000Ordinary (non-bot) users are supposed to pass 10-100",
        "pts": "Persistent timestamp (see updates)"
      }
    },
    "updates.GetDifference": {
      "desc": "Get new updates.",
      "params": {
        "date": "date, see updates.",
        "flags": "Flags, see TL conditional fields",
        "pts": "PTS, see updates.",
        "pts_limit": "PTS limit",
        "pts_total_limit": "For fast updating: if provided and pts + pts_total_limit < remote pts, updates.differenceTooLong will be returned.Simply tells the server to not return the difference if it is bigger than pts_total_limitIf the remote pts is too big (> ~4000000), this field will default to 1000000",
        "qts": "QTS, see updates.",
        "qts_limit": "QTS limit"
      }
    },
    "updates.GetState": {
      "desc": "Returns a current state of updates.",
      "params": {}
    },
    "upload.GetCdnFile": {
      "desc": "Download a CDN file.",
      "params": {
        "file_token": "File token",
        "limit": "Length of chunk to download",
        "offset": "Offset of chunk to download"
      }
    },
    "upload.GetCdnFileHashes": {
      "desc": "Get SHA256 hashes for verifying downloaded CDN files",
      "params": {
        "file_token": "File",
        "offset": "Offset from which to start getting hashes"
      }
    },
    "upload.GetFile": {
      "desc": "Returns content of a whole file or its part.",
      "params": {
        "cdn_supported": "Whether the current client supports CDN downloads",
        "flags": "Flags, see TL conditional fields",
        "limit": "Number of bytes to be returned",
        "location": "File location",
        "offset": "Number of bytes to be skipped",
        "precise": "Disable some checks on limit and offset values, useful for example to stream videos by keyframes"
      }
    },
    "upload.GetFileHashes": {
      "desc": "Get SHA256 hashes for verifying downloaded files",
      "params": {
        "location": "File",
        "offset": "Offset from which to get file hashes"
      }
    },
    "upload.GetWebFile": {
      "desc": "Returns content of a web file, by proxying the request through telegram, see the webfile docs for more info.",
      "params": {
        "limit": "Number of bytes to be returned",
        "location": "The file to download",
        "offset": "Number of bytes to be skipped"
      }
    },
    "upload.ReuploadCdnFile": {
      "desc": "Request a reupload of a certain file to a CDN DC.",
      "params": {
        "file_token": "File token",
        "request_token": "Request token"
      }
    },
    "upload.SaveBigFilePart": {
      "desc": "Saves a part of a large file (over 10 MB in size) to be later passed to one of the methods.",
      "params": {
        "bytes": "Binary data, part contents",
        "file_id": "Random file id, created by the client",
        "file_part": "Part sequence number",
        "file_total_parts": "Total number of parts"
      }
    },
    "upload.SaveFilePart": {
      "desc": "Saves a part of file for further sending to one of the methods.",
      "params": {
        "bytes": "Binary data, content of a part",
        "file_id": "Random file identifier created by the client",
        "file_part": "Numerical order of a part"
      }
    },
    "users.GetFullUser": {
      "desc": "Returns extended user info by ID.",
      "params": {
        "id": "User ID"
      }
    },
    "users.GetIsPremiumRequiredToContact": {
      "desc": "{schema}",
      "params": {
        "id": ""
      }
    },
    "users.GetUsers": {
      "desc": "Returns basic user info according to their identifiers.",
      "params": {
        "id": "List of user identifiers"
      }
    },
    "users.SetSecureValueErrors": {
      "desc": "Notify the user that the sent passport data contains some errors The user will not be able to re-submit their Passport data to you until the errors are fixed (the contents of the field for which you returned the error must change).",
      "params": {
        "errors": "Errors",
        "id": "The user"
      }
    }
  },
  "type": {
    "AccountDaysTTL": {
      "desc": "Time-to-live of current account"
    },
    "AppWebViewResult": {
      "desc": "Contains the link that must be used to open a direct link Mini App."
    },
    "AttachMenuBot": {
      "desc": "Represents a bot mini app that can be launched from the attachment menu \u00bb"
    },
    "AttachMenuBotIcon": {
      "desc": "Represents an attachment menu icon for bot mini apps \u00bb"
    },
    "AttachMenuBotIconColor": {
      "desc": "Represents an attachment menu icon color for bot mini apps \u00bb"
    },
    "AttachMenuBots": {
      "desc": "Represents a list of bot mini apps that can be launched from the attachment menu \u00bb"
    },
    "AttachMenuBotsBot": {
      "desc": "Represents a bot mini app that can be launched from the attachment menu \u00bb"
    },
    "AttachMenuPeerType": {
      "desc": "Indicates a supported peer type for a bot mini app attachment menu"
    },
    "Authorization": {
      "desc": "Represents a logged-in session"
    },
    "AutoDownloadSettings": {
      "desc": "Media autodownload settings"
    },
    "AutoSaveException": {
      "desc": "Peer-specific autosave settings"
    },
    "AutoSaveSettings": {
      "desc": "Media autosave settings"
    },
    "AvailableEffect": {
      "desc": ""
    },
    "AvailableReaction": {
      "desc": "Animations associated with a message reaction"
    },
    "BankCardOpenUrl": {
      "desc": "Credit card info URL provided by the bank"
    },
    "BaseTheme": {
      "desc": "Basic theme settings"
    },
    "Birthday": {
      "desc": ""
    },
    "Bool": {
      "desc": "Boolean type."
    },
    "Boost": {
      "desc": "Info about one or more boosts applied by a specific user."
    },
    "BotApp": {
      "desc": "Contains information about a direct link Mini App."
    },
    "BotBusinessConnection": {
      "desc": ""
    },
    "BotCommand": {
      "desc": "Describes a bot command that can be used in a chat"
    },
    "BotCommandScope": {
      "desc": "Represents a scope where the bot commands, specified using bots.setBotCommands will be valid."
    },
    "BotInfo": {
      "desc": "Info about bots (available bot commands, etc)"
    },
    "BotInlineMessage": {
      "desc": "Inline message"
    },
    "BotInlineResult": {
      "desc": "Results of an inline query"
    },
    "BotMenuButton": {
      "desc": "Indicates the action to execute when pressing the in-UI menu button for bots"
    },
    "BroadcastRevenueBalances": {
      "desc": ""
    },
    "BroadcastRevenueTransaction": {
      "desc": ""
    },
    "BusinessAwayMessage": {
      "desc": ""
    },
    "BusinessAwayMessageSchedule": {
      "desc": ""
    },
    "BusinessBotRecipients": {
      "desc": ""
    },
    "BusinessChatLink": {
      "desc": ""
    },
    "BusinessGreetingMessage": {
      "desc": ""
    },
    "BusinessIntro": {
      "desc": ""
    },
    "BusinessLocation": {
      "desc": ""
    },
    "BusinessRecipients": {
      "desc": ""
    },
    "BusinessWeeklyOpen": {
      "desc": ""
    },
    "BusinessWorkHours": {
      "desc": ""
    },
    "CdnConfig": {
      "desc": "Configuration for CDN file downloads."
    },
    "CdnPublicKey": {
      "desc": "Public key to use only during handshakes to CDN DCs."
    },
    "ChannelAdminLogEvent": {
      "desc": "An event in a channel admin log"
    },
    "ChannelAdminLogEventAction": {
      "desc": "Channel admin log event"
    },
    "ChannelAdminLogEventsFilter": {
      "desc": "Filter for fetching events in the channel admin log"
    },
    "ChannelLocation": {
      "desc": "Geographical location of supergroup (geogroups)"
    },
    "ChannelMessagesFilter": {
      "desc": "Filter for fetching only certain types of channel messages"
    },
    "ChannelParticipant": {
      "desc": "Channel participant"
    },
    "ChannelParticipantsFilter": {
      "desc": "Filter for fetching channel participants"
    },
    "Chat": {
      "desc": "Object defines a group."
    },
    "ChatAdminRights": {
      "desc": "Represents the rights of an admin in a channel/supergroup."
    },
    "ChatAdminWithInvites": {
      "desc": "Info about chat invites generated by admins."
    },
    "ChatBannedRights": {
      "desc": "Represents the rights of a normal user in a supergroup/channel/chat."
    },
    "ChatFull": {
      "desc": "Full info about a channel, supergroup, gigagroup or basic group."
    },
    "ChatInvite": {
      "desc": "Chat invite"
    },
    "ChatInviteImporter": {
      "desc": "When and which user joined the chat using a chat invite"
    },
    "ChatOnlines": {
      "desc": "Number of online users in a chat"
    },
    "ChatParticipant": {
      "desc": "Details of a group member."
    },
    "ChatParticipants": {
      "desc": "Object contains info on group members."
    },
    "ChatPhoto": {
      "desc": "Object defines a group profile photo."
    },
    "ChatReactions": {
      "desc": "Available chat reactions"
    },
    "CodeSettings": {
      "desc": "Settings for the code type to send"
    },
    "Config": {
      "desc": "Object contains info on API configuring parameters."
    },
    "ConnectedBot": {
      "desc": ""
    },
    "Contact": {
      "desc": "A contact of the current user."
    },
    "ContactBirthday": {
      "desc": ""
    },
    "ContactStatus": {
      "desc": "Contact status: online / offline."
    },
    "DataJSON": {
      "desc": "Represent a JSON-encoded object"
    },
    "DcOption": {
      "desc": "Information for connection to data center."
    },
    "DefaultHistoryTTL": {
      "desc": "Contains info about the default value of the Time-To-Live setting, applied to all new chats."
    },
    "Dialog": {
      "desc": "Chat info."
    },
    "DialogFilter": {
      "desc": "Dialog filter (folder \u00bb)"
    },
    "DialogFilterSuggested": {
      "desc": "Suggested dialog filters (folder \u00bb)"
    },
    "DialogPeer": {
      "desc": "Peer, or all peers in a folder"
    },
    "Document": {
      "desc": "A document."
    },
    "DocumentAttribute": {
      "desc": "Various possible attributes of a document (used to define if it's a sticker, a GIF, a video, a mask sticker, an image, an audio, and so on)"
    },
    "DraftMessage": {
      "desc": "Represents a message draft."
    },
    "EmailVerification": {
      "desc": "Email verification code or token"
    },
    "EmailVerifyPurpose": {
      "desc": "Email verification purpose"
    },
    "EmojiGroup": {
      "desc": "Represents an emoji category."
    },
    "EmojiKeyword": {
      "desc": "Emoji keyword"
    },
    "EmojiKeywordsDifference": {
      "desc": "New emoji keywords"
    },
    "EmojiLanguage": {
      "desc": "Emoji language"
    },
    "EmojiList": {
      "desc": "Represents a list of custom emojis."
    },
    "EmojiStatus": {
      "desc": "Emoji status"
    },
    "EmojiURL": {
      "desc": "Emoji URL"
    },
    "EncryptedChat": {
      "desc": "Object contains info on an encrypted chat."
    },
    "EncryptedFile": {
      "desc": "Seta an encrypted file."
    },
    "EncryptedMessage": {
      "desc": "Object contains encrypted message."
    },
    "ExportedChatInvite": {
      "desc": "Exported chat invite"
    },
    "ExportedChatlistInvite": {
      "desc": "An exported chat folder deep link \u00bb."
    },
    "ExportedContactToken": {
      "desc": "Describes a temporary profile link."
    },
    "ExportedMessageLink": {
      "desc": "HTTP link and embed info of channel message"
    },
    "ExportedStoryLink": {
      "desc": "Represents a story deep link"
    },
    "FactCheck": {
      "desc": ""
    },
    "FileHash": {
      "desc": "Hash of an uploaded file, to be checked for validity after download"
    },
    "Folder": {
      "desc": "A folder"
    },
    "FolderPeer": {
      "desc": "Peer associated to folder"
    },
    "ForumTopic": {
      "desc": "Contains information about a forum topic"
    },
    "Game": {
      "desc": "Indicates an already sent game"
    },
    "GeoPoint": {
      "desc": "Object defines a GeoPoint."
    },
    "GlobalPrivacySettings": {
      "desc": "Global privacy settings"
    },
    "GroupCall": {
      "desc": "A group call"
    },
    "GroupCallParticipant": {
      "desc": "Info about a group call participant"
    },
    "GroupCallParticipantVideo": {
      "desc": "Info about a video stream"
    },
    "GroupCallParticipantVideoSourceGroup": {
      "desc": "Describes a group of video synchronization source identifiers"
    },
    "GroupCallStreamChannel": {
      "desc": "Info about an RTMP stream in a group call or livestream"
    },
    "HighScore": {
      "desc": "Game high score"
    },
    "ImportedContact": {
      "desc": "Object contains info on a successfully imported contact."
    },
    "InlineBotSwitchPM": {
      "desc": "The bot requested the user to message them in private"
    },
    "InlineBotWebView": {
      "desc": "Specifies an inline mode mini app button, shown on top of the inline query results list."
    },
    "InlineQueryPeerType": {
      "desc": "Inline query peer type."
    },
    "InputAppEvent": {
      "desc": "Object contains info about an event that occurred in the application."
    },
    "InputBotApp": {
      "desc": "Used to fetch information about a direct link Mini App"
    },
    "InputBotInlineMessage": {
      "desc": "Represents a sent inline message from the perspective of a bot"
    },
    "InputBotInlineMessageID": {
      "desc": "Represents a sent inline message from the perspective of a bot"
    },
    "InputBotInlineResult": {
      "desc": "Inline bot result"
    },
    "InputBusinessAwayMessage": {
      "desc": ""
    },
    "InputBusinessBotRecipients": {
      "desc": ""
    },
    "InputBusinessChatLink": {
      "desc": ""
    },
    "InputBusinessGreetingMessage": {
      "desc": ""
    },
    "InputBusinessIntro": {
      "desc": ""
    },
    "InputBusinessRecipients": {
      "desc": ""
    },
    "InputChannel": {
      "desc": "Represents a channel"
    },
    "InputChatPhoto": {
      "desc": "Defines a new group profile photo."
    },
    "InputChatlist": {
      "desc": "Represents a folder"
    },
    "InputCheckPasswordSRP": {
      "desc": "Constructors for checking the validity of a 2FA SRP password"
    },
    "InputClientProxy": {
      "desc": "Info about an MTProxy used to connect."
    },
    "InputCollectible": {
      "desc": ""
    },
    "InputContact": {
      "desc": "Object defines a contact from the user's phone book."
    },
    "InputDialogPeer": {
      "desc": "Peer, or all peers in a certain folder"
    },
    "InputDocument": {
      "desc": "Defines a document for subsequent interaction."
    },
    "InputEncryptedChat": {
      "desc": "Object sets an encrypted chat ID."
    },
    "InputEncryptedFile": {
      "desc": "Object sets encrypted file for attachment"
    },
    "InputFile": {
      "desc": "Defines a file uploaded by the client."
    },
    "InputFileLocation": {
      "desc": "Defines the location of a file for download."
    },
    "InputFolderPeer": {
      "desc": "Peer in a folder"
    },
    "InputGame": {
      "desc": "A game to send"
    },
    "InputGeoPoint": {
      "desc": "Defines a GeoPoint."
    },
    "InputGroupCall": {
      "desc": "Indicates a group call"
    },
    "InputInvoice": {
      "desc": "An invoice"
    },
    "InputMedia": {
      "desc": "Defines media content of a message."
    },
    "InputMessage": {
      "desc": "A message"
    },
    "InputNotifyPeer": {
      "desc": "Object defines the set of users and/or groups that generate notifications."
    },
    "InputPaymentCredentials": {
      "desc": "Payment credentials"
    },
    "InputPeer": {
      "desc": "Peer"
    },
    "InputPeerNotifySettings": {
      "desc": "Notifications settings."
    },
    "InputPhoneCall": {
      "desc": "Phone call"
    },
    "InputPhoto": {
      "desc": "Defines a photo for further interaction."
    },
    "InputPrivacyKey": {
      "desc": "Privacy keys together with privacy rules \u00bb indicate what can or can't someone do and are specified by a PrivacyKey constructor, and its input counterpart InputPrivacyKey."
    },
    "InputPrivacyRule": {
      "desc": "Privacy rules indicate who can or can't do something and are specified by a PrivacyRule, and its input counterpart InputPrivacyRule."
    },
    "InputQuickReplyShortcut": {
      "desc": ""
    },
    "InputReplyTo": {
      "desc": "Contains info about a message or story to reply to."
    },
    "InputSecureFile": {
      "desc": "Secure passport file, for more info see the passport docs \u00bb"
    },
    "InputSecureValue": {
      "desc": "Secure value, for more info see the passport docs \u00bb"
    },
    "InputSingleMedia": {
      "desc": "A single media in an album or grouped media sent with messages.sendMultiMedia."
    },
    "InputStickerSet": {
      "desc": "Represents a stickerset"
    },
    "InputStickerSetItem": {
      "desc": "Sticker"
    },
    "InputStickeredMedia": {
      "desc": "Represents a media with attached stickers"
    },
    "InputStorePaymentPurpose": {
      "desc": "Info about a Telegram Premium purchase"
    },
    "InputTheme": {
      "desc": "Cloud theme"
    },
    "InputThemeSettings": {
      "desc": "Theme settings"
    },
    "InputUser": {
      "desc": "Defines a user for subsequent interaction."
    },
    "InputWallPaper": {
      "desc": "Wallpaper"
    },
    "InputWebDocument": {
      "desc": "Specifies a document that will have to be downloaded from the URL by the telegram servers"
    },
    "InputWebFileLocation": {
      "desc": "Location of remote file"
    },
    "Invoice": {
      "desc": "Invoice"
    },
    "JSONObjectValue": {
      "desc": "JSON key: value pair"
    },
    "JSONValue": {
      "desc": "JSON value"
    },
    "KeyboardButton": {
      "desc": "Bot or inline keyboard buttons"
    },
    "KeyboardButtonRow": {
      "desc": "Bot or inline keyboard rows"
    },
    "LabeledPrice": {
      "desc": "Labeled pricetag"
    },
    "LangPackDifference": {
      "desc": "Language pack changes"
    },
    "LangPackLanguage": {
      "desc": "Language pack language"
    },
    "LangPackString": {
      "desc": "Language pack string"
    },
    "MaskCoords": {
      "desc": "Mask coordinates (if this is a mask sticker, attached to a photo)"
    },
    "MediaArea": {
      "desc": "Represents a story media area \u00bb"
    },
    "MediaAreaCoordinates": {
      "desc": "Coordinates and size of a clicable rectangular area on top of a story."
    },
    "Message": {
      "desc": "Object describing a message."
    },
    "MessageAction": {
      "desc": "Object describing actions connected to a service message."
    },
    "MessageEntity": {
      "desc": "Message entities, representing styled text in a message"
    },
    "MessageExtendedMedia": {
      "desc": "Extended media"
    },
    "MessageFwdHeader": {
      "desc": "Info about a forwarded message"
    },
    "MessageMedia": {
      "desc": "Media"
    },
    "MessagePeerReaction": {
      "desc": "How a certain peer reacted to the message"
    },
    "MessagePeerVote": {
      "desc": "How a user voted in a poll"
    },
    "MessageRange": {
      "desc": "Indicates a range of chat messages"
    },
    "MessageReactions": {
      "desc": "Message reactions \u00bb"
    },
    "MessageReplies": {
      "desc": "Info about post comments (for channels) or message replies (for groups)"
    },
    "MessageReplyHeader": {
      "desc": "Reply information"
    },
    "MessageViews": {
      "desc": "View, forward counter + info about replies of a specific message"
    },
    "MessagesFilter": {
      "desc": "Object describes message filter."
    },
    "MissingInvitee": {
      "desc": ""
    },
    "MyBoost": {
      "desc": "Contains information about a single boost slot \u00bb."
    },
    "NearestDc": {
      "desc": "Object contains info on nearest data center."
    },
    "NotificationSound": {
      "desc": "Represents a notification sound"
    },
    "NotifyPeer": {
      "desc": "Object defines the set of users and/or groups that generate notifications."
    },
    "OutboxReadDate": {
      "desc": ""
    },
    "Page": {
      "desc": "Instant view page"
    },
    "PageBlock": {
      "desc": "Represents an instant view page element"
    },
    "PageCaption": {
      "desc": "Page caption"
    },
    "PageListItem": {
      "desc": "Item in block list"
    },
    "PageListOrderedItem": {
      "desc": "Represents an instant view ordered list"
    },
    "PageRelatedArticle": {
      "desc": "Related articles"
    },
    "PageTableCell": {
      "desc": "Represents a table in an instant view table"
    },
    "PageTableRow": {
      "desc": "Table row"
    },
    "PasswordKdfAlgo": {
      "desc": "Key derivation function to use when generating the password hash for SRP two-factor authorization"
    },
    "PaymentCharge": {
      "desc": "Charged payment"
    },
    "PaymentFormMethod": {
      "desc": "Represents a payment method"
    },
    "PaymentRequestedInfo": {
      "desc": "Requested payment info"
    },
    "PaymentSavedCredentials": {
      "desc": "Saved payment credentials"
    },
    "Peer": {
      "desc": "Chat partner or group."
    },
    "PeerBlocked": {
      "desc": "Info about a blocked user"
    },
    "PeerColor": {
      "desc": "Represents a color palette \u00bb."
    },
    "PeerLocated": {
      "desc": "Geolocated peer"
    },
    "PeerNotifySettings": {
      "desc": "Notification settings."
    },
    "PeerSettings": {
      "desc": "List of actions that are possible when interacting with this user, to be shown as suggested actions in the chat bar"
    },
    "PeerStories": {
      "desc": "Stories associated to a peer"
    },
    "PhoneCall": {
      "desc": "Phone call"
    },
    "PhoneCallDiscardReason": {
      "desc": "Why was the phone call discarded?"
    },
    "PhoneCallProtocol": {
      "desc": "Phone call protocol"
    },
    "PhoneConnection": {
      "desc": "Phone call connection"
    },
    "Photo": {
      "desc": "Object describes a photo."
    },
    "PhotoSize": {
      "desc": "Location of a certain size of a picture"
    },
    "Poll": {
      "desc": "Indicates a poll message"
    },
    "PollAnswer": {
      "desc": "Indicates a possible answer to a poll."
    },
    "PollAnswerVoters": {
      "desc": "How users voted on a certain poll answer"
    },
    "PollResults": {
      "desc": "Results of poll"
    },
    "PopularContact": {
      "desc": "Popular contact"
    },
    "PostAddress": {
      "desc": "Shipping address"
    },
    "PostInteractionCounters": {
      "desc": "Interaction counters"
    },
    "PremiumGiftCodeOption": {
      "desc": "Giveaway option."
    },
    "PremiumGiftOption": {
      "desc": "Telegram Premium gift option"
    },
    "PremiumSubscriptionOption": {
      "desc": "Telegram Premium subscription option"
    },
    "PrepaidGiveaway": {
      "desc": "Contains info about a prepaid giveaway \u00bb."
    },
    "PrivacyKey": {
      "desc": "Privacy keys together with privacy rules \u00bb indicate what can or can't someone do and are specified by a PrivacyKey constructor, and its input counterpart InputPrivacyKey."
    },
    "PrivacyRule": {
      "desc": "Privacy rules together with privacy keys indicate what can or can't someone do and are specified by a PrivacyRule constructor, and its input counterpart InputPrivacyRule."
    },
    "PublicForward": {
      "desc": "Contains info about the forwards of a story as a message to public chats and reposts by public channels."
    },
    "QuickReply": {
      "desc": ""
    },
    "Reaction": {
      "desc": "Message reaction"
    },
    "ReactionCount": {
      "desc": "Number of users that reacted with a certain emoji"
    },
    "ReactionNotificationsFrom": {
      "desc": ""
    },
    "ReactionsNotifySettings": {
      "desc": ""
    },
    "ReadParticipantDate": {
      "desc": "Contains info about when a certain participant has read a message"
    },
    "ReceivedNotifyMessage": {
      "desc": "Confirmation of message receipt"
    },
    "RecentMeUrl": {
      "desc": "Recent t.me urls"
    },
    "ReplyMarkup": {
      "desc": "Reply markup for bot and inline keyboards"
    },
    "ReportReason": {
      "desc": "Report reason"
    },
    "RequestPeerType": {
      "desc": "Filtering criteria to use for the peer selection list shown to the user."
    },
    "RequestedPeer": {
      "desc": ""
    },
    "RestrictionReason": {
      "desc": "Restriction reason"
    },
    "RichText": {
      "desc": "Rich text"
    },
    "SavedContact": {
      "desc": "Saved contact"
    },
    "SavedDialog": {
      "desc": "Represents a saved message dialog \u00bb."
    },
    "SavedReactionTag": {
      "desc": ""
    },
    "SearchResultsCalendarPeriod": {
      "desc": "Information about found messages sent on a specific day, used to split the messages in messages.searchResultsCalendar constructors by days."
    },
    "SearchResultsPosition": {
      "desc": "Information about a message in a specific position"
    },
    "SecureCredentialsEncrypted": {
      "desc": "Encrypted secure credentials"
    },
    "SecureData": {
      "desc": "Secure passport data, for more info see the passport docs \u00bb"
    },
    "SecureFile": {
      "desc": "Secure passport file, for more info see the passport docs \u00bb"
    },
    "SecurePasswordKdfAlgo": {
      "desc": "KDF algorithm to use for computing telegram passport hash"
    },
    "SecurePlainData": {
      "desc": "Plaintext verified passport data."
    },
    "SecureRequiredType": {
      "desc": "Required secure file type"
    },
    "SecureSecretSettings": {
      "desc": "Telegram passport settings"
    },
    "SecureValue": {
      "desc": "Secure Telegram Passport value"
    },
    "SecureValueError": {
      "desc": "Secure value error"
    },
    "SecureValueHash": {
      "desc": "Secure value hash"
    },
    "SecureValueType": {
      "desc": "Secure value type"
    },
    "SendAsPeer": {
      "desc": "Indicates a peer that can be used to send messages"
    },
    "SendMessageAction": {
      "desc": "User actions. Use this to provide users with detailed info about their chat partner's actions: typing or sending attachments of all kinds."
    },
    "ShippingOption": {
      "desc": "Shipping options"
    },
    "SimpleWebViewResult": {
      "desc": "Contains the webview URL with appropriate theme parameters added"
    },
    "SmsJob": {
      "desc": ""
    },
    "SponsoredMessage": {
      "desc": "A sponsored message"
    },
    "SponsoredMessageReportOption": {
      "desc": ""
    },
    "StarsTopupOption": {
      "desc": ""
    },
    "StarsTransaction": {
      "desc": ""
    },
    "StarsTransactionPeer": {
      "desc": ""
    },
    "StatsAbsValueAndPrev": {
      "desc": "Channel statistics value pair"
    },
    "StatsDateRangeDays": {
      "desc": "Channel statistics date range"
    },
    "StatsGraph": {
      "desc": "Channel statistics graph"
    },
    "StatsGroupTopAdmin": {
      "desc": "Most active admin in a supergroup"
    },
    "StatsGroupTopInviter": {
      "desc": "Most active inviter in a supergroup"
    },
    "StatsGroupTopPoster": {
      "desc": "Most active user in a supergroup"
    },
    "StatsPercentValue": {
      "desc": "Channel statistics percentage"
    },
    "StatsURL": {
      "desc": "URL with chat statistics"
    },
    "StickerKeyword": {
      "desc": "Keywords for a certain sticker"
    },
    "StickerPack": {
      "desc": "Stickerpack"
    },
    "StickerSet": {
      "desc": "Represents a stickerset (stickerpack)"
    },
    "StickerSetCovered": {
      "desc": "Stickerset preview"
    },
    "StoriesStealthMode": {
      "desc": "Story stealth mode status"
    },
    "StoryFwdHeader": {
      "desc": "Contains info about the original poster of a reposted story."
    },
    "StoryItem": {
      "desc": "Represents a Telegram Story"
    },
    "StoryReaction": {
      "desc": "How a certain peer reacted to or interacted with a story"
    },
    "StoryView": {
      "desc": "Story view date and reaction information"
    },
    "StoryViews": {
      "desc": "Aggregated view and reaction information of a story"
    },
    "TextWithEntities": {
      "desc": "Styled text with message entities"
    },
    "Theme": {
      "desc": "Cloud theme"
    },
    "ThemeSettings": {
      "desc": "Theme settings"
    },
    "Timezone": {
      "desc": ""
    },
    "TopPeer": {
      "desc": "Top peer"
    },
    "TopPeerCategory": {
      "desc": "Top peer category"
    },
    "TopPeerCategoryPeers": {
      "desc": "Top peers by top peer category"
    },
    "Update": {
      "desc": "Object contains info on events occurred."
    },
    "Updates": {
      "desc": "Object which is perceived by the client without a call on its part when an event occurs."
    },
    "UrlAuthResult": {
      "desc": "URL authorization result"
    },
    "User": {
      "desc": "Object defines a user."
    },
    "UserFull": {
      "desc": "Object contains extended user info."
    },
    "UserProfilePhoto": {
      "desc": "Object contains info on the user's profile photo."
    },
    "UserStatus": {
      "desc": "User online status"
    },
    "Username": {
      "desc": "Contains information about a username"
    },
    "VideoSize": {
      "desc": "Represents an animated video thumbnail"
    },
    "WallPaper": {
      "desc": "Object contains info on a wallpaper."
    },
    "WallPaperSettings": {
      "desc": "Wallpaper rendering information."
    },
    "WebAuthorization": {
      "desc": "Web authorization"
    },
    "WebDocument": {
      "desc": "Remote document"
    },
    "WebPage": {
      "desc": "Instant View webpage preview"
    },
    "WebPageAttribute": {
      "desc": "Webpage attributes"
    },
    "WebViewMessageSent": {
      "desc": "Contains information about an inline message sent by a Web App on behalf of a user."
    },
    "WebViewResult": {
      "desc": "Contains the webview URL with appropriate theme and user info parameters added"
    },
    "X": {
      "desc": "Represents the return type of the wrapped method."
    },
    "account.AuthorizationForm": {
      "desc": "Authorization form"
    },
    "account.Authorizations": {
      "desc": "Logged-in sessions"
    },
    "account.AutoDownloadSettings": {
      "desc": "Media autodownload settings"
    },
    "account.AutoSaveSettings": {
      "desc": "Contains media autosave settings"
    },
    "account.BusinessChatLinks": {
      "desc": ""
    },
    "account.ConnectedBots": {
      "desc": ""
    },
    "account.ContentSettings": {
      "desc": "Sensitive content settings"
    },
    "account.EmailVerified": {
      "desc": "Email verification status"
    },
    "account.EmojiStatuses": {
      "desc": "A list of emoji statuses"
    },
    "account.Password": {
      "desc": "Configuration for two-factor authorization"
    },
    "account.PasswordInputSettings": {
      "desc": "Constructor for setting up a new 2FA SRP password"
    },
    "account.PasswordSettings": {
      "desc": "Private info associated to the password info (recovery email, telegram passport info & so on)"
    },
    "account.PrivacyRules": {
      "desc": "Privacy rules"
    },
    "account.ResetPasswordResult": {
      "desc": "Result of an account.resetPassword request."
    },
    "account.ResolvedBusinessChatLinks": {
      "desc": ""
    },
    "account.SavedRingtone": {
      "desc": "Contains information about a saved notification sound"
    },
    "account.SavedRingtones": {
      "desc": "Contains a list of saved notification sounds"
    },
    "account.SentEmailCode": {
      "desc": "The email code that was sent"
    },
    "account.Takeout": {
      "desc": "Takeout info"
    },
    "account.Themes": {
      "desc": "Installed themes"
    },
    "account.TmpPassword": {
      "desc": "Temporary password"
    },
    "account.WallPapers": {
      "desc": "Wallpapers"
    },
    "account.WebAuthorizations": {
      "desc": "Web authorizations"
    },
    "auth.Authorization": {
      "desc": "Object contains info on user authorization."
    },
    "auth.CodeType": {
      "desc": "Type of verification code that will be sent next if you call the resendCode method"
    },
    "auth.ExportedAuthorization": {
      "desc": "Exported authorization"
    },
    "auth.LoggedOut": {
      "desc": "Future auth token \u00bb to be used on subsequent authorizations"
    },
    "auth.LoginToken": {
      "desc": "Login token (for QR code login)"
    },
    "auth.PasswordRecovery": {
      "desc": "Recovery info of a 2FA password, only for accounts with a recovery email configured."
    },
    "auth.SentCode": {
      "desc": "Contains info on a confirmation code message sent via SMS, phone call or Telegram."
    },
    "auth.SentCodeType": {
      "desc": "Type of the verification code that was sent"
    },
    "bots.BotInfo": {
      "desc": "Localized name, about text and description of a bot."
    },
    "channels.AdminLogResults": {
      "desc": "Admin log events"
    },
    "channels.ChannelParticipant": {
      "desc": "Channel participant"
    },
    "channels.ChannelParticipants": {
      "desc": "Channel/supergroup participants"
    },
    "channels.SendAsPeers": {
      "desc": "A list of peers that can be used to send messages in a specific group"
    },
    "channels.SponsoredMessageReportResult": {
      "desc": ""
    },
    "chatlists.ChatlistInvite": {
      "desc": "Info about a chat folder deep link \u00bb."
    },
    "chatlists.ChatlistUpdates": {
      "desc": "Updated info about a chat folder deep link \u00bb."
    },
    "chatlists.ExportedChatlistInvite": {
      "desc": "Exported chat folder deep link \u00bb."
    },
    "chatlists.ExportedInvites": {
      "desc": "A list of exported chat folder deep links \u00bb."
    },
    "contacts.Blocked": {
      "desc": "Info on users from the current user's black list."
    },
    "contacts.ContactBirthdays": {
      "desc": ""
    },
    "contacts.Contacts": {
      "desc": "Info on the current user's contact list."
    },
    "contacts.Found": {
      "desc": "Object contains info on users found by name substring and auxiliary data."
    },
    "contacts.ImportedContacts": {
      "desc": "Object contains info on successfully imported contacts."
    },
    "contacts.ResolvedPeer": {
      "desc": "Peer returned after resolving a @username"
    },
    "contacts.TopPeers": {
      "desc": "Top peers"
    },
    "fragment.CollectibleInfo": {
      "desc": ""
    },
    "help.AppConfig": {
      "desc": "Contains various client configuration parameters"
    },
    "help.AppUpdate": {
      "desc": "Contains info on app update availability."
    },
    "help.CountriesList": {
      "desc": "Name, ISO code, localized name and phone codes/patterns of all available countries"
    },
    "help.Country": {
      "desc": "Name, ISO code, localized name and phone codes/patterns of a specific country"
    },
    "help.CountryCode": {
      "desc": "Country code and phone number pattern of a specific country"
    },
    "help.DeepLinkInfo": {
      "desc": "Contains information about an unsupported deep link \u00bb"
    },
    "help.InviteText": {
      "desc": "Object contains info on the text of a message with an invitation."
    },
    "help.PassportConfig": {
      "desc": "Telegram passport configuration"
    },
    "help.PeerColorOption": {
      "desc": "Contains info about a color palette \u00bb."
    },
    "help.PeerColorSet": {
      "desc": "Contains info about a color palette \u00bb."
    },
    "help.PeerColors": {
      "desc": "Contains info about multiple color palettes \u00bb."
    },
    "help.PremiumPromo": {
      "desc": "Telegram Premium promotion information"
    },
    "help.PromoData": {
      "desc": "Info about pinned MTProxy or Public Service Announcement peers."
    },
    "help.RecentMeUrls": {
      "desc": "Recent t.me URLs"
    },
    "help.Support": {
      "desc": "Info about the support user, relevant to the current user."
    },
    "help.SupportName": {
      "desc": "Get localized name for support user"
    },
    "help.TermsOfService": {
      "desc": "Contains info about the latest telegram Terms Of Service."
    },
    "help.TermsOfServiceUpdate": {
      "desc": "Update of Telegram's terms of service"
    },
    "help.TimezonesList": {
      "desc": ""
    },
    "help.UserInfo": {
      "desc": "User info"
    },
    "int": {
      "desc": "A basic bare type, the values of which correspond to single-element sequences, i.e. numbers from -2^31 to 2^31-1 which in this case represent themselves."
    },
    "long": {
      "desc": "A basic bare type, elements of which correspond to two-element sequences, representing 64-bit signed numbers (little-endian)."
    },
    "messages.AffectedFoundMessages": {
      "desc": "Messages found and affected by changes"
    },
    "messages.AffectedHistory": {
      "desc": "Object contains info on affected part of communication history with the user or in a chat."
    },
    "messages.AffectedMessages": {
      "desc": "Messages affected by changes"
    },
    "messages.AllStickers": {
      "desc": "All stickers"
    },
    "messages.ArchivedStickers": {
      "desc": "Archived stickers"
    },
    "messages.AvailableEffects": {
      "desc": ""
    },
    "messages.AvailableReactions": {
      "desc": "Animations and metadata associated with message reactions \u00bb"
    },
    "messages.BotApp": {
      "desc": "Contains information about a direct link Mini App"
    },
    "messages.BotCallbackAnswer": {
      "desc": "Callback answer of bot"
    },
    "messages.BotResults": {
      "desc": "Result of a query to an inline bot"
    },
    "messages.ChatAdminsWithInvites": {
      "desc": "Info about chat invites generated by admins."
    },
    "messages.ChatFull": {
      "desc": "Full info about a channel, supergroup, gigagroup or basic group."
    },
    "messages.ChatInviteImporters": {
      "desc": "List of users that imported a chat invitation link."
    },
    "messages.Chats": {
      "desc": "Object contains list of chats with auxiliary data."
    },
    "messages.CheckedHistoryImportPeer": {
      "desc": "Contains a confirmation text to be shown to the user, upon importing chat history, click here for more info \u00bb."
    },
    "messages.DhConfig": {
      "desc": "Contains Diffie-Hellman key generation protocol parameters."
    },
    "messages.DialogFilters": {
      "desc": ""
    },
    "messages.Dialogs": {
      "desc": "Object contains a list of chats with messages and auxiliary data."
    },
    "messages.DiscussionMessage": {
      "desc": "Info about a message thread"
    },
    "messages.EmojiGroups": {
      "desc": "Represents a list of emoji categories."
    },
    "messages.ExportedChatInvite": {
      "desc": "Contains info about a chat invite, and eventually a pointer to the newest chat invite."
    },
    "messages.ExportedChatInvites": {
      "desc": "Info about chat invites exported by a certain admin."
    },
    "messages.FavedStickers": {
      "desc": "Favorited stickers"
    },
    "messages.FeaturedStickers": {
      "desc": "Featured stickers"
    },
    "messages.ForumTopics": {
      "desc": "Contains information about multiple forum topics"
    },
    "messages.FoundStickerSets": {
      "desc": "Found stickersets"
    },
    "messages.HighScores": {
      "desc": "High scores (in games)"
    },
    "messages.HistoryImport": {
      "desc": "Identifier of a history import session, click here for more info \u00bb."
    },
    "messages.HistoryImportParsed": {
      "desc": "Contains information about a chat export file, generated by a foreign chat app."
    },
    "messages.InactiveChats": {
      "desc": "Inactive chat list"
    },
    "messages.InvitedUsers": {
      "desc": ""
    },
    "messages.MessageEditData": {
      "desc": "Message edit data for media"
    },
    "messages.MessageReactionsList": {
      "desc": "List of peers that reacted to a specific message"
    },
    "messages.MessageViews": {
      "desc": "View, forward counter + info about replies"
    },
    "messages.Messages": {
      "desc": "Object contains information on list of messages with auxiliary data."
    },
    "messages.MyStickers": {
      "desc": ""
    },
    "messages.PeerDialogs": {
      "desc": "List of dialogs"
    },
    "messages.PeerSettings": {
      "desc": "Peer settings"
    },
    "messages.QuickReplies": {
      "desc": ""
    },
    "messages.Reactions": {
      "desc": "A set of message reactions"
    },
    "messages.RecentStickers": {
      "desc": "Recent stickers"
    },
    "messages.SavedDialogs": {
      "desc": "Represents some saved message dialogs \u00bb."
    },
    "messages.SavedGifs": {
      "desc": "Saved GIFs"
    },
    "messages.SavedReactionTags": {
      "desc": ""
    },
    "messages.SearchCounter": {
      "desc": "Number of results that would be returned by a search"
    },
    "messages.SearchResultsCalendar": {
      "desc": "Information about found messages sent on a specific day"
    },
    "messages.SearchResultsPositions": {
      "desc": "Information about sparse positions of messages"
    },
    "messages.SentEncryptedMessage": {
      "desc": "Contains info on message sent to an encrypted chat."
    },
    "messages.SponsoredMessages": {
      "desc": "A set of sponsored messages associated with a channel"
    },
    "messages.StickerSet": {
      "desc": "Stickerset"
    },
    "messages.StickerSetInstallResult": {
      "desc": "Result of stickerset installation process"
    },
    "messages.Stickers": {
      "desc": "Stickers"
    },
    "messages.TranscribedAudio": {
      "desc": "Transcribed text from a voice message"
    },
    "messages.TranslatedText": {
      "desc": "Translated text with entities."
    },
    "messages.VotesList": {
      "desc": "How users voted in a poll"
    },
    "messages.WebPage": {
      "desc": "Contains an instant view webpage."
    },
    "payments.BankCardData": {
      "desc": "Credit card info, provided by the card's bank(s)"
    },
    "payments.CheckedGiftCode": {
      "desc": "Info about a Telegram Premium Giftcode."
    },
    "payments.ExportedInvoice": {
      "desc": "Exported invoice"
    },
    "payments.GiveawayInfo": {
      "desc": "Info about a Telegram Premium Giveaway."
    },
    "payments.PaymentForm": {
      "desc": "Payment form"
    },
    "payments.PaymentReceipt": {
      "desc": "Payment receipt"
    },
    "payments.PaymentResult": {
      "desc": "Payment result"
    },
    "payments.SavedInfo": {
      "desc": "Saved payment info"
    },
    "payments.StarsStatus": {
      "desc": ""
    },
    "payments.ValidatedRequestedInfo": {
      "desc": "Validated requested info"
    },
    "phone.ExportedGroupCallInvite": {
      "desc": "An exported group call invitation."
    },
    "phone.GroupCall": {
      "desc": "Contains info about a group call, and partial info about its participants."
    },
    "phone.GroupCallStreamChannels": {
      "desc": "Info about RTMP streams in a group call or livestream"
    },
    "phone.GroupCallStreamRtmpUrl": {
      "desc": "RTMP URL and stream key to be used in streaming software"
    },
    "phone.GroupParticipants": {
      "desc": "Info about the participants of a group call or livestream"
    },
    "phone.JoinAsPeers": {
      "desc": "A list of peers that can be used to join a group call, presenting yourself as a specific user/channel."
    },
    "phone.PhoneCall": {
      "desc": "Phone call"
    },
    "photos.Photo": {
      "desc": "Photo with auxiliary data."
    },
    "photos.Photos": {
      "desc": "Object contains list of photos with auxiliary data."
    },
    "premium.BoostsList": {
      "desc": "List of boosts that were applied to a peer by multiple users."
    },
    "premium.BoostsStatus": {
      "desc": "Contains info about the current boost status of a peer."
    },
    "premium.MyBoosts": {
      "desc": "A list of peers we are currently boosting, and how many boost slots we have left."
    },
    "smsjobs.EligibilityToJoin": {
      "desc": ""
    },
    "smsjobs.Status": {
      "desc": ""
    },
    "stats.BroadcastRevenueStats": {
      "desc": ""
    },
    "stats.BroadcastRevenueTransactions": {
      "desc": ""
    },
    "stats.BroadcastRevenueWithdrawalUrl": {
      "desc": ""
    },
    "stats.BroadcastStats": {
      "desc": "Channel statistics"
    },
    "stats.MegagroupStats": {
      "desc": "Supergroup statistics"
    },
    "stats.MessageStats": {
      "desc": "Message statistics"
    },
    "stats.PublicForwards": {
      "desc": "Contains info about the forwards of a story as a message to public chats and reposts by public channels."
    },
    "stats.StoryStats": {
      "desc": "Contains statistics about a story."
    },
    "stickers.SuggestedShortName": {
      "desc": "A suggested short name for the specified stickerpack"
    },
    "storage.FileType": {
      "desc": "Object describes the file type."
    },
    "stories.AllStories": {
      "desc": "Full list of active (or active and hidden) stories."
    },
    "stories.PeerStories": {
      "desc": "Active story list of a specific peer."
    },
    "stories.Stories": {
      "desc": "List of stories"
    },
    "stories.StoryReactionsList": {
      "desc": "List of peers that reacted to a specific story"
    },
    "stories.StoryViews": {
      "desc": "Reaction and view counters for a list of stories"
    },
    "stories.StoryViewsList": {
      "desc": "Reaction and view counters for a story"
    },
    "updates.ChannelDifference": {
      "desc": "Contains the difference (new messages) between our local channel state and the remote state"
    },
    "updates.Difference": {
      "desc": "Occurred changes."
    },
    "updates.State": {
      "desc": "Object contains info on state for further updates."
    },
    "upload.CdnFile": {
      "desc": "Represents the download status of a CDN file"
    },
    "upload.File": {
      "desc": "Contains info on file."
    },
    "upload.WebFile": {
      "desc": "Remote file"
    },
    "users.UserFull": {
      "desc": "Full user information, with attached context peers for reactions"
    }
  }
}